
LED-Matrix-Watch-Alt.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002890  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000ec  08002950  08002950  00012950  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002a3c  08002a3c  0002009c  2**0
                  CONTENTS
  4 .ARM          00000000  08002a3c  08002a3c  0002009c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002a3c  08002a3c  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002a3c  08002a3c  00012a3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002a40  08002a40  00012a40  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08002a44  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d4  2000009c  08002ae0  0002009c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08002ae0  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000200c4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000059f7  00000000  00000000  00020107  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000014f7  00000000  00000000  00025afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000648  00000000  00000000  00026ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000004ae  00000000  00000000  00027640  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000119b8  00000000  00000000  00027aee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00007330  00000000  00000000  000394a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0006d0a0  00000000  00000000  000407d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000168c  00000000  00000000  000ad878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000aef04  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	2000009c 	.word	0x2000009c
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002938 	.word	0x08002938

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	200000a0 	.word	0x200000a0
 8000104:	08002938 	.word	0x08002938

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <__aeabi_f2uiz>:
 8000220:	219e      	movs	r1, #158	; 0x9e
 8000222:	b510      	push	{r4, lr}
 8000224:	05c9      	lsls	r1, r1, #23
 8000226:	1c04      	adds	r4, r0, #0
 8000228:	f000 fba2 	bl	8000970 <__aeabi_fcmpge>
 800022c:	2800      	cmp	r0, #0
 800022e:	d103      	bne.n	8000238 <__aeabi_f2uiz+0x18>
 8000230:	1c20      	adds	r0, r4, #0
 8000232:	f000 fafb 	bl	800082c <__aeabi_f2iz>
 8000236:	bd10      	pop	{r4, pc}
 8000238:	219e      	movs	r1, #158	; 0x9e
 800023a:	1c20      	adds	r0, r4, #0
 800023c:	05c9      	lsls	r1, r1, #23
 800023e:	f000 f955 	bl	80004ec <__aeabi_fsub>
 8000242:	f000 faf3 	bl	800082c <__aeabi_f2iz>
 8000246:	2380      	movs	r3, #128	; 0x80
 8000248:	061b      	lsls	r3, r3, #24
 800024a:	469c      	mov	ip, r3
 800024c:	4460      	add	r0, ip
 800024e:	e7f2      	b.n	8000236 <__aeabi_f2uiz+0x16>

08000250 <__aeabi_fmul>:
 8000250:	0243      	lsls	r3, r0, #9
 8000252:	0a5b      	lsrs	r3, r3, #9
 8000254:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000256:	464f      	mov	r7, r9
 8000258:	4646      	mov	r6, r8
 800025a:	4699      	mov	r9, r3
 800025c:	46d6      	mov	lr, sl
 800025e:	0fc3      	lsrs	r3, r0, #31
 8000260:	0045      	lsls	r5, r0, #1
 8000262:	4698      	mov	r8, r3
 8000264:	b5c0      	push	{r6, r7, lr}
 8000266:	464b      	mov	r3, r9
 8000268:	1c0f      	adds	r7, r1, #0
 800026a:	0e2d      	lsrs	r5, r5, #24
 800026c:	d100      	bne.n	8000270 <__aeabi_fmul+0x20>
 800026e:	e0cb      	b.n	8000408 <__aeabi_fmul+0x1b8>
 8000270:	2dff      	cmp	r5, #255	; 0xff
 8000272:	d100      	bne.n	8000276 <__aeabi_fmul+0x26>
 8000274:	e0cf      	b.n	8000416 <__aeabi_fmul+0x1c6>
 8000276:	2280      	movs	r2, #128	; 0x80
 8000278:	00db      	lsls	r3, r3, #3
 800027a:	04d2      	lsls	r2, r2, #19
 800027c:	431a      	orrs	r2, r3
 800027e:	2300      	movs	r3, #0
 8000280:	4691      	mov	r9, r2
 8000282:	2600      	movs	r6, #0
 8000284:	469a      	mov	sl, r3
 8000286:	3d7f      	subs	r5, #127	; 0x7f
 8000288:	027c      	lsls	r4, r7, #9
 800028a:	007b      	lsls	r3, r7, #1
 800028c:	0a64      	lsrs	r4, r4, #9
 800028e:	0e1b      	lsrs	r3, r3, #24
 8000290:	0fff      	lsrs	r7, r7, #31
 8000292:	2b00      	cmp	r3, #0
 8000294:	d100      	bne.n	8000298 <__aeabi_fmul+0x48>
 8000296:	e0a9      	b.n	80003ec <__aeabi_fmul+0x19c>
 8000298:	2bff      	cmp	r3, #255	; 0xff
 800029a:	d011      	beq.n	80002c0 <__aeabi_fmul+0x70>
 800029c:	2280      	movs	r2, #128	; 0x80
 800029e:	00e4      	lsls	r4, r4, #3
 80002a0:	04d2      	lsls	r2, r2, #19
 80002a2:	4314      	orrs	r4, r2
 80002a4:	4642      	mov	r2, r8
 80002a6:	3b7f      	subs	r3, #127	; 0x7f
 80002a8:	195b      	adds	r3, r3, r5
 80002aa:	407a      	eors	r2, r7
 80002ac:	2000      	movs	r0, #0
 80002ae:	b2d2      	uxtb	r2, r2
 80002b0:	1c5d      	adds	r5, r3, #1
 80002b2:	2e0a      	cmp	r6, #10
 80002b4:	dd13      	ble.n	80002de <__aeabi_fmul+0x8e>
 80002b6:	003a      	movs	r2, r7
 80002b8:	2e0b      	cmp	r6, #11
 80002ba:	d047      	beq.n	800034c <__aeabi_fmul+0xfc>
 80002bc:	4647      	mov	r7, r8
 80002be:	e03f      	b.n	8000340 <__aeabi_fmul+0xf0>
 80002c0:	002b      	movs	r3, r5
 80002c2:	33ff      	adds	r3, #255	; 0xff
 80002c4:	2c00      	cmp	r4, #0
 80002c6:	d11e      	bne.n	8000306 <__aeabi_fmul+0xb6>
 80002c8:	2202      	movs	r2, #2
 80002ca:	4316      	orrs	r6, r2
 80002cc:	4642      	mov	r2, r8
 80002ce:	3501      	adds	r5, #1
 80002d0:	407a      	eors	r2, r7
 80002d2:	b2d2      	uxtb	r2, r2
 80002d4:	35ff      	adds	r5, #255	; 0xff
 80002d6:	2e0a      	cmp	r6, #10
 80002d8:	dd00      	ble.n	80002dc <__aeabi_fmul+0x8c>
 80002da:	e0e4      	b.n	80004a6 <__aeabi_fmul+0x256>
 80002dc:	2002      	movs	r0, #2
 80002de:	2e02      	cmp	r6, #2
 80002e0:	dc1c      	bgt.n	800031c <__aeabi_fmul+0xcc>
 80002e2:	3e01      	subs	r6, #1
 80002e4:	2e01      	cmp	r6, #1
 80002e6:	d842      	bhi.n	800036e <__aeabi_fmul+0x11e>
 80002e8:	2802      	cmp	r0, #2
 80002ea:	d03d      	beq.n	8000368 <__aeabi_fmul+0x118>
 80002ec:	2801      	cmp	r0, #1
 80002ee:	d166      	bne.n	80003be <__aeabi_fmul+0x16e>
 80002f0:	2000      	movs	r0, #0
 80002f2:	2100      	movs	r1, #0
 80002f4:	05c0      	lsls	r0, r0, #23
 80002f6:	4308      	orrs	r0, r1
 80002f8:	07d2      	lsls	r2, r2, #31
 80002fa:	4310      	orrs	r0, r2
 80002fc:	bce0      	pop	{r5, r6, r7}
 80002fe:	46ba      	mov	sl, r7
 8000300:	46b1      	mov	r9, r6
 8000302:	46a8      	mov	r8, r5
 8000304:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000306:	2203      	movs	r2, #3
 8000308:	4316      	orrs	r6, r2
 800030a:	4642      	mov	r2, r8
 800030c:	3501      	adds	r5, #1
 800030e:	407a      	eors	r2, r7
 8000310:	b2d2      	uxtb	r2, r2
 8000312:	35ff      	adds	r5, #255	; 0xff
 8000314:	2e0a      	cmp	r6, #10
 8000316:	dd00      	ble.n	800031a <__aeabi_fmul+0xca>
 8000318:	e0e4      	b.n	80004e4 <__aeabi_fmul+0x294>
 800031a:	2003      	movs	r0, #3
 800031c:	2101      	movs	r1, #1
 800031e:	40b1      	lsls	r1, r6
 8000320:	26a6      	movs	r6, #166	; 0xa6
 8000322:	00f6      	lsls	r6, r6, #3
 8000324:	4231      	tst	r1, r6
 8000326:	d10a      	bne.n	800033e <__aeabi_fmul+0xee>
 8000328:	2690      	movs	r6, #144	; 0x90
 800032a:	00b6      	lsls	r6, r6, #2
 800032c:	4231      	tst	r1, r6
 800032e:	d116      	bne.n	800035e <__aeabi_fmul+0x10e>
 8000330:	3eb9      	subs	r6, #185	; 0xb9
 8000332:	3eff      	subs	r6, #255	; 0xff
 8000334:	420e      	tst	r6, r1
 8000336:	d01a      	beq.n	800036e <__aeabi_fmul+0x11e>
 8000338:	46a1      	mov	r9, r4
 800033a:	4682      	mov	sl, r0
 800033c:	e000      	b.n	8000340 <__aeabi_fmul+0xf0>
 800033e:	0017      	movs	r7, r2
 8000340:	4653      	mov	r3, sl
 8000342:	003a      	movs	r2, r7
 8000344:	2b02      	cmp	r3, #2
 8000346:	d00f      	beq.n	8000368 <__aeabi_fmul+0x118>
 8000348:	464c      	mov	r4, r9
 800034a:	4650      	mov	r0, sl
 800034c:	2803      	cmp	r0, #3
 800034e:	d1cd      	bne.n	80002ec <__aeabi_fmul+0x9c>
 8000350:	2180      	movs	r1, #128	; 0x80
 8000352:	03c9      	lsls	r1, r1, #15
 8000354:	4321      	orrs	r1, r4
 8000356:	0249      	lsls	r1, r1, #9
 8000358:	20ff      	movs	r0, #255	; 0xff
 800035a:	0a49      	lsrs	r1, r1, #9
 800035c:	e7ca      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800035e:	2180      	movs	r1, #128	; 0x80
 8000360:	2200      	movs	r2, #0
 8000362:	20ff      	movs	r0, #255	; 0xff
 8000364:	03c9      	lsls	r1, r1, #15
 8000366:	e7c5      	b.n	80002f4 <__aeabi_fmul+0xa4>
 8000368:	20ff      	movs	r0, #255	; 0xff
 800036a:	2100      	movs	r1, #0
 800036c:	e7c2      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800036e:	0c20      	lsrs	r0, r4, #16
 8000370:	4649      	mov	r1, r9
 8000372:	0424      	lsls	r4, r4, #16
 8000374:	0c24      	lsrs	r4, r4, #16
 8000376:	0027      	movs	r7, r4
 8000378:	0c0e      	lsrs	r6, r1, #16
 800037a:	0409      	lsls	r1, r1, #16
 800037c:	0c09      	lsrs	r1, r1, #16
 800037e:	4374      	muls	r4, r6
 8000380:	434f      	muls	r7, r1
 8000382:	4346      	muls	r6, r0
 8000384:	4348      	muls	r0, r1
 8000386:	0c39      	lsrs	r1, r7, #16
 8000388:	1900      	adds	r0, r0, r4
 800038a:	1809      	adds	r1, r1, r0
 800038c:	428c      	cmp	r4, r1
 800038e:	d903      	bls.n	8000398 <__aeabi_fmul+0x148>
 8000390:	2080      	movs	r0, #128	; 0x80
 8000392:	0240      	lsls	r0, r0, #9
 8000394:	4684      	mov	ip, r0
 8000396:	4466      	add	r6, ip
 8000398:	043f      	lsls	r7, r7, #16
 800039a:	0408      	lsls	r0, r1, #16
 800039c:	0c3f      	lsrs	r7, r7, #16
 800039e:	19c0      	adds	r0, r0, r7
 80003a0:	0184      	lsls	r4, r0, #6
 80003a2:	1e67      	subs	r7, r4, #1
 80003a4:	41bc      	sbcs	r4, r7
 80003a6:	0c09      	lsrs	r1, r1, #16
 80003a8:	0e80      	lsrs	r0, r0, #26
 80003aa:	1989      	adds	r1, r1, r6
 80003ac:	4304      	orrs	r4, r0
 80003ae:	0189      	lsls	r1, r1, #6
 80003b0:	430c      	orrs	r4, r1
 80003b2:	0109      	lsls	r1, r1, #4
 80003b4:	d571      	bpl.n	800049a <__aeabi_fmul+0x24a>
 80003b6:	2301      	movs	r3, #1
 80003b8:	0861      	lsrs	r1, r4, #1
 80003ba:	401c      	ands	r4, r3
 80003bc:	430c      	orrs	r4, r1
 80003be:	002b      	movs	r3, r5
 80003c0:	337f      	adds	r3, #127	; 0x7f
 80003c2:	2b00      	cmp	r3, #0
 80003c4:	dd51      	ble.n	800046a <__aeabi_fmul+0x21a>
 80003c6:	0761      	lsls	r1, r4, #29
 80003c8:	d004      	beq.n	80003d4 <__aeabi_fmul+0x184>
 80003ca:	210f      	movs	r1, #15
 80003cc:	4021      	ands	r1, r4
 80003ce:	2904      	cmp	r1, #4
 80003d0:	d000      	beq.n	80003d4 <__aeabi_fmul+0x184>
 80003d2:	3404      	adds	r4, #4
 80003d4:	0121      	lsls	r1, r4, #4
 80003d6:	d503      	bpl.n	80003e0 <__aeabi_fmul+0x190>
 80003d8:	4b43      	ldr	r3, [pc, #268]	; (80004e8 <__aeabi_fmul+0x298>)
 80003da:	401c      	ands	r4, r3
 80003dc:	002b      	movs	r3, r5
 80003de:	3380      	adds	r3, #128	; 0x80
 80003e0:	2bfe      	cmp	r3, #254	; 0xfe
 80003e2:	dcc1      	bgt.n	8000368 <__aeabi_fmul+0x118>
 80003e4:	01a1      	lsls	r1, r4, #6
 80003e6:	0a49      	lsrs	r1, r1, #9
 80003e8:	b2d8      	uxtb	r0, r3
 80003ea:	e783      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80003ec:	2c00      	cmp	r4, #0
 80003ee:	d12c      	bne.n	800044a <__aeabi_fmul+0x1fa>
 80003f0:	2301      	movs	r3, #1
 80003f2:	4642      	mov	r2, r8
 80003f4:	431e      	orrs	r6, r3
 80003f6:	002b      	movs	r3, r5
 80003f8:	407a      	eors	r2, r7
 80003fa:	2001      	movs	r0, #1
 80003fc:	b2d2      	uxtb	r2, r2
 80003fe:	1c5d      	adds	r5, r3, #1
 8000400:	2e0a      	cmp	r6, #10
 8000402:	dd00      	ble.n	8000406 <__aeabi_fmul+0x1b6>
 8000404:	e757      	b.n	80002b6 <__aeabi_fmul+0x66>
 8000406:	e76a      	b.n	80002de <__aeabi_fmul+0x8e>
 8000408:	2b00      	cmp	r3, #0
 800040a:	d110      	bne.n	800042e <__aeabi_fmul+0x1de>
 800040c:	2301      	movs	r3, #1
 800040e:	2604      	movs	r6, #4
 8000410:	2500      	movs	r5, #0
 8000412:	469a      	mov	sl, r3
 8000414:	e738      	b.n	8000288 <__aeabi_fmul+0x38>
 8000416:	2b00      	cmp	r3, #0
 8000418:	d104      	bne.n	8000424 <__aeabi_fmul+0x1d4>
 800041a:	2302      	movs	r3, #2
 800041c:	2608      	movs	r6, #8
 800041e:	25ff      	movs	r5, #255	; 0xff
 8000420:	469a      	mov	sl, r3
 8000422:	e731      	b.n	8000288 <__aeabi_fmul+0x38>
 8000424:	2303      	movs	r3, #3
 8000426:	260c      	movs	r6, #12
 8000428:	25ff      	movs	r5, #255	; 0xff
 800042a:	469a      	mov	sl, r3
 800042c:	e72c      	b.n	8000288 <__aeabi_fmul+0x38>
 800042e:	4648      	mov	r0, r9
 8000430:	f000 faa8 	bl	8000984 <__clzsi2>
 8000434:	464a      	mov	r2, r9
 8000436:	1f43      	subs	r3, r0, #5
 8000438:	2576      	movs	r5, #118	; 0x76
 800043a:	409a      	lsls	r2, r3
 800043c:	2300      	movs	r3, #0
 800043e:	426d      	negs	r5, r5
 8000440:	4691      	mov	r9, r2
 8000442:	2600      	movs	r6, #0
 8000444:	469a      	mov	sl, r3
 8000446:	1a2d      	subs	r5, r5, r0
 8000448:	e71e      	b.n	8000288 <__aeabi_fmul+0x38>
 800044a:	0020      	movs	r0, r4
 800044c:	f000 fa9a 	bl	8000984 <__clzsi2>
 8000450:	4642      	mov	r2, r8
 8000452:	1f43      	subs	r3, r0, #5
 8000454:	409c      	lsls	r4, r3
 8000456:	1a2b      	subs	r3, r5, r0
 8000458:	3b76      	subs	r3, #118	; 0x76
 800045a:	407a      	eors	r2, r7
 800045c:	2000      	movs	r0, #0
 800045e:	b2d2      	uxtb	r2, r2
 8000460:	1c5d      	adds	r5, r3, #1
 8000462:	2e0a      	cmp	r6, #10
 8000464:	dd00      	ble.n	8000468 <__aeabi_fmul+0x218>
 8000466:	e726      	b.n	80002b6 <__aeabi_fmul+0x66>
 8000468:	e739      	b.n	80002de <__aeabi_fmul+0x8e>
 800046a:	2101      	movs	r1, #1
 800046c:	1acb      	subs	r3, r1, r3
 800046e:	2b1b      	cmp	r3, #27
 8000470:	dd00      	ble.n	8000474 <__aeabi_fmul+0x224>
 8000472:	e73d      	b.n	80002f0 <__aeabi_fmul+0xa0>
 8000474:	359e      	adds	r5, #158	; 0x9e
 8000476:	0021      	movs	r1, r4
 8000478:	40ac      	lsls	r4, r5
 800047a:	40d9      	lsrs	r1, r3
 800047c:	1e63      	subs	r3, r4, #1
 800047e:	419c      	sbcs	r4, r3
 8000480:	4321      	orrs	r1, r4
 8000482:	074b      	lsls	r3, r1, #29
 8000484:	d004      	beq.n	8000490 <__aeabi_fmul+0x240>
 8000486:	230f      	movs	r3, #15
 8000488:	400b      	ands	r3, r1
 800048a:	2b04      	cmp	r3, #4
 800048c:	d000      	beq.n	8000490 <__aeabi_fmul+0x240>
 800048e:	3104      	adds	r1, #4
 8000490:	014b      	lsls	r3, r1, #5
 8000492:	d504      	bpl.n	800049e <__aeabi_fmul+0x24e>
 8000494:	2001      	movs	r0, #1
 8000496:	2100      	movs	r1, #0
 8000498:	e72c      	b.n	80002f4 <__aeabi_fmul+0xa4>
 800049a:	001d      	movs	r5, r3
 800049c:	e78f      	b.n	80003be <__aeabi_fmul+0x16e>
 800049e:	0189      	lsls	r1, r1, #6
 80004a0:	2000      	movs	r0, #0
 80004a2:	0a49      	lsrs	r1, r1, #9
 80004a4:	e726      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004a6:	2302      	movs	r3, #2
 80004a8:	2e0f      	cmp	r6, #15
 80004aa:	d10c      	bne.n	80004c6 <__aeabi_fmul+0x276>
 80004ac:	2180      	movs	r1, #128	; 0x80
 80004ae:	464b      	mov	r3, r9
 80004b0:	03c9      	lsls	r1, r1, #15
 80004b2:	420b      	tst	r3, r1
 80004b4:	d00d      	beq.n	80004d2 <__aeabi_fmul+0x282>
 80004b6:	420c      	tst	r4, r1
 80004b8:	d10b      	bne.n	80004d2 <__aeabi_fmul+0x282>
 80004ba:	4321      	orrs	r1, r4
 80004bc:	0249      	lsls	r1, r1, #9
 80004be:	003a      	movs	r2, r7
 80004c0:	20ff      	movs	r0, #255	; 0xff
 80004c2:	0a49      	lsrs	r1, r1, #9
 80004c4:	e716      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004c6:	2e0b      	cmp	r6, #11
 80004c8:	d000      	beq.n	80004cc <__aeabi_fmul+0x27c>
 80004ca:	e6f7      	b.n	80002bc <__aeabi_fmul+0x6c>
 80004cc:	46a1      	mov	r9, r4
 80004ce:	469a      	mov	sl, r3
 80004d0:	e736      	b.n	8000340 <__aeabi_fmul+0xf0>
 80004d2:	2180      	movs	r1, #128	; 0x80
 80004d4:	464b      	mov	r3, r9
 80004d6:	03c9      	lsls	r1, r1, #15
 80004d8:	4319      	orrs	r1, r3
 80004da:	0249      	lsls	r1, r1, #9
 80004dc:	4642      	mov	r2, r8
 80004de:	20ff      	movs	r0, #255	; 0xff
 80004e0:	0a49      	lsrs	r1, r1, #9
 80004e2:	e707      	b.n	80002f4 <__aeabi_fmul+0xa4>
 80004e4:	2303      	movs	r3, #3
 80004e6:	e7df      	b.n	80004a8 <__aeabi_fmul+0x258>
 80004e8:	f7ffffff 	.word	0xf7ffffff

080004ec <__aeabi_fsub>:
 80004ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80004ee:	46c6      	mov	lr, r8
 80004f0:	0243      	lsls	r3, r0, #9
 80004f2:	0a5b      	lsrs	r3, r3, #9
 80004f4:	0045      	lsls	r5, r0, #1
 80004f6:	00da      	lsls	r2, r3, #3
 80004f8:	0fc4      	lsrs	r4, r0, #31
 80004fa:	0248      	lsls	r0, r1, #9
 80004fc:	004f      	lsls	r7, r1, #1
 80004fe:	4694      	mov	ip, r2
 8000500:	0a42      	lsrs	r2, r0, #9
 8000502:	001e      	movs	r6, r3
 8000504:	4690      	mov	r8, r2
 8000506:	b500      	push	{lr}
 8000508:	0e2d      	lsrs	r5, r5, #24
 800050a:	0e3f      	lsrs	r7, r7, #24
 800050c:	0fc9      	lsrs	r1, r1, #31
 800050e:	0980      	lsrs	r0, r0, #6
 8000510:	2fff      	cmp	r7, #255	; 0xff
 8000512:	d059      	beq.n	80005c8 <__aeabi_fsub+0xdc>
 8000514:	2201      	movs	r2, #1
 8000516:	4051      	eors	r1, r2
 8000518:	428c      	cmp	r4, r1
 800051a:	d039      	beq.n	8000590 <__aeabi_fsub+0xa4>
 800051c:	1bea      	subs	r2, r5, r7
 800051e:	2a00      	cmp	r2, #0
 8000520:	dd58      	ble.n	80005d4 <__aeabi_fsub+0xe8>
 8000522:	2f00      	cmp	r7, #0
 8000524:	d068      	beq.n	80005f8 <__aeabi_fsub+0x10c>
 8000526:	2dff      	cmp	r5, #255	; 0xff
 8000528:	d100      	bne.n	800052c <__aeabi_fsub+0x40>
 800052a:	e0d1      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 800052c:	2380      	movs	r3, #128	; 0x80
 800052e:	04db      	lsls	r3, r3, #19
 8000530:	4318      	orrs	r0, r3
 8000532:	2a1b      	cmp	r2, #27
 8000534:	dc00      	bgt.n	8000538 <__aeabi_fsub+0x4c>
 8000536:	e0e3      	b.n	8000700 <__aeabi_fsub+0x214>
 8000538:	2301      	movs	r3, #1
 800053a:	4662      	mov	r2, ip
 800053c:	1ad3      	subs	r3, r2, r3
 800053e:	015a      	lsls	r2, r3, #5
 8000540:	d400      	bmi.n	8000544 <__aeabi_fsub+0x58>
 8000542:	e0ac      	b.n	800069e <__aeabi_fsub+0x1b2>
 8000544:	019b      	lsls	r3, r3, #6
 8000546:	099e      	lsrs	r6, r3, #6
 8000548:	0030      	movs	r0, r6
 800054a:	f000 fa1b 	bl	8000984 <__clzsi2>
 800054e:	0033      	movs	r3, r6
 8000550:	3805      	subs	r0, #5
 8000552:	4083      	lsls	r3, r0
 8000554:	4285      	cmp	r5, r0
 8000556:	dc00      	bgt.n	800055a <__aeabi_fsub+0x6e>
 8000558:	e0c6      	b.n	80006e8 <__aeabi_fsub+0x1fc>
 800055a:	4ab2      	ldr	r2, [pc, #712]	; (8000824 <__aeabi_fsub+0x338>)
 800055c:	1a2d      	subs	r5, r5, r0
 800055e:	4013      	ands	r3, r2
 8000560:	075a      	lsls	r2, r3, #29
 8000562:	d004      	beq.n	800056e <__aeabi_fsub+0x82>
 8000564:	220f      	movs	r2, #15
 8000566:	401a      	ands	r2, r3
 8000568:	2a04      	cmp	r2, #4
 800056a:	d000      	beq.n	800056e <__aeabi_fsub+0x82>
 800056c:	3304      	adds	r3, #4
 800056e:	015a      	lsls	r2, r3, #5
 8000570:	d400      	bmi.n	8000574 <__aeabi_fsub+0x88>
 8000572:	e097      	b.n	80006a4 <__aeabi_fsub+0x1b8>
 8000574:	1c6a      	adds	r2, r5, #1
 8000576:	2dfe      	cmp	r5, #254	; 0xfe
 8000578:	d100      	bne.n	800057c <__aeabi_fsub+0x90>
 800057a:	e084      	b.n	8000686 <__aeabi_fsub+0x19a>
 800057c:	019b      	lsls	r3, r3, #6
 800057e:	0a5e      	lsrs	r6, r3, #9
 8000580:	b2d2      	uxtb	r2, r2
 8000582:	05d0      	lsls	r0, r2, #23
 8000584:	4330      	orrs	r0, r6
 8000586:	07e4      	lsls	r4, r4, #31
 8000588:	4320      	orrs	r0, r4
 800058a:	bc80      	pop	{r7}
 800058c:	46b8      	mov	r8, r7
 800058e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000590:	1bea      	subs	r2, r5, r7
 8000592:	2a00      	cmp	r2, #0
 8000594:	dd41      	ble.n	800061a <__aeabi_fsub+0x12e>
 8000596:	2f00      	cmp	r7, #0
 8000598:	d06b      	beq.n	8000672 <__aeabi_fsub+0x186>
 800059a:	2dff      	cmp	r5, #255	; 0xff
 800059c:	d100      	bne.n	80005a0 <__aeabi_fsub+0xb4>
 800059e:	e097      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 80005a0:	2380      	movs	r3, #128	; 0x80
 80005a2:	04db      	lsls	r3, r3, #19
 80005a4:	4318      	orrs	r0, r3
 80005a6:	2a1b      	cmp	r2, #27
 80005a8:	dc00      	bgt.n	80005ac <__aeabi_fsub+0xc0>
 80005aa:	e0cc      	b.n	8000746 <__aeabi_fsub+0x25a>
 80005ac:	2301      	movs	r3, #1
 80005ae:	4463      	add	r3, ip
 80005b0:	015a      	lsls	r2, r3, #5
 80005b2:	d574      	bpl.n	800069e <__aeabi_fsub+0x1b2>
 80005b4:	3501      	adds	r5, #1
 80005b6:	2dff      	cmp	r5, #255	; 0xff
 80005b8:	d065      	beq.n	8000686 <__aeabi_fsub+0x19a>
 80005ba:	2201      	movs	r2, #1
 80005bc:	499a      	ldr	r1, [pc, #616]	; (8000828 <__aeabi_fsub+0x33c>)
 80005be:	401a      	ands	r2, r3
 80005c0:	085b      	lsrs	r3, r3, #1
 80005c2:	400b      	ands	r3, r1
 80005c4:	4313      	orrs	r3, r2
 80005c6:	e7cb      	b.n	8000560 <__aeabi_fsub+0x74>
 80005c8:	2800      	cmp	r0, #0
 80005ca:	d01f      	beq.n	800060c <__aeabi_fsub+0x120>
 80005cc:	428c      	cmp	r4, r1
 80005ce:	d022      	beq.n	8000616 <__aeabi_fsub+0x12a>
 80005d0:	002a      	movs	r2, r5
 80005d2:	3aff      	subs	r2, #255	; 0xff
 80005d4:	2a00      	cmp	r2, #0
 80005d6:	d035      	beq.n	8000644 <__aeabi_fsub+0x158>
 80005d8:	1b7a      	subs	r2, r7, r5
 80005da:	2d00      	cmp	r5, #0
 80005dc:	d000      	beq.n	80005e0 <__aeabi_fsub+0xf4>
 80005de:	e099      	b.n	8000714 <__aeabi_fsub+0x228>
 80005e0:	4663      	mov	r3, ip
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d100      	bne.n	80005e8 <__aeabi_fsub+0xfc>
 80005e6:	e0dd      	b.n	80007a4 <__aeabi_fsub+0x2b8>
 80005e8:	1e53      	subs	r3, r2, #1
 80005ea:	2a01      	cmp	r2, #1
 80005ec:	d100      	bne.n	80005f0 <__aeabi_fsub+0x104>
 80005ee:	e105      	b.n	80007fc <__aeabi_fsub+0x310>
 80005f0:	2aff      	cmp	r2, #255	; 0xff
 80005f2:	d06b      	beq.n	80006cc <__aeabi_fsub+0x1e0>
 80005f4:	001a      	movs	r2, r3
 80005f6:	e094      	b.n	8000722 <__aeabi_fsub+0x236>
 80005f8:	2800      	cmp	r0, #0
 80005fa:	d073      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 80005fc:	1e51      	subs	r1, r2, #1
 80005fe:	2a01      	cmp	r2, #1
 8000600:	d100      	bne.n	8000604 <__aeabi_fsub+0x118>
 8000602:	e0df      	b.n	80007c4 <__aeabi_fsub+0x2d8>
 8000604:	2aff      	cmp	r2, #255	; 0xff
 8000606:	d063      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 8000608:	000a      	movs	r2, r1
 800060a:	e792      	b.n	8000532 <__aeabi_fsub+0x46>
 800060c:	2201      	movs	r2, #1
 800060e:	4051      	eors	r1, r2
 8000610:	42a1      	cmp	r1, r4
 8000612:	d000      	beq.n	8000616 <__aeabi_fsub+0x12a>
 8000614:	e782      	b.n	800051c <__aeabi_fsub+0x30>
 8000616:	002a      	movs	r2, r5
 8000618:	3aff      	subs	r2, #255	; 0xff
 800061a:	2a00      	cmp	r2, #0
 800061c:	d036      	beq.n	800068c <__aeabi_fsub+0x1a0>
 800061e:	1b7a      	subs	r2, r7, r5
 8000620:	2d00      	cmp	r5, #0
 8000622:	d100      	bne.n	8000626 <__aeabi_fsub+0x13a>
 8000624:	e0aa      	b.n	800077c <__aeabi_fsub+0x290>
 8000626:	2fff      	cmp	r7, #255	; 0xff
 8000628:	d100      	bne.n	800062c <__aeabi_fsub+0x140>
 800062a:	e0da      	b.n	80007e2 <__aeabi_fsub+0x2f6>
 800062c:	2380      	movs	r3, #128	; 0x80
 800062e:	4661      	mov	r1, ip
 8000630:	04db      	lsls	r3, r3, #19
 8000632:	4319      	orrs	r1, r3
 8000634:	468c      	mov	ip, r1
 8000636:	2a1b      	cmp	r2, #27
 8000638:	dc00      	bgt.n	800063c <__aeabi_fsub+0x150>
 800063a:	e0d4      	b.n	80007e6 <__aeabi_fsub+0x2fa>
 800063c:	2301      	movs	r3, #1
 800063e:	003d      	movs	r5, r7
 8000640:	181b      	adds	r3, r3, r0
 8000642:	e7b5      	b.n	80005b0 <__aeabi_fsub+0xc4>
 8000644:	27fe      	movs	r7, #254	; 0xfe
 8000646:	1c6a      	adds	r2, r5, #1
 8000648:	4217      	tst	r7, r2
 800064a:	d171      	bne.n	8000730 <__aeabi_fsub+0x244>
 800064c:	2d00      	cmp	r5, #0
 800064e:	d000      	beq.n	8000652 <__aeabi_fsub+0x166>
 8000650:	e09e      	b.n	8000790 <__aeabi_fsub+0x2a4>
 8000652:	4663      	mov	r3, ip
 8000654:	2b00      	cmp	r3, #0
 8000656:	d100      	bne.n	800065a <__aeabi_fsub+0x16e>
 8000658:	e0d5      	b.n	8000806 <__aeabi_fsub+0x31a>
 800065a:	2200      	movs	r2, #0
 800065c:	2800      	cmp	r0, #0
 800065e:	d100      	bne.n	8000662 <__aeabi_fsub+0x176>
 8000660:	e78f      	b.n	8000582 <__aeabi_fsub+0x96>
 8000662:	1a1b      	subs	r3, r3, r0
 8000664:	015e      	lsls	r6, r3, #5
 8000666:	d400      	bmi.n	800066a <__aeabi_fsub+0x17e>
 8000668:	e0d6      	b.n	8000818 <__aeabi_fsub+0x32c>
 800066a:	4663      	mov	r3, ip
 800066c:	000c      	movs	r4, r1
 800066e:	1ac3      	subs	r3, r0, r3
 8000670:	e776      	b.n	8000560 <__aeabi_fsub+0x74>
 8000672:	2800      	cmp	r0, #0
 8000674:	d036      	beq.n	80006e4 <__aeabi_fsub+0x1f8>
 8000676:	1e51      	subs	r1, r2, #1
 8000678:	2a01      	cmp	r2, #1
 800067a:	d100      	bne.n	800067e <__aeabi_fsub+0x192>
 800067c:	e09a      	b.n	80007b4 <__aeabi_fsub+0x2c8>
 800067e:	2aff      	cmp	r2, #255	; 0xff
 8000680:	d026      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 8000682:	000a      	movs	r2, r1
 8000684:	e78f      	b.n	80005a6 <__aeabi_fsub+0xba>
 8000686:	22ff      	movs	r2, #255	; 0xff
 8000688:	2600      	movs	r6, #0
 800068a:	e77a      	b.n	8000582 <__aeabi_fsub+0x96>
 800068c:	27fe      	movs	r7, #254	; 0xfe
 800068e:	1c6a      	adds	r2, r5, #1
 8000690:	4217      	tst	r7, r2
 8000692:	d062      	beq.n	800075a <__aeabi_fsub+0x26e>
 8000694:	2aff      	cmp	r2, #255	; 0xff
 8000696:	d0f6      	beq.n	8000686 <__aeabi_fsub+0x19a>
 8000698:	0015      	movs	r5, r2
 800069a:	4460      	add	r0, ip
 800069c:	0843      	lsrs	r3, r0, #1
 800069e:	075a      	lsls	r2, r3, #29
 80006a0:	d000      	beq.n	80006a4 <__aeabi_fsub+0x1b8>
 80006a2:	e75f      	b.n	8000564 <__aeabi_fsub+0x78>
 80006a4:	08db      	lsrs	r3, r3, #3
 80006a6:	2dff      	cmp	r5, #255	; 0xff
 80006a8:	d012      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006aa:	025b      	lsls	r3, r3, #9
 80006ac:	0a5e      	lsrs	r6, r3, #9
 80006ae:	b2ea      	uxtb	r2, r5
 80006b0:	e767      	b.n	8000582 <__aeabi_fsub+0x96>
 80006b2:	4662      	mov	r2, ip
 80006b4:	2a00      	cmp	r2, #0
 80006b6:	d100      	bne.n	80006ba <__aeabi_fsub+0x1ce>
 80006b8:	e093      	b.n	80007e2 <__aeabi_fsub+0x2f6>
 80006ba:	2800      	cmp	r0, #0
 80006bc:	d008      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006be:	2280      	movs	r2, #128	; 0x80
 80006c0:	03d2      	lsls	r2, r2, #15
 80006c2:	4213      	tst	r3, r2
 80006c4:	d004      	beq.n	80006d0 <__aeabi_fsub+0x1e4>
 80006c6:	4640      	mov	r0, r8
 80006c8:	4210      	tst	r0, r2
 80006ca:	d101      	bne.n	80006d0 <__aeabi_fsub+0x1e4>
 80006cc:	000c      	movs	r4, r1
 80006ce:	4643      	mov	r3, r8
 80006d0:	2b00      	cmp	r3, #0
 80006d2:	d0d8      	beq.n	8000686 <__aeabi_fsub+0x19a>
 80006d4:	2680      	movs	r6, #128	; 0x80
 80006d6:	03f6      	lsls	r6, r6, #15
 80006d8:	431e      	orrs	r6, r3
 80006da:	0276      	lsls	r6, r6, #9
 80006dc:	22ff      	movs	r2, #255	; 0xff
 80006de:	0a76      	lsrs	r6, r6, #9
 80006e0:	e74f      	b.n	8000582 <__aeabi_fsub+0x96>
 80006e2:	4643      	mov	r3, r8
 80006e4:	0015      	movs	r5, r2
 80006e6:	e7de      	b.n	80006a6 <__aeabi_fsub+0x1ba>
 80006e8:	2220      	movs	r2, #32
 80006ea:	1b40      	subs	r0, r0, r5
 80006ec:	3001      	adds	r0, #1
 80006ee:	1a12      	subs	r2, r2, r0
 80006f0:	0019      	movs	r1, r3
 80006f2:	4093      	lsls	r3, r2
 80006f4:	40c1      	lsrs	r1, r0
 80006f6:	1e5a      	subs	r2, r3, #1
 80006f8:	4193      	sbcs	r3, r2
 80006fa:	2500      	movs	r5, #0
 80006fc:	430b      	orrs	r3, r1
 80006fe:	e72f      	b.n	8000560 <__aeabi_fsub+0x74>
 8000700:	2320      	movs	r3, #32
 8000702:	1a9b      	subs	r3, r3, r2
 8000704:	0001      	movs	r1, r0
 8000706:	4098      	lsls	r0, r3
 8000708:	0003      	movs	r3, r0
 800070a:	40d1      	lsrs	r1, r2
 800070c:	1e5a      	subs	r2, r3, #1
 800070e:	4193      	sbcs	r3, r2
 8000710:	430b      	orrs	r3, r1
 8000712:	e712      	b.n	800053a <__aeabi_fsub+0x4e>
 8000714:	2fff      	cmp	r7, #255	; 0xff
 8000716:	d0d9      	beq.n	80006cc <__aeabi_fsub+0x1e0>
 8000718:	2380      	movs	r3, #128	; 0x80
 800071a:	4664      	mov	r4, ip
 800071c:	04db      	lsls	r3, r3, #19
 800071e:	431c      	orrs	r4, r3
 8000720:	46a4      	mov	ip, r4
 8000722:	2a1b      	cmp	r2, #27
 8000724:	dd52      	ble.n	80007cc <__aeabi_fsub+0x2e0>
 8000726:	2301      	movs	r3, #1
 8000728:	000c      	movs	r4, r1
 800072a:	003d      	movs	r5, r7
 800072c:	1ac3      	subs	r3, r0, r3
 800072e:	e706      	b.n	800053e <__aeabi_fsub+0x52>
 8000730:	4663      	mov	r3, ip
 8000732:	1a1e      	subs	r6, r3, r0
 8000734:	0173      	lsls	r3, r6, #5
 8000736:	d439      	bmi.n	80007ac <__aeabi_fsub+0x2c0>
 8000738:	2e00      	cmp	r6, #0
 800073a:	d000      	beq.n	800073e <__aeabi_fsub+0x252>
 800073c:	e704      	b.n	8000548 <__aeabi_fsub+0x5c>
 800073e:	2400      	movs	r4, #0
 8000740:	2200      	movs	r2, #0
 8000742:	2600      	movs	r6, #0
 8000744:	e71d      	b.n	8000582 <__aeabi_fsub+0x96>
 8000746:	2320      	movs	r3, #32
 8000748:	1a9b      	subs	r3, r3, r2
 800074a:	0001      	movs	r1, r0
 800074c:	4098      	lsls	r0, r3
 800074e:	0003      	movs	r3, r0
 8000750:	40d1      	lsrs	r1, r2
 8000752:	1e5a      	subs	r2, r3, #1
 8000754:	4193      	sbcs	r3, r2
 8000756:	430b      	orrs	r3, r1
 8000758:	e729      	b.n	80005ae <__aeabi_fsub+0xc2>
 800075a:	2d00      	cmp	r5, #0
 800075c:	d1a9      	bne.n	80006b2 <__aeabi_fsub+0x1c6>
 800075e:	4663      	mov	r3, ip
 8000760:	2b00      	cmp	r3, #0
 8000762:	d056      	beq.n	8000812 <__aeabi_fsub+0x326>
 8000764:	2200      	movs	r2, #0
 8000766:	2800      	cmp	r0, #0
 8000768:	d100      	bne.n	800076c <__aeabi_fsub+0x280>
 800076a:	e70a      	b.n	8000582 <__aeabi_fsub+0x96>
 800076c:	0003      	movs	r3, r0
 800076e:	4463      	add	r3, ip
 8000770:	015a      	lsls	r2, r3, #5
 8000772:	d594      	bpl.n	800069e <__aeabi_fsub+0x1b2>
 8000774:	4a2b      	ldr	r2, [pc, #172]	; (8000824 <__aeabi_fsub+0x338>)
 8000776:	3501      	adds	r5, #1
 8000778:	4013      	ands	r3, r2
 800077a:	e790      	b.n	800069e <__aeabi_fsub+0x1b2>
 800077c:	4663      	mov	r3, ip
 800077e:	2b00      	cmp	r3, #0
 8000780:	d0af      	beq.n	80006e2 <__aeabi_fsub+0x1f6>
 8000782:	1e53      	subs	r3, r2, #1
 8000784:	2a01      	cmp	r2, #1
 8000786:	d015      	beq.n	80007b4 <__aeabi_fsub+0x2c8>
 8000788:	2aff      	cmp	r2, #255	; 0xff
 800078a:	d02a      	beq.n	80007e2 <__aeabi_fsub+0x2f6>
 800078c:	001a      	movs	r2, r3
 800078e:	e752      	b.n	8000636 <__aeabi_fsub+0x14a>
 8000790:	4662      	mov	r2, ip
 8000792:	2a00      	cmp	r2, #0
 8000794:	d191      	bne.n	80006ba <__aeabi_fsub+0x1ce>
 8000796:	2800      	cmp	r0, #0
 8000798:	d198      	bne.n	80006cc <__aeabi_fsub+0x1e0>
 800079a:	2680      	movs	r6, #128	; 0x80
 800079c:	2400      	movs	r4, #0
 800079e:	22ff      	movs	r2, #255	; 0xff
 80007a0:	03f6      	lsls	r6, r6, #15
 80007a2:	e6ee      	b.n	8000582 <__aeabi_fsub+0x96>
 80007a4:	000c      	movs	r4, r1
 80007a6:	4643      	mov	r3, r8
 80007a8:	0015      	movs	r5, r2
 80007aa:	e77c      	b.n	80006a6 <__aeabi_fsub+0x1ba>
 80007ac:	4663      	mov	r3, ip
 80007ae:	000c      	movs	r4, r1
 80007b0:	1ac6      	subs	r6, r0, r3
 80007b2:	e6c9      	b.n	8000548 <__aeabi_fsub+0x5c>
 80007b4:	0003      	movs	r3, r0
 80007b6:	4463      	add	r3, ip
 80007b8:	2501      	movs	r5, #1
 80007ba:	015a      	lsls	r2, r3, #5
 80007bc:	d400      	bmi.n	80007c0 <__aeabi_fsub+0x2d4>
 80007be:	e76e      	b.n	800069e <__aeabi_fsub+0x1b2>
 80007c0:	2502      	movs	r5, #2
 80007c2:	e6fa      	b.n	80005ba <__aeabi_fsub+0xce>
 80007c4:	4663      	mov	r3, ip
 80007c6:	2501      	movs	r5, #1
 80007c8:	1a1b      	subs	r3, r3, r0
 80007ca:	e6b8      	b.n	800053e <__aeabi_fsub+0x52>
 80007cc:	4664      	mov	r4, ip
 80007ce:	2320      	movs	r3, #32
 80007d0:	40d4      	lsrs	r4, r2
 80007d2:	1a9b      	subs	r3, r3, r2
 80007d4:	4662      	mov	r2, ip
 80007d6:	409a      	lsls	r2, r3
 80007d8:	0013      	movs	r3, r2
 80007da:	1e5a      	subs	r2, r3, #1
 80007dc:	4193      	sbcs	r3, r2
 80007de:	4323      	orrs	r3, r4
 80007e0:	e7a2      	b.n	8000728 <__aeabi_fsub+0x23c>
 80007e2:	4643      	mov	r3, r8
 80007e4:	e774      	b.n	80006d0 <__aeabi_fsub+0x1e4>
 80007e6:	4661      	mov	r1, ip
 80007e8:	2320      	movs	r3, #32
 80007ea:	40d1      	lsrs	r1, r2
 80007ec:	1a9b      	subs	r3, r3, r2
 80007ee:	4662      	mov	r2, ip
 80007f0:	409a      	lsls	r2, r3
 80007f2:	0013      	movs	r3, r2
 80007f4:	1e5a      	subs	r2, r3, #1
 80007f6:	4193      	sbcs	r3, r2
 80007f8:	430b      	orrs	r3, r1
 80007fa:	e720      	b.n	800063e <__aeabi_fsub+0x152>
 80007fc:	4663      	mov	r3, ip
 80007fe:	000c      	movs	r4, r1
 8000800:	2501      	movs	r5, #1
 8000802:	1ac3      	subs	r3, r0, r3
 8000804:	e69b      	b.n	800053e <__aeabi_fsub+0x52>
 8000806:	2800      	cmp	r0, #0
 8000808:	d099      	beq.n	800073e <__aeabi_fsub+0x252>
 800080a:	000c      	movs	r4, r1
 800080c:	4646      	mov	r6, r8
 800080e:	2200      	movs	r2, #0
 8000810:	e6b7      	b.n	8000582 <__aeabi_fsub+0x96>
 8000812:	4646      	mov	r6, r8
 8000814:	2200      	movs	r2, #0
 8000816:	e6b4      	b.n	8000582 <__aeabi_fsub+0x96>
 8000818:	2b00      	cmp	r3, #0
 800081a:	d000      	beq.n	800081e <__aeabi_fsub+0x332>
 800081c:	e73f      	b.n	800069e <__aeabi_fsub+0x1b2>
 800081e:	2400      	movs	r4, #0
 8000820:	2600      	movs	r6, #0
 8000822:	e6ae      	b.n	8000582 <__aeabi_fsub+0x96>
 8000824:	fbffffff 	.word	0xfbffffff
 8000828:	7dffffff 	.word	0x7dffffff

0800082c <__aeabi_f2iz>:
 800082c:	0241      	lsls	r1, r0, #9
 800082e:	0042      	lsls	r2, r0, #1
 8000830:	0fc3      	lsrs	r3, r0, #31
 8000832:	0a49      	lsrs	r1, r1, #9
 8000834:	2000      	movs	r0, #0
 8000836:	0e12      	lsrs	r2, r2, #24
 8000838:	2a7e      	cmp	r2, #126	; 0x7e
 800083a:	dd03      	ble.n	8000844 <__aeabi_f2iz+0x18>
 800083c:	2a9d      	cmp	r2, #157	; 0x9d
 800083e:	dd02      	ble.n	8000846 <__aeabi_f2iz+0x1a>
 8000840:	4a09      	ldr	r2, [pc, #36]	; (8000868 <__aeabi_f2iz+0x3c>)
 8000842:	1898      	adds	r0, r3, r2
 8000844:	4770      	bx	lr
 8000846:	2080      	movs	r0, #128	; 0x80
 8000848:	0400      	lsls	r0, r0, #16
 800084a:	4301      	orrs	r1, r0
 800084c:	2a95      	cmp	r2, #149	; 0x95
 800084e:	dc07      	bgt.n	8000860 <__aeabi_f2iz+0x34>
 8000850:	2096      	movs	r0, #150	; 0x96
 8000852:	1a82      	subs	r2, r0, r2
 8000854:	40d1      	lsrs	r1, r2
 8000856:	4248      	negs	r0, r1
 8000858:	2b00      	cmp	r3, #0
 800085a:	d1f3      	bne.n	8000844 <__aeabi_f2iz+0x18>
 800085c:	0008      	movs	r0, r1
 800085e:	e7f1      	b.n	8000844 <__aeabi_f2iz+0x18>
 8000860:	3a96      	subs	r2, #150	; 0x96
 8000862:	4091      	lsls	r1, r2
 8000864:	e7f7      	b.n	8000856 <__aeabi_f2iz+0x2a>
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	7fffffff 	.word	0x7fffffff

0800086c <__aeabi_i2f>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	2800      	cmp	r0, #0
 8000870:	d013      	beq.n	800089a <__aeabi_i2f+0x2e>
 8000872:	17c3      	asrs	r3, r0, #31
 8000874:	18c5      	adds	r5, r0, r3
 8000876:	405d      	eors	r5, r3
 8000878:	0fc4      	lsrs	r4, r0, #31
 800087a:	0028      	movs	r0, r5
 800087c:	f000 f882 	bl	8000984 <__clzsi2>
 8000880:	239e      	movs	r3, #158	; 0x9e
 8000882:	0001      	movs	r1, r0
 8000884:	1a1b      	subs	r3, r3, r0
 8000886:	2b96      	cmp	r3, #150	; 0x96
 8000888:	dc0f      	bgt.n	80008aa <__aeabi_i2f+0x3e>
 800088a:	2808      	cmp	r0, #8
 800088c:	d031      	beq.n	80008f2 <__aeabi_i2f+0x86>
 800088e:	3908      	subs	r1, #8
 8000890:	408d      	lsls	r5, r1
 8000892:	026d      	lsls	r5, r5, #9
 8000894:	0a6d      	lsrs	r5, r5, #9
 8000896:	b2d8      	uxtb	r0, r3
 8000898:	e002      	b.n	80008a0 <__aeabi_i2f+0x34>
 800089a:	2400      	movs	r4, #0
 800089c:	2000      	movs	r0, #0
 800089e:	2500      	movs	r5, #0
 80008a0:	05c0      	lsls	r0, r0, #23
 80008a2:	4328      	orrs	r0, r5
 80008a4:	07e4      	lsls	r4, r4, #31
 80008a6:	4320      	orrs	r0, r4
 80008a8:	bd70      	pop	{r4, r5, r6, pc}
 80008aa:	2b99      	cmp	r3, #153	; 0x99
 80008ac:	dd0c      	ble.n	80008c8 <__aeabi_i2f+0x5c>
 80008ae:	2205      	movs	r2, #5
 80008b0:	1a12      	subs	r2, r2, r0
 80008b2:	0028      	movs	r0, r5
 80008b4:	40d0      	lsrs	r0, r2
 80008b6:	0002      	movs	r2, r0
 80008b8:	0008      	movs	r0, r1
 80008ba:	301b      	adds	r0, #27
 80008bc:	4085      	lsls	r5, r0
 80008be:	0028      	movs	r0, r5
 80008c0:	1e45      	subs	r5, r0, #1
 80008c2:	41a8      	sbcs	r0, r5
 80008c4:	4302      	orrs	r2, r0
 80008c6:	0015      	movs	r5, r2
 80008c8:	2905      	cmp	r1, #5
 80008ca:	dc16      	bgt.n	80008fa <__aeabi_i2f+0x8e>
 80008cc:	002a      	movs	r2, r5
 80008ce:	480f      	ldr	r0, [pc, #60]	; (800090c <__aeabi_i2f+0xa0>)
 80008d0:	4002      	ands	r2, r0
 80008d2:	076e      	lsls	r6, r5, #29
 80008d4:	d009      	beq.n	80008ea <__aeabi_i2f+0x7e>
 80008d6:	260f      	movs	r6, #15
 80008d8:	4035      	ands	r5, r6
 80008da:	2d04      	cmp	r5, #4
 80008dc:	d005      	beq.n	80008ea <__aeabi_i2f+0x7e>
 80008de:	3204      	adds	r2, #4
 80008e0:	0155      	lsls	r5, r2, #5
 80008e2:	d502      	bpl.n	80008ea <__aeabi_i2f+0x7e>
 80008e4:	239f      	movs	r3, #159	; 0x9f
 80008e6:	4002      	ands	r2, r0
 80008e8:	1a5b      	subs	r3, r3, r1
 80008ea:	0192      	lsls	r2, r2, #6
 80008ec:	0a55      	lsrs	r5, r2, #9
 80008ee:	b2d8      	uxtb	r0, r3
 80008f0:	e7d6      	b.n	80008a0 <__aeabi_i2f+0x34>
 80008f2:	026d      	lsls	r5, r5, #9
 80008f4:	2096      	movs	r0, #150	; 0x96
 80008f6:	0a6d      	lsrs	r5, r5, #9
 80008f8:	e7d2      	b.n	80008a0 <__aeabi_i2f+0x34>
 80008fa:	1f4a      	subs	r2, r1, #5
 80008fc:	4095      	lsls	r5, r2
 80008fe:	002a      	movs	r2, r5
 8000900:	4802      	ldr	r0, [pc, #8]	; (800090c <__aeabi_i2f+0xa0>)
 8000902:	4002      	ands	r2, r0
 8000904:	076e      	lsls	r6, r5, #29
 8000906:	d0f0      	beq.n	80008ea <__aeabi_i2f+0x7e>
 8000908:	e7e5      	b.n	80008d6 <__aeabi_i2f+0x6a>
 800090a:	46c0      	nop			; (mov r8, r8)
 800090c:	fbffffff 	.word	0xfbffffff

08000910 <__aeabi_cfrcmple>:
 8000910:	4684      	mov	ip, r0
 8000912:	0008      	movs	r0, r1
 8000914:	4661      	mov	r1, ip
 8000916:	e7ff      	b.n	8000918 <__aeabi_cfcmpeq>

08000918 <__aeabi_cfcmpeq>:
 8000918:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800091a:	f000 f8bd 	bl	8000a98 <__lesf2>
 800091e:	2800      	cmp	r0, #0
 8000920:	d401      	bmi.n	8000926 <__aeabi_cfcmpeq+0xe>
 8000922:	2100      	movs	r1, #0
 8000924:	42c8      	cmn	r0, r1
 8000926:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000928 <__aeabi_fcmpeq>:
 8000928:	b510      	push	{r4, lr}
 800092a:	f000 f849 	bl	80009c0 <__eqsf2>
 800092e:	4240      	negs	r0, r0
 8000930:	3001      	adds	r0, #1
 8000932:	bd10      	pop	{r4, pc}

08000934 <__aeabi_fcmplt>:
 8000934:	b510      	push	{r4, lr}
 8000936:	f000 f8af 	bl	8000a98 <__lesf2>
 800093a:	2800      	cmp	r0, #0
 800093c:	db01      	blt.n	8000942 <__aeabi_fcmplt+0xe>
 800093e:	2000      	movs	r0, #0
 8000940:	bd10      	pop	{r4, pc}
 8000942:	2001      	movs	r0, #1
 8000944:	bd10      	pop	{r4, pc}
 8000946:	46c0      	nop			; (mov r8, r8)

08000948 <__aeabi_fcmple>:
 8000948:	b510      	push	{r4, lr}
 800094a:	f000 f8a5 	bl	8000a98 <__lesf2>
 800094e:	2800      	cmp	r0, #0
 8000950:	dd01      	ble.n	8000956 <__aeabi_fcmple+0xe>
 8000952:	2000      	movs	r0, #0
 8000954:	bd10      	pop	{r4, pc}
 8000956:	2001      	movs	r0, #1
 8000958:	bd10      	pop	{r4, pc}
 800095a:	46c0      	nop			; (mov r8, r8)

0800095c <__aeabi_fcmpgt>:
 800095c:	b510      	push	{r4, lr}
 800095e:	f000 f855 	bl	8000a0c <__gesf2>
 8000962:	2800      	cmp	r0, #0
 8000964:	dc01      	bgt.n	800096a <__aeabi_fcmpgt+0xe>
 8000966:	2000      	movs	r0, #0
 8000968:	bd10      	pop	{r4, pc}
 800096a:	2001      	movs	r0, #1
 800096c:	bd10      	pop	{r4, pc}
 800096e:	46c0      	nop			; (mov r8, r8)

08000970 <__aeabi_fcmpge>:
 8000970:	b510      	push	{r4, lr}
 8000972:	f000 f84b 	bl	8000a0c <__gesf2>
 8000976:	2800      	cmp	r0, #0
 8000978:	da01      	bge.n	800097e <__aeabi_fcmpge+0xe>
 800097a:	2000      	movs	r0, #0
 800097c:	bd10      	pop	{r4, pc}
 800097e:	2001      	movs	r0, #1
 8000980:	bd10      	pop	{r4, pc}
 8000982:	46c0      	nop			; (mov r8, r8)

08000984 <__clzsi2>:
 8000984:	211c      	movs	r1, #28
 8000986:	2301      	movs	r3, #1
 8000988:	041b      	lsls	r3, r3, #16
 800098a:	4298      	cmp	r0, r3
 800098c:	d301      	bcc.n	8000992 <__clzsi2+0xe>
 800098e:	0c00      	lsrs	r0, r0, #16
 8000990:	3910      	subs	r1, #16
 8000992:	0a1b      	lsrs	r3, r3, #8
 8000994:	4298      	cmp	r0, r3
 8000996:	d301      	bcc.n	800099c <__clzsi2+0x18>
 8000998:	0a00      	lsrs	r0, r0, #8
 800099a:	3908      	subs	r1, #8
 800099c:	091b      	lsrs	r3, r3, #4
 800099e:	4298      	cmp	r0, r3
 80009a0:	d301      	bcc.n	80009a6 <__clzsi2+0x22>
 80009a2:	0900      	lsrs	r0, r0, #4
 80009a4:	3904      	subs	r1, #4
 80009a6:	a202      	add	r2, pc, #8	; (adr r2, 80009b0 <__clzsi2+0x2c>)
 80009a8:	5c10      	ldrb	r0, [r2, r0]
 80009aa:	1840      	adds	r0, r0, r1
 80009ac:	4770      	bx	lr
 80009ae:	46c0      	nop			; (mov r8, r8)
 80009b0:	02020304 	.word	0x02020304
 80009b4:	01010101 	.word	0x01010101
	...

080009c0 <__eqsf2>:
 80009c0:	b570      	push	{r4, r5, r6, lr}
 80009c2:	0042      	lsls	r2, r0, #1
 80009c4:	0245      	lsls	r5, r0, #9
 80009c6:	024e      	lsls	r6, r1, #9
 80009c8:	004c      	lsls	r4, r1, #1
 80009ca:	0fc3      	lsrs	r3, r0, #31
 80009cc:	0a6d      	lsrs	r5, r5, #9
 80009ce:	2001      	movs	r0, #1
 80009d0:	0e12      	lsrs	r2, r2, #24
 80009d2:	0a76      	lsrs	r6, r6, #9
 80009d4:	0e24      	lsrs	r4, r4, #24
 80009d6:	0fc9      	lsrs	r1, r1, #31
 80009d8:	2aff      	cmp	r2, #255	; 0xff
 80009da:	d006      	beq.n	80009ea <__eqsf2+0x2a>
 80009dc:	2cff      	cmp	r4, #255	; 0xff
 80009de:	d003      	beq.n	80009e8 <__eqsf2+0x28>
 80009e0:	42a2      	cmp	r2, r4
 80009e2:	d101      	bne.n	80009e8 <__eqsf2+0x28>
 80009e4:	42b5      	cmp	r5, r6
 80009e6:	d006      	beq.n	80009f6 <__eqsf2+0x36>
 80009e8:	bd70      	pop	{r4, r5, r6, pc}
 80009ea:	2d00      	cmp	r5, #0
 80009ec:	d1fc      	bne.n	80009e8 <__eqsf2+0x28>
 80009ee:	2cff      	cmp	r4, #255	; 0xff
 80009f0:	d1fa      	bne.n	80009e8 <__eqsf2+0x28>
 80009f2:	2e00      	cmp	r6, #0
 80009f4:	d1f8      	bne.n	80009e8 <__eqsf2+0x28>
 80009f6:	428b      	cmp	r3, r1
 80009f8:	d006      	beq.n	8000a08 <__eqsf2+0x48>
 80009fa:	2001      	movs	r0, #1
 80009fc:	2a00      	cmp	r2, #0
 80009fe:	d1f3      	bne.n	80009e8 <__eqsf2+0x28>
 8000a00:	0028      	movs	r0, r5
 8000a02:	1e43      	subs	r3, r0, #1
 8000a04:	4198      	sbcs	r0, r3
 8000a06:	e7ef      	b.n	80009e8 <__eqsf2+0x28>
 8000a08:	2000      	movs	r0, #0
 8000a0a:	e7ed      	b.n	80009e8 <__eqsf2+0x28>

08000a0c <__gesf2>:
 8000a0c:	b570      	push	{r4, r5, r6, lr}
 8000a0e:	0042      	lsls	r2, r0, #1
 8000a10:	0245      	lsls	r5, r0, #9
 8000a12:	024e      	lsls	r6, r1, #9
 8000a14:	004c      	lsls	r4, r1, #1
 8000a16:	0fc3      	lsrs	r3, r0, #31
 8000a18:	0a6d      	lsrs	r5, r5, #9
 8000a1a:	0e12      	lsrs	r2, r2, #24
 8000a1c:	0a76      	lsrs	r6, r6, #9
 8000a1e:	0e24      	lsrs	r4, r4, #24
 8000a20:	0fc8      	lsrs	r0, r1, #31
 8000a22:	2aff      	cmp	r2, #255	; 0xff
 8000a24:	d01b      	beq.n	8000a5e <__gesf2+0x52>
 8000a26:	2cff      	cmp	r4, #255	; 0xff
 8000a28:	d00e      	beq.n	8000a48 <__gesf2+0x3c>
 8000a2a:	2a00      	cmp	r2, #0
 8000a2c:	d11b      	bne.n	8000a66 <__gesf2+0x5a>
 8000a2e:	2c00      	cmp	r4, #0
 8000a30:	d101      	bne.n	8000a36 <__gesf2+0x2a>
 8000a32:	2e00      	cmp	r6, #0
 8000a34:	d01c      	beq.n	8000a70 <__gesf2+0x64>
 8000a36:	2d00      	cmp	r5, #0
 8000a38:	d00c      	beq.n	8000a54 <__gesf2+0x48>
 8000a3a:	4283      	cmp	r3, r0
 8000a3c:	d01c      	beq.n	8000a78 <__gesf2+0x6c>
 8000a3e:	2102      	movs	r1, #2
 8000a40:	1e58      	subs	r0, r3, #1
 8000a42:	4008      	ands	r0, r1
 8000a44:	3801      	subs	r0, #1
 8000a46:	bd70      	pop	{r4, r5, r6, pc}
 8000a48:	2e00      	cmp	r6, #0
 8000a4a:	d122      	bne.n	8000a92 <__gesf2+0x86>
 8000a4c:	2a00      	cmp	r2, #0
 8000a4e:	d1f4      	bne.n	8000a3a <__gesf2+0x2e>
 8000a50:	2d00      	cmp	r5, #0
 8000a52:	d1f2      	bne.n	8000a3a <__gesf2+0x2e>
 8000a54:	2800      	cmp	r0, #0
 8000a56:	d1f6      	bne.n	8000a46 <__gesf2+0x3a>
 8000a58:	2001      	movs	r0, #1
 8000a5a:	4240      	negs	r0, r0
 8000a5c:	e7f3      	b.n	8000a46 <__gesf2+0x3a>
 8000a5e:	2d00      	cmp	r5, #0
 8000a60:	d117      	bne.n	8000a92 <__gesf2+0x86>
 8000a62:	2cff      	cmp	r4, #255	; 0xff
 8000a64:	d0f0      	beq.n	8000a48 <__gesf2+0x3c>
 8000a66:	2c00      	cmp	r4, #0
 8000a68:	d1e7      	bne.n	8000a3a <__gesf2+0x2e>
 8000a6a:	2e00      	cmp	r6, #0
 8000a6c:	d1e5      	bne.n	8000a3a <__gesf2+0x2e>
 8000a6e:	e7e6      	b.n	8000a3e <__gesf2+0x32>
 8000a70:	2000      	movs	r0, #0
 8000a72:	2d00      	cmp	r5, #0
 8000a74:	d0e7      	beq.n	8000a46 <__gesf2+0x3a>
 8000a76:	e7e2      	b.n	8000a3e <__gesf2+0x32>
 8000a78:	42a2      	cmp	r2, r4
 8000a7a:	dc05      	bgt.n	8000a88 <__gesf2+0x7c>
 8000a7c:	dbea      	blt.n	8000a54 <__gesf2+0x48>
 8000a7e:	42b5      	cmp	r5, r6
 8000a80:	d802      	bhi.n	8000a88 <__gesf2+0x7c>
 8000a82:	d3e7      	bcc.n	8000a54 <__gesf2+0x48>
 8000a84:	2000      	movs	r0, #0
 8000a86:	e7de      	b.n	8000a46 <__gesf2+0x3a>
 8000a88:	4243      	negs	r3, r0
 8000a8a:	4158      	adcs	r0, r3
 8000a8c:	0040      	lsls	r0, r0, #1
 8000a8e:	3801      	subs	r0, #1
 8000a90:	e7d9      	b.n	8000a46 <__gesf2+0x3a>
 8000a92:	2002      	movs	r0, #2
 8000a94:	4240      	negs	r0, r0
 8000a96:	e7d6      	b.n	8000a46 <__gesf2+0x3a>

08000a98 <__lesf2>:
 8000a98:	b570      	push	{r4, r5, r6, lr}
 8000a9a:	0042      	lsls	r2, r0, #1
 8000a9c:	0245      	lsls	r5, r0, #9
 8000a9e:	024e      	lsls	r6, r1, #9
 8000aa0:	004c      	lsls	r4, r1, #1
 8000aa2:	0fc3      	lsrs	r3, r0, #31
 8000aa4:	0a6d      	lsrs	r5, r5, #9
 8000aa6:	0e12      	lsrs	r2, r2, #24
 8000aa8:	0a76      	lsrs	r6, r6, #9
 8000aaa:	0e24      	lsrs	r4, r4, #24
 8000aac:	0fc8      	lsrs	r0, r1, #31
 8000aae:	2aff      	cmp	r2, #255	; 0xff
 8000ab0:	d00b      	beq.n	8000aca <__lesf2+0x32>
 8000ab2:	2cff      	cmp	r4, #255	; 0xff
 8000ab4:	d00d      	beq.n	8000ad2 <__lesf2+0x3a>
 8000ab6:	2a00      	cmp	r2, #0
 8000ab8:	d11f      	bne.n	8000afa <__lesf2+0x62>
 8000aba:	2c00      	cmp	r4, #0
 8000abc:	d116      	bne.n	8000aec <__lesf2+0x54>
 8000abe:	2e00      	cmp	r6, #0
 8000ac0:	d114      	bne.n	8000aec <__lesf2+0x54>
 8000ac2:	2000      	movs	r0, #0
 8000ac4:	2d00      	cmp	r5, #0
 8000ac6:	d010      	beq.n	8000aea <__lesf2+0x52>
 8000ac8:	e009      	b.n	8000ade <__lesf2+0x46>
 8000aca:	2d00      	cmp	r5, #0
 8000acc:	d10c      	bne.n	8000ae8 <__lesf2+0x50>
 8000ace:	2cff      	cmp	r4, #255	; 0xff
 8000ad0:	d113      	bne.n	8000afa <__lesf2+0x62>
 8000ad2:	2e00      	cmp	r6, #0
 8000ad4:	d108      	bne.n	8000ae8 <__lesf2+0x50>
 8000ad6:	2a00      	cmp	r2, #0
 8000ad8:	d008      	beq.n	8000aec <__lesf2+0x54>
 8000ada:	4283      	cmp	r3, r0
 8000adc:	d012      	beq.n	8000b04 <__lesf2+0x6c>
 8000ade:	2102      	movs	r1, #2
 8000ae0:	1e58      	subs	r0, r3, #1
 8000ae2:	4008      	ands	r0, r1
 8000ae4:	3801      	subs	r0, #1
 8000ae6:	e000      	b.n	8000aea <__lesf2+0x52>
 8000ae8:	2002      	movs	r0, #2
 8000aea:	bd70      	pop	{r4, r5, r6, pc}
 8000aec:	2d00      	cmp	r5, #0
 8000aee:	d1f4      	bne.n	8000ada <__lesf2+0x42>
 8000af0:	2800      	cmp	r0, #0
 8000af2:	d1fa      	bne.n	8000aea <__lesf2+0x52>
 8000af4:	2001      	movs	r0, #1
 8000af6:	4240      	negs	r0, r0
 8000af8:	e7f7      	b.n	8000aea <__lesf2+0x52>
 8000afa:	2c00      	cmp	r4, #0
 8000afc:	d1ed      	bne.n	8000ada <__lesf2+0x42>
 8000afe:	2e00      	cmp	r6, #0
 8000b00:	d1eb      	bne.n	8000ada <__lesf2+0x42>
 8000b02:	e7ec      	b.n	8000ade <__lesf2+0x46>
 8000b04:	42a2      	cmp	r2, r4
 8000b06:	dc05      	bgt.n	8000b14 <__lesf2+0x7c>
 8000b08:	dbf2      	blt.n	8000af0 <__lesf2+0x58>
 8000b0a:	42b5      	cmp	r5, r6
 8000b0c:	d802      	bhi.n	8000b14 <__lesf2+0x7c>
 8000b0e:	d3ef      	bcc.n	8000af0 <__lesf2+0x58>
 8000b10:	2000      	movs	r0, #0
 8000b12:	e7ea      	b.n	8000aea <__lesf2+0x52>
 8000b14:	4243      	negs	r3, r0
 8000b16:	4158      	adcs	r0, r3
 8000b18:	0040      	lsls	r0, r0, #1
 8000b1a:	3801      	subs	r0, #1
 8000b1c:	e7e5      	b.n	8000aea <__lesf2+0x52>
 8000b1e:	46c0      	nop			; (mov r8, r8)

08000b20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b20:	b580      	push	{r7, lr}
 8000b22:	b084      	sub	sp, #16
 8000b24:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b26:	f000 fc28 	bl	800137a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b2a:	f000 f845 	bl	8000bb8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b2e:	f000 f8c5 	bl	8000cbc <MX_GPIO_Init>
  MX_SPI1_Init();
 8000b32:	f000 f885 	bl	8000c40 <MX_SPI1_Init>
  //It is important not to exceed battery current limit, nominally 150mA
  //normal range for global brightness should be 0.05 to 0.3
  //When when all pixels are on, brightness need to be lowered to stay within 150mA current draw

  //power on and clear LEDs
  initDisplay();
 8000b36:	f000 f8f7 	bl	8000d28 <initDisplay>
  /* USER CODE END 2 */

  uint8_t sprite_x_pos = 0;
 8000b3a:	1dfb      	adds	r3, r7, #7
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	701a      	strb	r2, [r3, #0]
  int8_t mode = 1;
 8000b40:	1dbb      	adds	r3, r7, #6
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
	  //updateDisplay();	//send the frame buffer to the display
	  //HAL_Delay(500);
	  //clearDisplay();


	  drawSprite(sprite_x_pos,0,5,7,one[0],ORANGE);
 8000b46:	1dfb      	adds	r3, r7, #7
 8000b48:	2000      	movs	r0, #0
 8000b4a:	5618      	ldrsb	r0, [r3, r0]
 8000b4c:	4b17      	ldr	r3, [pc, #92]	; (8000bac <main+0x8c>)
 8000b4e:	9301      	str	r3, [sp, #4]
 8000b50:	4b17      	ldr	r3, [pc, #92]	; (8000bb0 <main+0x90>)
 8000b52:	9300      	str	r3, [sp, #0]
 8000b54:	2307      	movs	r3, #7
 8000b56:	2205      	movs	r2, #5
 8000b58:	2100      	movs	r1, #0
 8000b5a:	f000 f923 	bl	8000da4 <drawSprite>

	  drawSprite(0,0,7,6,heart[0],NONE);
 8000b5e:	2300      	movs	r3, #0
 8000b60:	9301      	str	r3, [sp, #4]
 8000b62:	4b14      	ldr	r3, [pc, #80]	; (8000bb4 <main+0x94>)
 8000b64:	9300      	str	r3, [sp, #0]
 8000b66:	2306      	movs	r3, #6
 8000b68:	2207      	movs	r2, #7
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	2000      	movs	r0, #0
 8000b6e:	f000 f919 	bl	8000da4 <drawSprite>

	  updateDisplay();
 8000b72:	f000 fa7f 	bl	8001074 <updateDisplay>
	  HAL_Delay(100);
 8000b76:	2064      	movs	r0, #100	; 0x64
 8000b78:	f000 fc7c 	bl	8001474 <HAL_Delay>
	  clearDisplay();
 8000b7c:	f000 f8e6 	bl	8000d4c <clearDisplay>

	  sprite_x_pos = sprite_x_pos + mode;
 8000b80:	1dbb      	adds	r3, r7, #6
 8000b82:	7819      	ldrb	r1, [r3, #0]
 8000b84:	1dfb      	adds	r3, r7, #7
 8000b86:	1dfa      	adds	r2, r7, #7
 8000b88:	7812      	ldrb	r2, [r2, #0]
 8000b8a:	188a      	adds	r2, r1, r2
 8000b8c:	701a      	strb	r2, [r3, #0]

	  if (sprite_x_pos > 7)
 8000b8e:	1dfb      	adds	r3, r7, #7
 8000b90:	781b      	ldrb	r3, [r3, #0]
 8000b92:	2b07      	cmp	r3, #7
 8000b94:	d902      	bls.n	8000b9c <main+0x7c>
	  {
		  mode = -1;
 8000b96:	1dbb      	adds	r3, r7, #6
 8000b98:	22ff      	movs	r2, #255	; 0xff
 8000b9a:	701a      	strb	r2, [r3, #0]
	  }

	  if (sprite_x_pos < 1)
 8000b9c:	1dfb      	adds	r3, r7, #7
 8000b9e:	781b      	ldrb	r3, [r3, #0]
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	d1d0      	bne.n	8000b46 <main+0x26>
	  {
		  mode = 1;
 8000ba4:	1dbb      	adds	r3, r7, #6
 8000ba6:	2201      	movs	r2, #1
 8000ba8:	701a      	strb	r2, [r3, #0]
	  drawSprite(sprite_x_pos,0,5,7,one[0],ORANGE);
 8000baa:	e7cc      	b.n	8000b46 <main+0x26>
 8000bac:	00ff8400 	.word	0x00ff8400
 8000bb0:	20000000 	.word	0x20000000
 8000bb4:	08002954 	.word	0x08002954

08000bb8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb8:	b590      	push	{r4, r7, lr}
 8000bba:	b08d      	sub	sp, #52	; 0x34
 8000bbc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bbe:	2414      	movs	r4, #20
 8000bc0:	193b      	adds	r3, r7, r4
 8000bc2:	0018      	movs	r0, r3
 8000bc4:	231c      	movs	r3, #28
 8000bc6:	001a      	movs	r2, r3
 8000bc8:	2100      	movs	r1, #0
 8000bca:	f001 fe89 	bl	80028e0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bce:	003b      	movs	r3, r7
 8000bd0:	0018      	movs	r0, r3
 8000bd2:	2314      	movs	r3, #20
 8000bd4:	001a      	movs	r2, r3
 8000bd6:	2100      	movs	r1, #0
 8000bd8:	f001 fe82 	bl	80028e0 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bdc:	193b      	adds	r3, r7, r4
 8000bde:	2202      	movs	r2, #2
 8000be0:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000be2:	193b      	adds	r3, r7, r4
 8000be4:	2280      	movs	r2, #128	; 0x80
 8000be6:	0052      	lsls	r2, r2, #1
 8000be8:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000bea:	193b      	adds	r3, r7, r4
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bf0:	193b      	adds	r3, r7, r4
 8000bf2:	2240      	movs	r2, #64	; 0x40
 8000bf4:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bf6:	193b      	adds	r3, r7, r4
 8000bf8:	0018      	movs	r0, r3
 8000bfa:	f000 fe9b 	bl	8001934 <HAL_RCC_OscConfig>
 8000bfe:	1e03      	subs	r3, r0, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x4e>
  {
    Error_Handler();
 8000c02:	f000 fae1 	bl	80011c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c06:	003b      	movs	r3, r7
 8000c08:	2207      	movs	r2, #7
 8000c0a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000c0c:	003b      	movs	r3, r7
 8000c0e:	2200      	movs	r2, #0
 8000c10:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000c12:	003b      	movs	r3, r7
 8000c14:	2200      	movs	r2, #0
 8000c16:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 8000c18:	003b      	movs	r3, r7
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 8000c1e:	003b      	movs	r3, r7
 8000c20:	2200      	movs	r2, #0
 8000c22:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000c24:	003b      	movs	r3, r7
 8000c26:	2101      	movs	r1, #1
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 f867 	bl	8001cfc <HAL_RCC_ClockConfig>
 8000c2e:	1e03      	subs	r3, r0, #0
 8000c30:	d001      	beq.n	8000c36 <SystemClock_Config+0x7e>
  {
    Error_Handler();
 8000c32:	f000 fac9 	bl	80011c8 <Error_Handler>
  }
}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	b00d      	add	sp, #52	; 0x34
 8000c3c:	bd90      	pop	{r4, r7, pc}
	...

08000c40 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c44:	4b1b      	ldr	r3, [pc, #108]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c46:	4a1c      	ldr	r2, [pc, #112]	; (8000cb8 <MX_SPI1_Init+0x78>)
 8000c48:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c4a:	4b1a      	ldr	r3, [pc, #104]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c4c:	2282      	movs	r2, #130	; 0x82
 8000c4e:	0052      	lsls	r2, r2, #1
 8000c50:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c52:	4b18      	ldr	r3, [pc, #96]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c58:	4b16      	ldr	r3, [pc, #88]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c5a:	22e0      	movs	r2, #224	; 0xe0
 8000c5c:	00d2      	lsls	r2, r2, #3
 8000c5e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c60:	4b14      	ldr	r3, [pc, #80]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c66:	4b13      	ldr	r3, [pc, #76]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c6c:	4b11      	ldr	r3, [pc, #68]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c6e:	2280      	movs	r2, #128	; 0x80
 8000c70:	0092      	lsls	r2, r2, #2
 8000c72:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c74:	4b0f      	ldr	r3, [pc, #60]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c76:	2210      	movs	r2, #16
 8000c78:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c7a:	4b0e      	ldr	r3, [pc, #56]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c80:	4b0c      	ldr	r3, [pc, #48]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c86:	4b0b      	ldr	r3, [pc, #44]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000c8c:	4b09      	ldr	r3, [pc, #36]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c8e:	2207      	movs	r2, #7
 8000c90:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000c92:	4b08      	ldr	r3, [pc, #32]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000c98:	4b06      	ldr	r3, [pc, #24]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000c9a:	2208      	movs	r2, #8
 8000c9c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c9e:	4b05      	ldr	r3, [pc, #20]	; (8000cb4 <MX_SPI1_Init+0x74>)
 8000ca0:	0018      	movs	r0, r3
 8000ca2:	f001 fa65 	bl	8002170 <HAL_SPI_Init>
 8000ca6:	1e03      	subs	r3, r0, #0
 8000ca8:	d001      	beq.n	8000cae <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000caa:	f000 fa8d 	bl	80011c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	bd80      	pop	{r7, pc}
 8000cb4:	200000b8 	.word	0x200000b8
 8000cb8:	40013000 	.word	0x40013000

08000cbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b086      	sub	sp, #24
 8000cc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc2:	1d3b      	adds	r3, r7, #4
 8000cc4:	0018      	movs	r0, r3
 8000cc6:	2314      	movs	r3, #20
 8000cc8:	001a      	movs	r2, r3
 8000cca:	2100      	movs	r1, #0
 8000ccc:	f001 fe08 	bl	80028e0 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cd0:	4b14      	ldr	r3, [pc, #80]	; (8000d24 <MX_GPIO_Init+0x68>)
 8000cd2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000cd4:	4b13      	ldr	r3, [pc, #76]	; (8000d24 <MX_GPIO_Init+0x68>)
 8000cd6:	2101      	movs	r1, #1
 8000cd8:	430a      	orrs	r2, r1
 8000cda:	635a      	str	r2, [r3, #52]	; 0x34
 8000cdc:	4b11      	ldr	r3, [pc, #68]	; (8000d24 <MX_GPIO_Init+0x68>)
 8000cde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000ce0:	2201      	movs	r2, #1
 8000ce2:	4013      	ands	r3, r2
 8000ce4:	603b      	str	r3, [r7, #0]
 8000ce6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
 8000ce8:	23a0      	movs	r3, #160	; 0xa0
 8000cea:	05db      	lsls	r3, r3, #23
 8000cec:	2200      	movs	r2, #0
 8000cee:	2108      	movs	r1, #8
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f000 fe01 	bl	80018f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_EN_Pin */
  GPIO_InitStruct.Pin = LED_EN_Pin;
 8000cf6:	1d3b      	adds	r3, r7, #4
 8000cf8:	2208      	movs	r2, #8
 8000cfa:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cfc:	1d3b      	adds	r3, r7, #4
 8000cfe:	2201      	movs	r2, #1
 8000d00:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	2200      	movs	r2, #0
 8000d06:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d08:	1d3b      	adds	r3, r7, #4
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_EN_GPIO_Port, &GPIO_InitStruct);
 8000d0e:	1d3a      	adds	r2, r7, #4
 8000d10:	23a0      	movs	r3, #160	; 0xa0
 8000d12:	05db      	lsls	r3, r3, #23
 8000d14:	0011      	movs	r1, r2
 8000d16:	0018      	movs	r0, r3
 8000d18:	f000 fc84 	bl	8001624 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d1c:	46c0      	nop			; (mov r8, r8)
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	b006      	add	sp, #24
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40021000 	.word	0x40021000

08000d28 <initDisplay>:

/* USER CODE BEGIN 4 */
void initDisplay(void)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	af00      	add	r7, sp, #0
	//HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 0);
	//HAL_Delay(1000);
	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 8000d2c:	23a0      	movs	r3, #160	; 0xa0
 8000d2e:	05db      	lsls	r3, r3, #23
 8000d30:	2201      	movs	r2, #1
 8000d32:	2108      	movs	r1, #8
 8000d34:	0018      	movs	r0, r3
 8000d36:	f000 fddf 	bl	80018f8 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000d3a:	200a      	movs	r0, #10
 8000d3c:	f000 fb9a 	bl	8001474 <HAL_Delay>
	clearDisplay();
 8000d40:	f000 f804 	bl	8000d4c <clearDisplay>
	//__NOP();
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	bd80      	pop	{r7, pc}
	...

08000d4c <clearDisplay>:

void clearDisplay(void)
{
 8000d4c:	b580      	push	{r7, lr}
 8000d4e:	b082      	sub	sp, #8
 8000d50:	af00      	add	r7, sp, #0
	uint8_t clear_frames[] = {0b11100000, 0, 0, 0};
 8000d52:	003b      	movs	r3, r7
 8000d54:	22e0      	movs	r2, #224	; 0xe0
 8000d56:	601a      	str	r2, [r3, #0]

	tx_start_frame();
 8000d58:	f000 f95c 	bl	8001014 <tx_start_frame>
	for (uint8_t i = 0; i <= displayTotalPix; i++) HAL_SPI_Transmit(&hspi1, clear_frames, 4, 100);
 8000d5c:	1dfb      	adds	r3, r7, #7
 8000d5e:	2200      	movs	r2, #0
 8000d60:	701a      	strb	r2, [r3, #0]
 8000d62:	e00a      	b.n	8000d7a <clearDisplay+0x2e>
 8000d64:	0039      	movs	r1, r7
 8000d66:	480d      	ldr	r0, [pc, #52]	; (8000d9c <clearDisplay+0x50>)
 8000d68:	2364      	movs	r3, #100	; 0x64
 8000d6a:	2204      	movs	r2, #4
 8000d6c:	f001 fab8 	bl	80022e0 <HAL_SPI_Transmit>
 8000d70:	1dfb      	adds	r3, r7, #7
 8000d72:	781a      	ldrb	r2, [r3, #0]
 8000d74:	1dfb      	adds	r3, r7, #7
 8000d76:	3201      	adds	r2, #1
 8000d78:	701a      	strb	r2, [r3, #0]
 8000d7a:	1dfb      	adds	r3, r7, #7
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	2b54      	cmp	r3, #84	; 0x54
 8000d80:	d9f0      	bls.n	8000d64 <clearDisplay+0x18>
	tx_end_frame();
 8000d82:	f000 f957 	bl	8001034 <tx_end_frame>

	memset(frame_buffer, 0, displayTotalPix*4);
 8000d86:	23a8      	movs	r3, #168	; 0xa8
 8000d88:	005a      	lsls	r2, r3, #1
 8000d8a:	4b05      	ldr	r3, [pc, #20]	; (8000da0 <clearDisplay+0x54>)
 8000d8c:	2100      	movs	r1, #0
 8000d8e:	0018      	movs	r0, r3
 8000d90:	f001 fda6 	bl	80028e0 <memset>
}
 8000d94:	46c0      	nop			; (mov r8, r8)
 8000d96:	46bd      	mov	sp, r7
 8000d98:	b002      	add	sp, #8
 8000d9a:	bd80      	pop	{r7, pc}
 8000d9c:	200000b8 	.word	0x200000b8
 8000da0:	2000011c 	.word	0x2000011c

08000da4 <drawSprite>:
}


//void drawSprite(uint8_t x, uint8_t y, uint8_t sprite_width, uint8_t sprite_height, uint32_t sprite_array[][sprite_width*sprite_height], uint32_t color)
void drawSprite(int8_t x, int8_t y, uint8_t sprite_width, uint8_t sprite_height, uint32_t sprite_array[sprite_width*sprite_height], uint32_t color)
{
 8000da4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000da6:	b08d      	sub	sp, #52	; 0x34
 8000da8:	af00      	add	r7, sp, #0
 8000daa:	468c      	mov	ip, r1
 8000dac:	0016      	movs	r6, r2
 8000dae:	0019      	movs	r1, r3
 8000db0:	231f      	movs	r3, #31
 8000db2:	18fa      	adds	r2, r7, r3
 8000db4:	1c03      	adds	r3, r0, #0
 8000db6:	7013      	strb	r3, [r2, #0]
 8000db8:	231e      	movs	r3, #30
 8000dba:	18fb      	adds	r3, r7, r3
 8000dbc:	4662      	mov	r2, ip
 8000dbe:	701a      	strb	r2, [r3, #0]
 8000dc0:	221d      	movs	r2, #29
 8000dc2:	18bb      	adds	r3, r7, r2
 8000dc4:	1c32      	adds	r2, r6, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
 8000dc8:	231c      	movs	r3, #28
 8000dca:	18fb      	adds	r3, r7, r3
 8000dcc:	1c0a      	adds	r2, r1, #0
 8000dce:	701a      	strb	r2, [r3, #0]
 8000dd0:	466b      	mov	r3, sp
 8000dd2:	0018      	movs	r0, r3

	//x = 0, y = 0, one, 5 x 7, 0

	//uint8_t sprite_size = sizeof(one)/sizeof(one[0][0]);
	//uint8_t sprite_size = sizeof(sprite_array)/sizeof(sprite_array[0]);
	uint8_t sprite_size = sprite_width * sprite_height;
 8000dd4:	2312      	movs	r3, #18
 8000dd6:	2618      	movs	r6, #24
 8000dd8:	1999      	adds	r1, r3, r6
 8000dda:	19cb      	adds	r3, r1, r7
 8000ddc:	221d      	movs	r2, #29
 8000dde:	18ba      	adds	r2, r7, r2
 8000de0:	211c      	movs	r1, #28
 8000de2:	1879      	adds	r1, r7, r1
 8000de4:	7812      	ldrb	r2, [r2, #0]
 8000de6:	7809      	ldrb	r1, [r1, #0]
 8000de8:	434a      	muls	r2, r1
 8000dea:	701a      	strb	r2, [r3, #0]
	uint8_t display_i = 0;
 8000dec:	2317      	movs	r3, #23
 8000dee:	199a      	adds	r2, r3, r6
 8000df0:	19d3      	adds	r3, r2, r7
 8000df2:	2200      	movs	r2, #0
 8000df4:	701a      	strb	r2, [r3, #0]
	uint8_t sprite_i = 0;
 8000df6:	2316      	movs	r3, #22
 8000df8:	199a      	adds	r2, r3, r6
 8000dfa:	19d3      	adds	r3, r2, r7
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	701a      	strb	r2, [r3, #0]
	uint8_t line_count = 1;
 8000e00:	2311      	movs	r3, #17
 8000e02:	199a      	adds	r2, r3, r6
 8000e04:	19d3      	adds	r3, r2, r7
 8000e06:	2201      	movs	r2, #1
 8000e08:	701a      	strb	r2, [r3, #0]
	uint8_t line_start = 0;
 8000e0a:	2310      	movs	r3, #16
 8000e0c:	199a      	adds	r2, r3, r6
 8000e0e:	19d3      	adds	r3, r2, r7
 8000e10:	2200      	movs	r2, #0
 8000e12:	701a      	strb	r2, [r3, #0]
	uint8_t found_endLine = 0;
 8000e14:	2315      	movs	r3, #21
 8000e16:	199a      	adds	r2, r3, r6
 8000e18:	19d3      	adds	r3, r2, r7
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	701a      	strb	r2, [r3, #0]

	//stores the numbers for when to skip lines in the display_i index given the dimmensions of the sprite
	uint8_t sprite_endlines[sprite_height];
 8000e1e:	231c      	movs	r3, #28
 8000e20:	18fb      	adds	r3, r7, r3
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	001a      	movs	r2, r3
 8000e26:	3a01      	subs	r2, #1
 8000e28:	627a      	str	r2, [r7, #36]	; 0x24
 8000e2a:	613b      	str	r3, [r7, #16]
 8000e2c:	2200      	movs	r2, #0
 8000e2e:	617a      	str	r2, [r7, #20]
 8000e30:	693a      	ldr	r2, [r7, #16]
 8000e32:	0f52      	lsrs	r2, r2, #29
 8000e34:	6979      	ldr	r1, [r7, #20]
 8000e36:	00c9      	lsls	r1, r1, #3
 8000e38:	6079      	str	r1, [r7, #4]
 8000e3a:	6879      	ldr	r1, [r7, #4]
 8000e3c:	4311      	orrs	r1, r2
 8000e3e:	6079      	str	r1, [r7, #4]
 8000e40:	693a      	ldr	r2, [r7, #16]
 8000e42:	00d2      	lsls	r2, r2, #3
 8000e44:	603a      	str	r2, [r7, #0]
 8000e46:	60bb      	str	r3, [r7, #8]
 8000e48:	2200      	movs	r2, #0
 8000e4a:	60fa      	str	r2, [r7, #12]
 8000e4c:	68ba      	ldr	r2, [r7, #8]
 8000e4e:	0f52      	lsrs	r2, r2, #29
 8000e50:	68f9      	ldr	r1, [r7, #12]
 8000e52:	00cd      	lsls	r5, r1, #3
 8000e54:	4315      	orrs	r5, r2
 8000e56:	68ba      	ldr	r2, [r7, #8]
 8000e58:	00d4      	lsls	r4, r2, #3
 8000e5a:	3307      	adds	r3, #7
 8000e5c:	08db      	lsrs	r3, r3, #3
 8000e5e:	00db      	lsls	r3, r3, #3
 8000e60:	466a      	mov	r2, sp
 8000e62:	1ad3      	subs	r3, r2, r3
 8000e64:	469d      	mov	sp, r3
 8000e66:	466b      	mov	r3, sp
 8000e68:	3300      	adds	r3, #0
 8000e6a:	623b      	str	r3, [r7, #32]
	sprite_endlines[0] =  sprite_width - 1;
 8000e6c:	231d      	movs	r3, #29
 8000e6e:	18fb      	adds	r3, r7, r3
 8000e70:	781b      	ldrb	r3, [r3, #0]
 8000e72:	3b01      	subs	r3, #1
 8000e74:	b2da      	uxtb	r2, r3
 8000e76:	6a3b      	ldr	r3, [r7, #32]
 8000e78:	701a      	strb	r2, [r3, #0]

	for (uint8_t i = 1; i <= sprite_height; i++)
 8000e7a:	2314      	movs	r3, #20
 8000e7c:	199b      	adds	r3, r3, r6
 8000e7e:	19db      	adds	r3, r3, r7
 8000e80:	2201      	movs	r2, #1
 8000e82:	701a      	strb	r2, [r3, #0]
 8000e84:	e018      	b.n	8000eb8 <drawSprite+0x114>
	{
		sprite_endlines[i] = sprite_endlines[i-1] + sprite_width;
 8000e86:	2414      	movs	r4, #20
 8000e88:	2518      	movs	r5, #24
 8000e8a:	1963      	adds	r3, r4, r5
 8000e8c:	19db      	adds	r3, r3, r7
 8000e8e:	781b      	ldrb	r3, [r3, #0]
 8000e90:	3b01      	subs	r3, #1
 8000e92:	6a3a      	ldr	r2, [r7, #32]
 8000e94:	5cd1      	ldrb	r1, [r2, r3]
 8000e96:	1963      	adds	r3, r4, r5
 8000e98:	19db      	adds	r3, r3, r7
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	221d      	movs	r2, #29
 8000e9e:	18ba      	adds	r2, r7, r2
 8000ea0:	7812      	ldrb	r2, [r2, #0]
 8000ea2:	188a      	adds	r2, r1, r2
 8000ea4:	b2d1      	uxtb	r1, r2
 8000ea6:	6a3a      	ldr	r2, [r7, #32]
 8000ea8:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 1; i <= sprite_height; i++)
 8000eaa:	1963      	adds	r3, r4, r5
 8000eac:	19db      	adds	r3, r3, r7
 8000eae:	781a      	ldrb	r2, [r3, #0]
 8000eb0:	1963      	adds	r3, r4, r5
 8000eb2:	19db      	adds	r3, r3, r7
 8000eb4:	3201      	adds	r2, #1
 8000eb6:	701a      	strb	r2, [r3, #0]
 8000eb8:	2314      	movs	r3, #20
 8000eba:	2418      	movs	r4, #24
 8000ebc:	191b      	adds	r3, r3, r4
 8000ebe:	19da      	adds	r2, r3, r7
 8000ec0:	231c      	movs	r3, #28
 8000ec2:	18fb      	adds	r3, r7, r3
 8000ec4:	7812      	ldrb	r2, [r2, #0]
 8000ec6:	781b      	ldrb	r3, [r3, #0]
 8000ec8:	429a      	cmp	r2, r3
 8000eca:	d9dc      	bls.n	8000e86 <drawSprite+0xe2>
	}



	display_i = (displaySizeX * y) + x;	//start off from the correct index
 8000ecc:	231e      	movs	r3, #30
 8000ece:	18fb      	adds	r3, r7, r3
 8000ed0:	781b      	ldrb	r3, [r3, #0]
 8000ed2:	220c      	movs	r2, #12
 8000ed4:	4353      	muls	r3, r2
 8000ed6:	b2d9      	uxtb	r1, r3
 8000ed8:	231f      	movs	r3, #31
 8000eda:	18fb      	adds	r3, r7, r3
 8000edc:	781a      	ldrb	r2, [r3, #0]
 8000ede:	2317      	movs	r3, #23
 8000ee0:	191b      	adds	r3, r3, r4
 8000ee2:	19db      	adds	r3, r3, r7
 8000ee4:	188a      	adds	r2, r1, r2
 8000ee6:	701a      	strb	r2, [r3, #0]
	while (sprite_i <= (sprite_size - 1))
 8000ee8:	e080      	b.n	8000fec <drawSprite+0x248>
	{

		//frame_buffer[display_i] = sprite_array[sprite_i];	//working well!
		if(((sprite_array[sprite_i] & 0x00FFFFFF) != 0) && color != 0)	//testing if color works
 8000eea:	2316      	movs	r3, #22
 8000eec:	2118      	movs	r1, #24
 8000eee:	185b      	adds	r3, r3, r1
 8000ef0:	19db      	adds	r3, r3, r7
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	009b      	lsls	r3, r3, #2
 8000ef6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ef8:	18d3      	adds	r3, r2, r3
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	021b      	lsls	r3, r3, #8
 8000efe:	0a1b      	lsrs	r3, r3, #8
 8000f00:	d00b      	beq.n	8000f1a <drawSprite+0x176>
 8000f02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000f04:	2b00      	cmp	r3, #0
 8000f06:	d008      	beq.n	8000f1a <drawSprite+0x176>
		{
			frame_buffer[display_i] = color;
 8000f08:	2317      	movs	r3, #23
 8000f0a:	185b      	adds	r3, r3, r1
 8000f0c:	19db      	adds	r3, r3, r7
 8000f0e:	781a      	ldrb	r2, [r3, #0]
 8000f10:	4b3f      	ldr	r3, [pc, #252]	; (8001010 <drawSprite+0x26c>)
 8000f12:	0092      	lsls	r2, r2, #2
 8000f14:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8000f16:	50d1      	str	r1, [r2, r3]
 8000f18:	e00f      	b.n	8000f3a <drawSprite+0x196>
		}
		else
		{
			frame_buffer[display_i] = sprite_array[sprite_i];	//working well!
 8000f1a:	2316      	movs	r3, #22
 8000f1c:	2118      	movs	r1, #24
 8000f1e:	185b      	adds	r3, r3, r1
 8000f20:	19db      	adds	r3, r3, r7
 8000f22:	781b      	ldrb	r3, [r3, #0]
 8000f24:	009b      	lsls	r3, r3, #2
 8000f26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000f28:	18d3      	adds	r3, r2, r3
 8000f2a:	2217      	movs	r2, #23
 8000f2c:	1852      	adds	r2, r2, r1
 8000f2e:	19d2      	adds	r2, r2, r7
 8000f30:	7812      	ldrb	r2, [r2, #0]
 8000f32:	6819      	ldr	r1, [r3, #0]
 8000f34:	4b36      	ldr	r3, [pc, #216]	; (8001010 <drawSprite+0x26c>)
 8000f36:	0092      	lsls	r2, r2, #2
 8000f38:	50d1      	str	r1, [r2, r3]
		}

		//search if sprite_i is in the list of endlines
		//for(uint8_t i = 0; i < (sizeof(sprite_endlines)/sizeof(sprite_endlines[0])); i++)
		for (uint8_t i = 0; i <= sprite_height; i++)
 8000f3a:	2313      	movs	r3, #19
 8000f3c:	2218      	movs	r2, #24
 8000f3e:	189b      	adds	r3, r3, r2
 8000f40:	19db      	adds	r3, r3, r7
 8000f42:	2200      	movs	r2, #0
 8000f44:	701a      	strb	r2, [r3, #0]
 8000f46:	e028      	b.n	8000f9a <drawSprite+0x1f6>
		{
		    if (sprite_i == sprite_endlines[i])
 8000f48:	2313      	movs	r3, #19
 8000f4a:	2418      	movs	r4, #24
 8000f4c:	191b      	adds	r3, r3, r4
 8000f4e:	19db      	adds	r3, r3, r7
 8000f50:	781b      	ldrb	r3, [r3, #0]
 8000f52:	6a3a      	ldr	r2, [r7, #32]
 8000f54:	5cd3      	ldrb	r3, [r2, r3]
 8000f56:	2216      	movs	r2, #22
 8000f58:	1912      	adds	r2, r2, r4
 8000f5a:	19d2      	adds	r2, r2, r7
 8000f5c:	7812      	ldrb	r2, [r2, #0]
 8000f5e:	429a      	cmp	r2, r3
 8000f60:	d112      	bne.n	8000f88 <drawSprite+0x1e4>
		    {
		    	display_i = display_i + (displaySizeX - sprite_width + 1);
 8000f62:	2117      	movs	r1, #23
 8000f64:	190b      	adds	r3, r1, r4
 8000f66:	19da      	adds	r2, r3, r7
 8000f68:	231d      	movs	r3, #29
 8000f6a:	18fb      	adds	r3, r7, r3
 8000f6c:	7812      	ldrb	r2, [r2, #0]
 8000f6e:	781b      	ldrb	r3, [r3, #0]
 8000f70:	1ad3      	subs	r3, r2, r3
 8000f72:	b2da      	uxtb	r2, r3
 8000f74:	190b      	adds	r3, r1, r4
 8000f76:	19db      	adds	r3, r3, r7
 8000f78:	320d      	adds	r2, #13
 8000f7a:	701a      	strb	r2, [r3, #0]
		    	found_endLine = 1;
 8000f7c:	2315      	movs	r3, #21
 8000f7e:	191b      	adds	r3, r3, r4
 8000f80:	19db      	adds	r3, r3, r7
 8000f82:	2201      	movs	r2, #1
 8000f84:	701a      	strb	r2, [r3, #0]
		        break;
 8000f86:	e012      	b.n	8000fae <drawSprite+0x20a>
		for (uint8_t i = 0; i <= sprite_height; i++)
 8000f88:	2113      	movs	r1, #19
 8000f8a:	2418      	movs	r4, #24
 8000f8c:	190b      	adds	r3, r1, r4
 8000f8e:	19db      	adds	r3, r3, r7
 8000f90:	781a      	ldrb	r2, [r3, #0]
 8000f92:	190b      	adds	r3, r1, r4
 8000f94:	19db      	adds	r3, r3, r7
 8000f96:	3201      	adds	r2, #1
 8000f98:	701a      	strb	r2, [r3, #0]
 8000f9a:	2313      	movs	r3, #19
 8000f9c:	2218      	movs	r2, #24
 8000f9e:	189b      	adds	r3, r3, r2
 8000fa0:	19da      	adds	r2, r3, r7
 8000fa2:	231c      	movs	r3, #28
 8000fa4:	18fb      	adds	r3, r7, r3
 8000fa6:	7812      	ldrb	r2, [r2, #0]
 8000fa8:	781b      	ldrb	r3, [r3, #0]
 8000faa:	429a      	cmp	r2, r3
 8000fac:	d9cc      	bls.n	8000f48 <drawSprite+0x1a4>
		    }
		}
		//if for loop didn't find anything, do not go to the next line
		if (found_endLine == 0)
 8000fae:	2315      	movs	r3, #21
 8000fb0:	2418      	movs	r4, #24
 8000fb2:	191b      	adds	r3, r3, r4
 8000fb4:	19db      	adds	r3, r3, r7
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d108      	bne.n	8000fce <drawSprite+0x22a>
		{
			display_i++;
 8000fbc:	2117      	movs	r1, #23
 8000fbe:	190b      	adds	r3, r1, r4
 8000fc0:	19db      	adds	r3, r3, r7
 8000fc2:	781a      	ldrb	r2, [r3, #0]
 8000fc4:	190b      	adds	r3, r1, r4
 8000fc6:	19db      	adds	r3, r3, r7
 8000fc8:	3201      	adds	r2, #1
 8000fca:	701a      	strb	r2, [r3, #0]
 8000fcc:	e005      	b.n	8000fda <drawSprite+0x236>
		}
		//reset the found endline flag
		else
		{
			found_endLine = 0;
 8000fce:	2315      	movs	r3, #21
 8000fd0:	2218      	movs	r2, #24
 8000fd2:	189b      	adds	r3, r3, r2
 8000fd4:	19db      	adds	r3, r3, r7
 8000fd6:	2200      	movs	r2, #0
 8000fd8:	701a      	strb	r2, [r3, #0]
			display_i++;
		}*/

		//frame_buffer[display_i] = sprite_array[sprite_i];

		sprite_i++;
 8000fda:	2116      	movs	r1, #22
 8000fdc:	2418      	movs	r4, #24
 8000fde:	190b      	adds	r3, r1, r4
 8000fe0:	19db      	adds	r3, r3, r7
 8000fe2:	781a      	ldrb	r2, [r3, #0]
 8000fe4:	190b      	adds	r3, r1, r4
 8000fe6:	19db      	adds	r3, r3, r7
 8000fe8:	3201      	adds	r2, #1
 8000fea:	701a      	strb	r2, [r3, #0]
	while (sprite_i <= (sprite_size - 1))
 8000fec:	2312      	movs	r3, #18
 8000fee:	2118      	movs	r1, #24
 8000ff0:	185b      	adds	r3, r3, r1
 8000ff2:	19da      	adds	r2, r3, r7
 8000ff4:	2316      	movs	r3, #22
 8000ff6:	185b      	adds	r3, r3, r1
 8000ff8:	19db      	adds	r3, r3, r7
 8000ffa:	7812      	ldrb	r2, [r2, #0]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	429a      	cmp	r2, r3
 8001000:	d900      	bls.n	8001004 <drawSprite+0x260>
 8001002:	e772      	b.n	8000eea <drawSprite+0x146>
 8001004:	4685      	mov	sp, r0
				  frameBuffer_i++;
			  }
	  }*/


}
 8001006:	46c0      	nop			; (mov r8, r8)
 8001008:	46bd      	mov	sp, r7
 800100a:	b00d      	add	sp, #52	; 0x34
 800100c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800100e:	46c0      	nop			; (mov r8, r8)
 8001010:	2000011c 	.word	0x2000011c

08001014 <tx_start_frame>:




void tx_start_frame(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&empty_frame, 1, 100);
 8001018:	4904      	ldr	r1, [pc, #16]	; (800102c <tx_start_frame+0x18>)
 800101a:	4805      	ldr	r0, [pc, #20]	; (8001030 <tx_start_frame+0x1c>)
 800101c:	2364      	movs	r3, #100	; 0x64
 800101e:	2201      	movs	r2, #1
 8001020:	f001 f95e 	bl	80022e0 <HAL_SPI_Transmit>
}
 8001024:	46c0      	nop			; (mov r8, r8)
 8001026:	46bd      	mov	sp, r7
 8001028:	bd80      	pop	{r7, pc}
 800102a:	46c0      	nop			; (mov r8, r8)
 800102c:	08002950 	.word	0x08002950
 8001030:	200000b8 	.word	0x200000b8

08001034 <tx_end_frame>:

void tx_end_frame(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b082      	sub	sp, #8
 8001038:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 6; i++) HAL_SPI_Transmit(&hspi1, (uint8_t *)&empty_frame, 1, 100);
 800103a:	1dfb      	adds	r3, r7, #7
 800103c:	2200      	movs	r2, #0
 800103e:	701a      	strb	r2, [r3, #0]
 8001040:	e00a      	b.n	8001058 <tx_end_frame+0x24>
 8001042:	490a      	ldr	r1, [pc, #40]	; (800106c <tx_end_frame+0x38>)
 8001044:	480a      	ldr	r0, [pc, #40]	; (8001070 <tx_end_frame+0x3c>)
 8001046:	2364      	movs	r3, #100	; 0x64
 8001048:	2201      	movs	r2, #1
 800104a:	f001 f949 	bl	80022e0 <HAL_SPI_Transmit>
 800104e:	1dfb      	adds	r3, r7, #7
 8001050:	781a      	ldrb	r2, [r3, #0]
 8001052:	1dfb      	adds	r3, r7, #7
 8001054:	3201      	adds	r2, #1
 8001056:	701a      	strb	r2, [r3, #0]
 8001058:	1dfb      	adds	r3, r7, #7
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	2b06      	cmp	r3, #6
 800105e:	d9f0      	bls.n	8001042 <tx_end_frame+0xe>
}
 8001060:	46c0      	nop			; (mov r8, r8)
 8001062:	46c0      	nop			; (mov r8, r8)
 8001064:	46bd      	mov	sp, r7
 8001066:	b002      	add	sp, #8
 8001068:	bd80      	pop	{r7, pc}
 800106a:	46c0      	nop			; (mov r8, r8)
 800106c:	08002950 	.word	0x08002950
 8001070:	200000b8 	.word	0x200000b8

08001074 <updateDisplay>:

void updateDisplay(void)
{
 8001074:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001076:	b085      	sub	sp, #20
 8001078:	af00      	add	r7, sp, #0
	tx_start_frame();
 800107a:	f7ff ffcb 	bl	8001014 <tx_start_frame>

	for (uint8_t i = 0; i <= displayTotalPix; i++) {
 800107e:	230f      	movs	r3, #15
 8001080:	18fb      	adds	r3, r7, r3
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
 8001086:	e08a      	b.n	800119e <updateDisplay+0x12a>

		  //get the color values from the frame array
		  //uint8_t red = (frame_buffer[i] & 0xFF0000) >> 16;
		  //uint8_t green = (frame_buffer[i] & 0xFF00) >> 8;
		  //uint8_t blue = (frame_buffer[i] & 0xFF);
		  uint8_t blue = (frame_buffer[i] & 0xFF0000) >> 16;
 8001088:	250f      	movs	r5, #15
 800108a:	197b      	adds	r3, r7, r5
 800108c:	781a      	ldrb	r2, [r3, #0]
 800108e:	4b4a      	ldr	r3, [pc, #296]	; (80011b8 <updateDisplay+0x144>)
 8001090:	0092      	lsls	r2, r2, #2
 8001092:	58d3      	ldr	r3, [r2, r3]
 8001094:	0c1a      	lsrs	r2, r3, #16
 8001096:	260e      	movs	r6, #14
 8001098:	19bb      	adds	r3, r7, r6
 800109a:	701a      	strb	r2, [r3, #0]
		  uint8_t green = (frame_buffer[i] & 0xFF00) >> 8;
 800109c:	197b      	adds	r3, r7, r5
 800109e:	781a      	ldrb	r2, [r3, #0]
 80010a0:	4b45      	ldr	r3, [pc, #276]	; (80011b8 <updateDisplay+0x144>)
 80010a2:	0092      	lsls	r2, r2, #2
 80010a4:	58d3      	ldr	r3, [r2, r3]
 80010a6:	0a1a      	lsrs	r2, r3, #8
 80010a8:	240d      	movs	r4, #13
 80010aa:	193b      	adds	r3, r7, r4
 80010ac:	701a      	strb	r2, [r3, #0]
		  uint8_t red = (frame_buffer[i] & 0xFF);
 80010ae:	197b      	adds	r3, r7, r5
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b41      	ldr	r3, [pc, #260]	; (80011b8 <updateDisplay+0x144>)
 80010b4:	0092      	lsls	r2, r2, #2
 80010b6:	58d2      	ldr	r2, [r2, r3]
 80010b8:	210c      	movs	r1, #12
 80010ba:	187b      	adds	r3, r7, r1
 80010bc:	701a      	strb	r2, [r3, #0]

		  //scale the color values with global brightness
		  red = red * global_brightness;
 80010be:	000c      	movs	r4, r1
 80010c0:	187b      	adds	r3, r7, r1
 80010c2:	781b      	ldrb	r3, [r3, #0]
 80010c4:	0018      	movs	r0, r3
 80010c6:	f7ff fbd1 	bl	800086c <__aeabi_i2f>
 80010ca:	1c02      	adds	r2, r0, #0
 80010cc:	4b3b      	ldr	r3, [pc, #236]	; (80011bc <updateDisplay+0x148>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	1c19      	adds	r1, r3, #0
 80010d2:	1c10      	adds	r0, r2, #0
 80010d4:	f7ff f8bc 	bl	8000250 <__aeabi_fmul>
 80010d8:	1c03      	adds	r3, r0, #0
 80010da:	0022      	movs	r2, r4
 80010dc:	18bc      	adds	r4, r7, r2
 80010de:	1c18      	adds	r0, r3, #0
 80010e0:	f7ff f89e 	bl	8000220 <__aeabi_f2uiz>
 80010e4:	0003      	movs	r3, r0
 80010e6:	7023      	strb	r3, [r4, #0]
		  green = green * global_brightness;
 80010e8:	240d      	movs	r4, #13
 80010ea:	193b      	adds	r3, r7, r4
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	0018      	movs	r0, r3
 80010f0:	f7ff fbbc 	bl	800086c <__aeabi_i2f>
 80010f4:	1c02      	adds	r2, r0, #0
 80010f6:	4b31      	ldr	r3, [pc, #196]	; (80011bc <updateDisplay+0x148>)
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	1c19      	adds	r1, r3, #0
 80010fc:	1c10      	adds	r0, r2, #0
 80010fe:	f7ff f8a7 	bl	8000250 <__aeabi_fmul>
 8001102:	1c03      	adds	r3, r0, #0
 8001104:	193c      	adds	r4, r7, r4
 8001106:	1c18      	adds	r0, r3, #0
 8001108:	f7ff f88a 	bl	8000220 <__aeabi_f2uiz>
 800110c:	0003      	movs	r3, r0
 800110e:	7023      	strb	r3, [r4, #0]
		  blue = blue * global_brightness;
 8001110:	19bb      	adds	r3, r7, r6
 8001112:	781b      	ldrb	r3, [r3, #0]
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fba9 	bl	800086c <__aeabi_i2f>
 800111a:	1c02      	adds	r2, r0, #0
 800111c:	4b27      	ldr	r3, [pc, #156]	; (80011bc <updateDisplay+0x148>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	1c19      	adds	r1, r3, #0
 8001122:	1c10      	adds	r0, r2, #0
 8001124:	f7ff f894 	bl	8000250 <__aeabi_fmul>
 8001128:	1c03      	adds	r3, r0, #0
 800112a:	19bc      	adds	r4, r7, r6
 800112c:	1c18      	adds	r0, r3, #0
 800112e:	f7ff f877 	bl	8000220 <__aeabi_f2uiz>
 8001132:	0003      	movs	r3, r0
 8001134:	7023      	strb	r3, [r4, #0]

		  //set the local brightness for a given pixel based on global brightness
		  uint8_t pixel_brightness = 31 * global_brightness;
 8001136:	4b21      	ldr	r3, [pc, #132]	; (80011bc <updateDisplay+0x148>)
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	4921      	ldr	r1, [pc, #132]	; (80011c0 <updateDisplay+0x14c>)
 800113c:	1c18      	adds	r0, r3, #0
 800113e:	f7ff f887 	bl	8000250 <__aeabi_fmul>
 8001142:	1c03      	adds	r3, r0, #0
 8001144:	210b      	movs	r1, #11
 8001146:	187c      	adds	r4, r7, r1
 8001148:	1c18      	adds	r0, r3, #0
 800114a:	f7ff f869 	bl	8000220 <__aeabi_f2uiz>
 800114e:	0003      	movs	r3, r0
 8001150:	7023      	strb	r3, [r4, #0]
		  uint8_t pixel_start = 0b11100000 | pixel_brightness;
 8001152:	200a      	movs	r0, #10
 8001154:	183b      	adds	r3, r7, r0
 8001156:	210b      	movs	r1, #11
 8001158:	187a      	adds	r2, r7, r1
 800115a:	7812      	ldrb	r2, [r2, #0]
 800115c:	2120      	movs	r1, #32
 800115e:	4249      	negs	r1, r1
 8001160:	430a      	orrs	r2, r1
 8001162:	701a      	strb	r2, [r3, #0]

		  //uint8_t tx_buffer[] = {pixel_start, red, green, blue};
		  uint8_t tx_buffer[] = {pixel_start, blue, green, red};
 8001164:	1d3b      	adds	r3, r7, #4
 8001166:	183a      	adds	r2, r7, r0
 8001168:	7812      	ldrb	r2, [r2, #0]
 800116a:	701a      	strb	r2, [r3, #0]
 800116c:	1d3b      	adds	r3, r7, #4
 800116e:	19ba      	adds	r2, r7, r6
 8001170:	7812      	ldrb	r2, [r2, #0]
 8001172:	705a      	strb	r2, [r3, #1]
 8001174:	1d3b      	adds	r3, r7, #4
 8001176:	240d      	movs	r4, #13
 8001178:	193a      	adds	r2, r7, r4
 800117a:	7812      	ldrb	r2, [r2, #0]
 800117c:	709a      	strb	r2, [r3, #2]
 800117e:	1d3b      	adds	r3, r7, #4
 8001180:	220c      	movs	r2, #12
 8001182:	18ba      	adds	r2, r7, r2
 8001184:	7812      	ldrb	r2, [r2, #0]
 8001186:	70da      	strb	r2, [r3, #3]

		  HAL_SPI_Transmit(&hspi1, tx_buffer, 4, 100);
 8001188:	1d39      	adds	r1, r7, #4
 800118a:	480e      	ldr	r0, [pc, #56]	; (80011c4 <updateDisplay+0x150>)
 800118c:	2364      	movs	r3, #100	; 0x64
 800118e:	2204      	movs	r2, #4
 8001190:	f001 f8a6 	bl	80022e0 <HAL_SPI_Transmit>
	for (uint8_t i = 0; i <= displayTotalPix; i++) {
 8001194:	197b      	adds	r3, r7, r5
 8001196:	781a      	ldrb	r2, [r3, #0]
 8001198:	197b      	adds	r3, r7, r5
 800119a:	3201      	adds	r2, #1
 800119c:	701a      	strb	r2, [r3, #0]
 800119e:	230f      	movs	r3, #15
 80011a0:	18fb      	adds	r3, r7, r3
 80011a2:	781b      	ldrb	r3, [r3, #0]
 80011a4:	2b54      	cmp	r3, #84	; 0x54
 80011a6:	d800      	bhi.n	80011aa <updateDisplay+0x136>
 80011a8:	e76e      	b.n	8001088 <updateDisplay+0x14>
	  }

	  tx_end_frame();
 80011aa:	f7ff ff43 	bl	8001034 <tx_end_frame>
}
 80011ae:	46c0      	nop			; (mov r8, r8)
 80011b0:	46bd      	mov	sp, r7
 80011b2:	b005      	add	sp, #20
 80011b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011b6:	46c0      	nop			; (mov r8, r8)
 80011b8:	2000011c 	.word	0x2000011c
 80011bc:	2000008c 	.word	0x2000008c
 80011c0:	41f80000 	.word	0x41f80000
 80011c4:	200000b8 	.word	0x200000b8

080011c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011cc:	b672      	cpsid	i
}
 80011ce:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011d0:	e7fe      	b.n	80011d0 <Error_Handler+0x8>
	...

080011d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011d4:	b580      	push	{r7, lr}
 80011d6:	b082      	sub	sp, #8
 80011d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011da:	4b0f      	ldr	r3, [pc, #60]	; (8001218 <HAL_MspInit+0x44>)
 80011dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80011de:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_MspInit+0x44>)
 80011e0:	2101      	movs	r1, #1
 80011e2:	430a      	orrs	r2, r1
 80011e4:	641a      	str	r2, [r3, #64]	; 0x40
 80011e6:	4b0c      	ldr	r3, [pc, #48]	; (8001218 <HAL_MspInit+0x44>)
 80011e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ea:	2201      	movs	r2, #1
 80011ec:	4013      	ands	r3, r2
 80011ee:	607b      	str	r3, [r7, #4]
 80011f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80011f2:	4b09      	ldr	r3, [pc, #36]	; (8001218 <HAL_MspInit+0x44>)
 80011f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80011f6:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_MspInit+0x44>)
 80011f8:	2180      	movs	r1, #128	; 0x80
 80011fa:	0549      	lsls	r1, r1, #21
 80011fc:	430a      	orrs	r2, r1
 80011fe:	63da      	str	r2, [r3, #60]	; 0x3c
 8001200:	4b05      	ldr	r3, [pc, #20]	; (8001218 <HAL_MspInit+0x44>)
 8001202:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001204:	2380      	movs	r3, #128	; 0x80
 8001206:	055b      	lsls	r3, r3, #21
 8001208:	4013      	ands	r3, r2
 800120a:	603b      	str	r3, [r7, #0]
 800120c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800120e:	46c0      	nop			; (mov r8, r8)
 8001210:	46bd      	mov	sp, r7
 8001212:	b002      	add	sp, #8
 8001214:	bd80      	pop	{r7, pc}
 8001216:	46c0      	nop			; (mov r8, r8)
 8001218:	40021000 	.word	0x40021000

0800121c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800121c:	b590      	push	{r4, r7, lr}
 800121e:	b091      	sub	sp, #68	; 0x44
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001224:	232c      	movs	r3, #44	; 0x2c
 8001226:	18fb      	adds	r3, r7, r3
 8001228:	0018      	movs	r0, r3
 800122a:	2314      	movs	r3, #20
 800122c:	001a      	movs	r2, r3
 800122e:	2100      	movs	r1, #0
 8001230:	f001 fb56 	bl	80028e0 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001234:	2410      	movs	r4, #16
 8001236:	193b      	adds	r3, r7, r4
 8001238:	0018      	movs	r0, r3
 800123a:	231c      	movs	r3, #28
 800123c:	001a      	movs	r2, r3
 800123e:	2100      	movs	r1, #0
 8001240:	f001 fb4e 	bl	80028e0 <memset>
  if(hspi->Instance==SPI1)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	4a23      	ldr	r2, [pc, #140]	; (80012d8 <HAL_SPI_MspInit+0xbc>)
 800124a:	4293      	cmp	r3, r2
 800124c:	d13f      	bne.n	80012ce <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800124e:	193b      	adds	r3, r7, r4
 8001250:	2280      	movs	r2, #128	; 0x80
 8001252:	0112      	lsls	r2, r2, #4
 8001254:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8001256:	193b      	adds	r3, r7, r4
 8001258:	2200      	movs	r2, #0
 800125a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800125c:	193b      	adds	r3, r7, r4
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fe98 	bl	8001f94 <HAL_RCCEx_PeriphCLKConfig>
 8001264:	1e03      	subs	r3, r0, #0
 8001266:	d001      	beq.n	800126c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8001268:	f7ff ffae 	bl	80011c8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800126c:	4b1b      	ldr	r3, [pc, #108]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 800126e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001270:	4b1a      	ldr	r3, [pc, #104]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 8001272:	2180      	movs	r1, #128	; 0x80
 8001274:	0149      	lsls	r1, r1, #5
 8001276:	430a      	orrs	r2, r1
 8001278:	641a      	str	r2, [r3, #64]	; 0x40
 800127a:	4b18      	ldr	r3, [pc, #96]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 800127c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127e:	2380      	movs	r3, #128	; 0x80
 8001280:	015b      	lsls	r3, r3, #5
 8001282:	4013      	ands	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
 8001286:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001288:	4b14      	ldr	r3, [pc, #80]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 800128a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128c:	4b13      	ldr	r3, [pc, #76]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 800128e:	2101      	movs	r1, #1
 8001290:	430a      	orrs	r2, r1
 8001292:	635a      	str	r2, [r3, #52]	; 0x34
 8001294:	4b11      	ldr	r3, [pc, #68]	; (80012dc <HAL_SPI_MspInit+0xc0>)
 8001296:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001298:	2201      	movs	r2, #1
 800129a:	4013      	ands	r3, r2
 800129c:	60bb      	str	r3, [r7, #8]
 800129e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80012a0:	212c      	movs	r1, #44	; 0x2c
 80012a2:	187b      	adds	r3, r7, r1
 80012a4:	2206      	movs	r2, #6
 80012a6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	187b      	adds	r3, r7, r1
 80012aa:	2202      	movs	r2, #2
 80012ac:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ae:	187b      	adds	r3, r7, r1
 80012b0:	2200      	movs	r2, #0
 80012b2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b4:	187b      	adds	r3, r7, r1
 80012b6:	2200      	movs	r2, #0
 80012b8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80012ba:	187b      	adds	r3, r7, r1
 80012bc:	2200      	movs	r2, #0
 80012be:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c0:	187a      	adds	r2, r7, r1
 80012c2:	23a0      	movs	r3, #160	; 0xa0
 80012c4:	05db      	lsls	r3, r3, #23
 80012c6:	0011      	movs	r1, r2
 80012c8:	0018      	movs	r0, r3
 80012ca:	f000 f9ab 	bl	8001624 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80012ce:	46c0      	nop			; (mov r8, r8)
 80012d0:	46bd      	mov	sp, r7
 80012d2:	b011      	add	sp, #68	; 0x44
 80012d4:	bd90      	pop	{r4, r7, pc}
 80012d6:	46c0      	nop			; (mov r8, r8)
 80012d8:	40013000 	.word	0x40013000
 80012dc:	40021000 	.word	0x40021000

080012e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80012e4:	e7fe      	b.n	80012e4 <NMI_Handler+0x4>

080012e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012e6:	b580      	push	{r7, lr}
 80012e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012ea:	e7fe      	b.n	80012ea <HardFault_Handler+0x4>

080012ec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80012f0:	46c0      	nop			; (mov r8, r8)
 80012f2:	46bd      	mov	sp, r7
 80012f4:	bd80      	pop	{r7, pc}

080012f6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f6:	b580      	push	{r7, lr}
 80012f8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012fa:	46c0      	nop			; (mov r8, r8)
 80012fc:	46bd      	mov	sp, r7
 80012fe:	bd80      	pop	{r7, pc}

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f89a 	bl	800143c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	46c0      	nop			; (mov r8, r8)
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
	...

08001310 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001310:	b580      	push	{r7, lr}
 8001312:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001314:	4b03      	ldr	r3, [pc, #12]	; (8001324 <SystemInit+0x14>)
 8001316:	2280      	movs	r2, #128	; 0x80
 8001318:	0512      	lsls	r2, r2, #20
 800131a:	609a      	str	r2, [r3, #8]
#endif
}
 800131c:	46c0      	nop			; (mov r8, r8)
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}
 8001322:	46c0      	nop			; (mov r8, r8)
 8001324:	e000ed00 	.word	0xe000ed00

08001328 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001328:	480d      	ldr	r0, [pc, #52]	; (8001360 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800132a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 800132c:	f7ff fff0 	bl	8001310 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8001330:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8001332:	e003      	b.n	800133c <LoopCopyDataInit>

08001334 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8001334:	4b0b      	ldr	r3, [pc, #44]	; (8001364 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8001336:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8001338:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 800133a:	3104      	adds	r1, #4

0800133c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 800133c:	480a      	ldr	r0, [pc, #40]	; (8001368 <LoopForever+0xa>)
  ldr r3, =_edata
 800133e:	4b0b      	ldr	r3, [pc, #44]	; (800136c <LoopForever+0xe>)
  adds r2, r0, r1
 8001340:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8001342:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8001344:	d3f6      	bcc.n	8001334 <CopyDataInit>
  ldr r2, =_sbss
 8001346:	4a0a      	ldr	r2, [pc, #40]	; (8001370 <LoopForever+0x12>)
  b LoopFillZerobss
 8001348:	e002      	b.n	8001350 <LoopFillZerobss>

0800134a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 800134a:	2300      	movs	r3, #0
  str  r3, [r2]
 800134c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800134e:	3204      	adds	r2, #4

08001350 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8001350:	4b08      	ldr	r3, [pc, #32]	; (8001374 <LoopForever+0x16>)
  cmp r2, r3
 8001352:	429a      	cmp	r2, r3
  bcc FillZerobss
 8001354:	d3f9      	bcc.n	800134a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8001356:	f001 facb 	bl	80028f0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800135a:	f7ff fbe1 	bl	8000b20 <main>

0800135e <LoopForever>:

LoopForever:
    b LoopForever
 800135e:	e7fe      	b.n	800135e <LoopForever>
  ldr   r0, =_estack
 8001360:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8001364:	08002a44 	.word	0x08002a44
  ldr r0, =_sdata
 8001368:	20000000 	.word	0x20000000
  ldr r3, =_edata
 800136c:	2000009c 	.word	0x2000009c
  ldr r2, =_sbss
 8001370:	2000009c 	.word	0x2000009c
  ldr r3, = _ebss
 8001374:	20000270 	.word	0x20000270

08001378 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001378:	e7fe      	b.n	8001378 <ADC1_IRQHandler>

0800137a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800137a:	b580      	push	{r7, lr}
 800137c:	b082      	sub	sp, #8
 800137e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001380:	1dfb      	adds	r3, r7, #7
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001386:	2003      	movs	r0, #3
 8001388:	f000 f80e 	bl	80013a8 <HAL_InitTick>
 800138c:	1e03      	subs	r3, r0, #0
 800138e:	d003      	beq.n	8001398 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8001390:	1dfb      	adds	r3, r7, #7
 8001392:	2201      	movs	r2, #1
 8001394:	701a      	strb	r2, [r3, #0]
 8001396:	e001      	b.n	800139c <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001398:	f7ff ff1c 	bl	80011d4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800139c:	1dfb      	adds	r3, r7, #7
 800139e:	781b      	ldrb	r3, [r3, #0]
}
 80013a0:	0018      	movs	r0, r3
 80013a2:	46bd      	mov	sp, r7
 80013a4:	b002      	add	sp, #8
 80013a6:	bd80      	pop	{r7, pc}

080013a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013a8:	b590      	push	{r4, r7, lr}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80013b0:	230f      	movs	r3, #15
 80013b2:	18fb      	adds	r3, r7, r3
 80013b4:	2200      	movs	r2, #0
 80013b6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 80013b8:	4b1d      	ldr	r3, [pc, #116]	; (8001430 <HAL_InitTick+0x88>)
 80013ba:	781b      	ldrb	r3, [r3, #0]
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d02b      	beq.n	8001418 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 80013c0:	4b1c      	ldr	r3, [pc, #112]	; (8001434 <HAL_InitTick+0x8c>)
 80013c2:	681c      	ldr	r4, [r3, #0]
 80013c4:	4b1a      	ldr	r3, [pc, #104]	; (8001430 <HAL_InitTick+0x88>)
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	0019      	movs	r1, r3
 80013ca:	23fa      	movs	r3, #250	; 0xfa
 80013cc:	0098      	lsls	r0, r3, #2
 80013ce:	f7fe fe9b 	bl	8000108 <__udivsi3>
 80013d2:	0003      	movs	r3, r0
 80013d4:	0019      	movs	r1, r3
 80013d6:	0020      	movs	r0, r4
 80013d8:	f7fe fe96 	bl	8000108 <__udivsi3>
 80013dc:	0003      	movs	r3, r0
 80013de:	0018      	movs	r0, r3
 80013e0:	f000 f913 	bl	800160a <HAL_SYSTICK_Config>
 80013e4:	1e03      	subs	r3, r0, #0
 80013e6:	d112      	bne.n	800140e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2b03      	cmp	r3, #3
 80013ec:	d80a      	bhi.n	8001404 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013ee:	6879      	ldr	r1, [r7, #4]
 80013f0:	2301      	movs	r3, #1
 80013f2:	425b      	negs	r3, r3
 80013f4:	2200      	movs	r2, #0
 80013f6:	0018      	movs	r0, r3
 80013f8:	f000 f8f2 	bl	80015e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80013fc:	4b0e      	ldr	r3, [pc, #56]	; (8001438 <HAL_InitTick+0x90>)
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	601a      	str	r2, [r3, #0]
 8001402:	e00d      	b.n	8001420 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001404:	230f      	movs	r3, #15
 8001406:	18fb      	adds	r3, r7, r3
 8001408:	2201      	movs	r2, #1
 800140a:	701a      	strb	r2, [r3, #0]
 800140c:	e008      	b.n	8001420 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 800140e:	230f      	movs	r3, #15
 8001410:	18fb      	adds	r3, r7, r3
 8001412:	2201      	movs	r2, #1
 8001414:	701a      	strb	r2, [r3, #0]
 8001416:	e003      	b.n	8001420 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001418:	230f      	movs	r3, #15
 800141a:	18fb      	adds	r3, r7, r3
 800141c:	2201      	movs	r2, #1
 800141e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001420:	230f      	movs	r3, #15
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	781b      	ldrb	r3, [r3, #0]
}
 8001426:	0018      	movs	r0, r3
 8001428:	46bd      	mov	sp, r7
 800142a:	b005      	add	sp, #20
 800142c:	bd90      	pop	{r4, r7, pc}
 800142e:	46c0      	nop			; (mov r8, r8)
 8001430:	20000098 	.word	0x20000098
 8001434:	20000090 	.word	0x20000090
 8001438:	20000094 	.word	0x20000094

0800143c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800143c:	b580      	push	{r7, lr}
 800143e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001440:	4b05      	ldr	r3, [pc, #20]	; (8001458 <HAL_IncTick+0x1c>)
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	001a      	movs	r2, r3
 8001446:	4b05      	ldr	r3, [pc, #20]	; (800145c <HAL_IncTick+0x20>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	18d2      	adds	r2, r2, r3
 800144c:	4b03      	ldr	r3, [pc, #12]	; (800145c <HAL_IncTick+0x20>)
 800144e:	601a      	str	r2, [r3, #0]
}
 8001450:	46c0      	nop			; (mov r8, r8)
 8001452:	46bd      	mov	sp, r7
 8001454:	bd80      	pop	{r7, pc}
 8001456:	46c0      	nop			; (mov r8, r8)
 8001458:	20000098 	.word	0x20000098
 800145c:	2000026c 	.word	0x2000026c

08001460 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  return uwTick;
 8001464:	4b02      	ldr	r3, [pc, #8]	; (8001470 <HAL_GetTick+0x10>)
 8001466:	681b      	ldr	r3, [r3, #0]
}
 8001468:	0018      	movs	r0, r3
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	46c0      	nop			; (mov r8, r8)
 8001470:	2000026c 	.word	0x2000026c

08001474 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	b084      	sub	sp, #16
 8001478:	af00      	add	r7, sp, #0
 800147a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800147c:	f7ff fff0 	bl	8001460 <HAL_GetTick>
 8001480:	0003      	movs	r3, r0
 8001482:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8001484:	687b      	ldr	r3, [r7, #4]
 8001486:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	3301      	adds	r3, #1
 800148c:	d005      	beq.n	800149a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800148e:	4b0a      	ldr	r3, [pc, #40]	; (80014b8 <HAL_Delay+0x44>)
 8001490:	781b      	ldrb	r3, [r3, #0]
 8001492:	001a      	movs	r2, r3
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	189b      	adds	r3, r3, r2
 8001498:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800149a:	46c0      	nop			; (mov r8, r8)
 800149c:	f7ff ffe0 	bl	8001460 <HAL_GetTick>
 80014a0:	0002      	movs	r2, r0
 80014a2:	68bb      	ldr	r3, [r7, #8]
 80014a4:	1ad3      	subs	r3, r2, r3
 80014a6:	68fa      	ldr	r2, [r7, #12]
 80014a8:	429a      	cmp	r2, r3
 80014aa:	d8f7      	bhi.n	800149c <HAL_Delay+0x28>
  {
  }
}
 80014ac:	46c0      	nop			; (mov r8, r8)
 80014ae:	46c0      	nop			; (mov r8, r8)
 80014b0:	46bd      	mov	sp, r7
 80014b2:	b004      	add	sp, #16
 80014b4:	bd80      	pop	{r7, pc}
 80014b6:	46c0      	nop			; (mov r8, r8)
 80014b8:	20000098 	.word	0x20000098

080014bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80014bc:	b590      	push	{r4, r7, lr}
 80014be:	b083      	sub	sp, #12
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	0002      	movs	r2, r0
 80014c4:	6039      	str	r1, [r7, #0]
 80014c6:	1dfb      	adds	r3, r7, #7
 80014c8:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80014ca:	1dfb      	adds	r3, r7, #7
 80014cc:	781b      	ldrb	r3, [r3, #0]
 80014ce:	2b7f      	cmp	r3, #127	; 0x7f
 80014d0:	d828      	bhi.n	8001524 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80014d2:	4a2f      	ldr	r2, [pc, #188]	; (8001590 <__NVIC_SetPriority+0xd4>)
 80014d4:	1dfb      	adds	r3, r7, #7
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	b25b      	sxtb	r3, r3
 80014da:	089b      	lsrs	r3, r3, #2
 80014dc:	33c0      	adds	r3, #192	; 0xc0
 80014de:	009b      	lsls	r3, r3, #2
 80014e0:	589b      	ldr	r3, [r3, r2]
 80014e2:	1dfa      	adds	r2, r7, #7
 80014e4:	7812      	ldrb	r2, [r2, #0]
 80014e6:	0011      	movs	r1, r2
 80014e8:	2203      	movs	r2, #3
 80014ea:	400a      	ands	r2, r1
 80014ec:	00d2      	lsls	r2, r2, #3
 80014ee:	21ff      	movs	r1, #255	; 0xff
 80014f0:	4091      	lsls	r1, r2
 80014f2:	000a      	movs	r2, r1
 80014f4:	43d2      	mvns	r2, r2
 80014f6:	401a      	ands	r2, r3
 80014f8:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80014fa:	683b      	ldr	r3, [r7, #0]
 80014fc:	019b      	lsls	r3, r3, #6
 80014fe:	22ff      	movs	r2, #255	; 0xff
 8001500:	401a      	ands	r2, r3
 8001502:	1dfb      	adds	r3, r7, #7
 8001504:	781b      	ldrb	r3, [r3, #0]
 8001506:	0018      	movs	r0, r3
 8001508:	2303      	movs	r3, #3
 800150a:	4003      	ands	r3, r0
 800150c:	00db      	lsls	r3, r3, #3
 800150e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001510:	481f      	ldr	r0, [pc, #124]	; (8001590 <__NVIC_SetPriority+0xd4>)
 8001512:	1dfb      	adds	r3, r7, #7
 8001514:	781b      	ldrb	r3, [r3, #0]
 8001516:	b25b      	sxtb	r3, r3
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	430a      	orrs	r2, r1
 800151c:	33c0      	adds	r3, #192	; 0xc0
 800151e:	009b      	lsls	r3, r3, #2
 8001520:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001522:	e031      	b.n	8001588 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001524:	4a1b      	ldr	r2, [pc, #108]	; (8001594 <__NVIC_SetPriority+0xd8>)
 8001526:	1dfb      	adds	r3, r7, #7
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	0019      	movs	r1, r3
 800152c:	230f      	movs	r3, #15
 800152e:	400b      	ands	r3, r1
 8001530:	3b08      	subs	r3, #8
 8001532:	089b      	lsrs	r3, r3, #2
 8001534:	3306      	adds	r3, #6
 8001536:	009b      	lsls	r3, r3, #2
 8001538:	18d3      	adds	r3, r2, r3
 800153a:	3304      	adds	r3, #4
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	1dfa      	adds	r2, r7, #7
 8001540:	7812      	ldrb	r2, [r2, #0]
 8001542:	0011      	movs	r1, r2
 8001544:	2203      	movs	r2, #3
 8001546:	400a      	ands	r2, r1
 8001548:	00d2      	lsls	r2, r2, #3
 800154a:	21ff      	movs	r1, #255	; 0xff
 800154c:	4091      	lsls	r1, r2
 800154e:	000a      	movs	r2, r1
 8001550:	43d2      	mvns	r2, r2
 8001552:	401a      	ands	r2, r3
 8001554:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001556:	683b      	ldr	r3, [r7, #0]
 8001558:	019b      	lsls	r3, r3, #6
 800155a:	22ff      	movs	r2, #255	; 0xff
 800155c:	401a      	ands	r2, r3
 800155e:	1dfb      	adds	r3, r7, #7
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	0018      	movs	r0, r3
 8001564:	2303      	movs	r3, #3
 8001566:	4003      	ands	r3, r0
 8001568:	00db      	lsls	r3, r3, #3
 800156a:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800156c:	4809      	ldr	r0, [pc, #36]	; (8001594 <__NVIC_SetPriority+0xd8>)
 800156e:	1dfb      	adds	r3, r7, #7
 8001570:	781b      	ldrb	r3, [r3, #0]
 8001572:	001c      	movs	r4, r3
 8001574:	230f      	movs	r3, #15
 8001576:	4023      	ands	r3, r4
 8001578:	3b08      	subs	r3, #8
 800157a:	089b      	lsrs	r3, r3, #2
 800157c:	430a      	orrs	r2, r1
 800157e:	3306      	adds	r3, #6
 8001580:	009b      	lsls	r3, r3, #2
 8001582:	18c3      	adds	r3, r0, r3
 8001584:	3304      	adds	r3, #4
 8001586:	601a      	str	r2, [r3, #0]
}
 8001588:	46c0      	nop			; (mov r8, r8)
 800158a:	46bd      	mov	sp, r7
 800158c:	b003      	add	sp, #12
 800158e:	bd90      	pop	{r4, r7, pc}
 8001590:	e000e100 	.word	0xe000e100
 8001594:	e000ed00 	.word	0xe000ed00

08001598 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b082      	sub	sp, #8
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	1e5a      	subs	r2, r3, #1
 80015a4:	2380      	movs	r3, #128	; 0x80
 80015a6:	045b      	lsls	r3, r3, #17
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d301      	bcc.n	80015b0 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015ac:	2301      	movs	r3, #1
 80015ae:	e010      	b.n	80015d2 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015b0:	4b0a      	ldr	r3, [pc, #40]	; (80015dc <SysTick_Config+0x44>)
 80015b2:	687a      	ldr	r2, [r7, #4]
 80015b4:	3a01      	subs	r2, #1
 80015b6:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015b8:	2301      	movs	r3, #1
 80015ba:	425b      	negs	r3, r3
 80015bc:	2103      	movs	r1, #3
 80015be:	0018      	movs	r0, r3
 80015c0:	f7ff ff7c 	bl	80014bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015c4:	4b05      	ldr	r3, [pc, #20]	; (80015dc <SysTick_Config+0x44>)
 80015c6:	2200      	movs	r2, #0
 80015c8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015ca:	4b04      	ldr	r3, [pc, #16]	; (80015dc <SysTick_Config+0x44>)
 80015cc:	2207      	movs	r2, #7
 80015ce:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80015d0:	2300      	movs	r3, #0
}
 80015d2:	0018      	movs	r0, r3
 80015d4:	46bd      	mov	sp, r7
 80015d6:	b002      	add	sp, #8
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	46c0      	nop			; (mov r8, r8)
 80015dc:	e000e010 	.word	0xe000e010

080015e0 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b084      	sub	sp, #16
 80015e4:	af00      	add	r7, sp, #0
 80015e6:	60b9      	str	r1, [r7, #8]
 80015e8:	607a      	str	r2, [r7, #4]
 80015ea:	210f      	movs	r1, #15
 80015ec:	187b      	adds	r3, r7, r1
 80015ee:	1c02      	adds	r2, r0, #0
 80015f0:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80015f2:	68ba      	ldr	r2, [r7, #8]
 80015f4:	187b      	adds	r3, r7, r1
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b25b      	sxtb	r3, r3
 80015fa:	0011      	movs	r1, r2
 80015fc:	0018      	movs	r0, r3
 80015fe:	f7ff ff5d 	bl	80014bc <__NVIC_SetPriority>
}
 8001602:	46c0      	nop			; (mov r8, r8)
 8001604:	46bd      	mov	sp, r7
 8001606:	b004      	add	sp, #16
 8001608:	bd80      	pop	{r7, pc}

0800160a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800160a:	b580      	push	{r7, lr}
 800160c:	b082      	sub	sp, #8
 800160e:	af00      	add	r7, sp, #0
 8001610:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	0018      	movs	r0, r3
 8001616:	f7ff ffbf 	bl	8001598 <SysTick_Config>
 800161a:	0003      	movs	r3, r0
}
 800161c:	0018      	movs	r0, r3
 800161e:	46bd      	mov	sp, r7
 8001620:	b002      	add	sp, #8
 8001622:	bd80      	pop	{r7, pc}

08001624 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	6078      	str	r0, [r7, #4]
 800162c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800162e:	2300      	movs	r3, #0
 8001630:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001632:	e14d      	b.n	80018d0 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	2101      	movs	r1, #1
 800163a:	693a      	ldr	r2, [r7, #16]
 800163c:	4091      	lsls	r1, r2
 800163e:	000a      	movs	r2, r1
 8001640:	4013      	ands	r3, r2
 8001642:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2b00      	cmp	r3, #0
 8001648:	d100      	bne.n	800164c <HAL_GPIO_Init+0x28>
 800164a:	e13e      	b.n	80018ca <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 800164c:	683b      	ldr	r3, [r7, #0]
 800164e:	685b      	ldr	r3, [r3, #4]
 8001650:	2b02      	cmp	r3, #2
 8001652:	d003      	beq.n	800165c <HAL_GPIO_Init+0x38>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	2b12      	cmp	r3, #18
 800165a:	d125      	bne.n	80016a8 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 800165c:	693b      	ldr	r3, [r7, #16]
 800165e:	08da      	lsrs	r2, r3, #3
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	3208      	adds	r2, #8
 8001664:	0092      	lsls	r2, r2, #2
 8001666:	58d3      	ldr	r3, [r2, r3]
 8001668:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 800166a:	693b      	ldr	r3, [r7, #16]
 800166c:	2207      	movs	r2, #7
 800166e:	4013      	ands	r3, r2
 8001670:	009b      	lsls	r3, r3, #2
 8001672:	220f      	movs	r2, #15
 8001674:	409a      	lsls	r2, r3
 8001676:	0013      	movs	r3, r2
 8001678:	43da      	mvns	r2, r3
 800167a:	697b      	ldr	r3, [r7, #20]
 800167c:	4013      	ands	r3, r2
 800167e:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	691b      	ldr	r3, [r3, #16]
 8001684:	220f      	movs	r2, #15
 8001686:	401a      	ands	r2, r3
 8001688:	693b      	ldr	r3, [r7, #16]
 800168a:	2107      	movs	r1, #7
 800168c:	400b      	ands	r3, r1
 800168e:	009b      	lsls	r3, r3, #2
 8001690:	409a      	lsls	r2, r3
 8001692:	0013      	movs	r3, r2
 8001694:	697a      	ldr	r2, [r7, #20]
 8001696:	4313      	orrs	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 800169a:	693b      	ldr	r3, [r7, #16]
 800169c:	08da      	lsrs	r2, r3, #3
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	3208      	adds	r2, #8
 80016a2:	0092      	lsls	r2, r2, #2
 80016a4:	6979      	ldr	r1, [r7, #20]
 80016a6:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80016ae:	693b      	ldr	r3, [r7, #16]
 80016b0:	005b      	lsls	r3, r3, #1
 80016b2:	2203      	movs	r2, #3
 80016b4:	409a      	lsls	r2, r3
 80016b6:	0013      	movs	r3, r2
 80016b8:	43da      	mvns	r2, r3
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	4013      	ands	r3, r2
 80016be:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80016c0:	683b      	ldr	r3, [r7, #0]
 80016c2:	685b      	ldr	r3, [r3, #4]
 80016c4:	2203      	movs	r2, #3
 80016c6:	401a      	ands	r2, r3
 80016c8:	693b      	ldr	r3, [r7, #16]
 80016ca:	005b      	lsls	r3, r3, #1
 80016cc:	409a      	lsls	r2, r3
 80016ce:	0013      	movs	r3, r2
 80016d0:	697a      	ldr	r2, [r7, #20]
 80016d2:	4313      	orrs	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	697a      	ldr	r2, [r7, #20]
 80016da:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016dc:	683b      	ldr	r3, [r7, #0]
 80016de:	685b      	ldr	r3, [r3, #4]
 80016e0:	2b01      	cmp	r3, #1
 80016e2:	d00b      	beq.n	80016fc <HAL_GPIO_Init+0xd8>
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b02      	cmp	r3, #2
 80016ea:	d007      	beq.n	80016fc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80016f0:	2b11      	cmp	r3, #17
 80016f2:	d003      	beq.n	80016fc <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80016f4:	683b      	ldr	r3, [r7, #0]
 80016f6:	685b      	ldr	r3, [r3, #4]
 80016f8:	2b12      	cmp	r3, #18
 80016fa:	d130      	bne.n	800175e <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	689b      	ldr	r3, [r3, #8]
 8001700:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001702:	693b      	ldr	r3, [r7, #16]
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	2203      	movs	r2, #3
 8001708:	409a      	lsls	r2, r3
 800170a:	0013      	movs	r3, r2
 800170c:	43da      	mvns	r2, r3
 800170e:	697b      	ldr	r3, [r7, #20]
 8001710:	4013      	ands	r3, r2
 8001712:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	68da      	ldr	r2, [r3, #12]
 8001718:	693b      	ldr	r3, [r7, #16]
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	409a      	lsls	r2, r3
 800171e:	0013      	movs	r3, r2
 8001720:	697a      	ldr	r2, [r7, #20]
 8001722:	4313      	orrs	r3, r2
 8001724:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	697a      	ldr	r2, [r7, #20]
 800172a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	685b      	ldr	r3, [r3, #4]
 8001730:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001732:	2201      	movs	r2, #1
 8001734:	693b      	ldr	r3, [r7, #16]
 8001736:	409a      	lsls	r2, r3
 8001738:	0013      	movs	r3, r2
 800173a:	43da      	mvns	r2, r3
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	4013      	ands	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001742:	683b      	ldr	r3, [r7, #0]
 8001744:	685b      	ldr	r3, [r3, #4]
 8001746:	091b      	lsrs	r3, r3, #4
 8001748:	2201      	movs	r2, #1
 800174a:	401a      	ands	r2, r3
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	409a      	lsls	r2, r3
 8001750:	0013      	movs	r3, r2
 8001752:	697a      	ldr	r2, [r7, #20]
 8001754:	4313      	orrs	r3, r2
 8001756:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	697a      	ldr	r2, [r7, #20]
 800175c:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	2b03      	cmp	r3, #3
 8001764:	d017      	beq.n	8001796 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	68db      	ldr	r3, [r3, #12]
 800176a:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800176c:	693b      	ldr	r3, [r7, #16]
 800176e:	005b      	lsls	r3, r3, #1
 8001770:	2203      	movs	r2, #3
 8001772:	409a      	lsls	r2, r3
 8001774:	0013      	movs	r3, r2
 8001776:	43da      	mvns	r2, r3
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4013      	ands	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 800177e:	683b      	ldr	r3, [r7, #0]
 8001780:	689a      	ldr	r2, [r3, #8]
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	409a      	lsls	r2, r3
 8001788:	0013      	movs	r3, r2
 800178a:	697a      	ldr	r2, [r7, #20]
 800178c:	4313      	orrs	r3, r2
 800178e:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	697a      	ldr	r2, [r7, #20]
 8001794:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001796:	683b      	ldr	r3, [r7, #0]
 8001798:	685a      	ldr	r2, [r3, #4]
 800179a:	2380      	movs	r3, #128	; 0x80
 800179c:	055b      	lsls	r3, r3, #21
 800179e:	4013      	ands	r3, r2
 80017a0:	d100      	bne.n	80017a4 <HAL_GPIO_Init+0x180>
 80017a2:	e092      	b.n	80018ca <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 80017a4:	4a50      	ldr	r2, [pc, #320]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 80017a6:	693b      	ldr	r3, [r7, #16]
 80017a8:	089b      	lsrs	r3, r3, #2
 80017aa:	3318      	adds	r3, #24
 80017ac:	009b      	lsls	r3, r3, #2
 80017ae:	589b      	ldr	r3, [r3, r2]
 80017b0:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	2203      	movs	r2, #3
 80017b6:	4013      	ands	r3, r2
 80017b8:	00db      	lsls	r3, r3, #3
 80017ba:	220f      	movs	r2, #15
 80017bc:	409a      	lsls	r2, r3
 80017be:	0013      	movs	r3, r2
 80017c0:	43da      	mvns	r2, r3
 80017c2:	697b      	ldr	r3, [r7, #20]
 80017c4:	4013      	ands	r3, r2
 80017c6:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 80017c8:	687a      	ldr	r2, [r7, #4]
 80017ca:	23a0      	movs	r3, #160	; 0xa0
 80017cc:	05db      	lsls	r3, r3, #23
 80017ce:	429a      	cmp	r2, r3
 80017d0:	d013      	beq.n	80017fa <HAL_GPIO_Init+0x1d6>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	4a45      	ldr	r2, [pc, #276]	; (80018ec <HAL_GPIO_Init+0x2c8>)
 80017d6:	4293      	cmp	r3, r2
 80017d8:	d00d      	beq.n	80017f6 <HAL_GPIO_Init+0x1d2>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	4a44      	ldr	r2, [pc, #272]	; (80018f0 <HAL_GPIO_Init+0x2cc>)
 80017de:	4293      	cmp	r3, r2
 80017e0:	d007      	beq.n	80017f2 <HAL_GPIO_Init+0x1ce>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4a43      	ldr	r2, [pc, #268]	; (80018f4 <HAL_GPIO_Init+0x2d0>)
 80017e6:	4293      	cmp	r3, r2
 80017e8:	d101      	bne.n	80017ee <HAL_GPIO_Init+0x1ca>
 80017ea:	2305      	movs	r3, #5
 80017ec:	e006      	b.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017ee:	2306      	movs	r3, #6
 80017f0:	e004      	b.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017f2:	2302      	movs	r3, #2
 80017f4:	e002      	b.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017f6:	2301      	movs	r3, #1
 80017f8:	e000      	b.n	80017fc <HAL_GPIO_Init+0x1d8>
 80017fa:	2300      	movs	r3, #0
 80017fc:	693a      	ldr	r2, [r7, #16]
 80017fe:	2103      	movs	r1, #3
 8001800:	400a      	ands	r2, r1
 8001802:	00d2      	lsls	r2, r2, #3
 8001804:	4093      	lsls	r3, r2
 8001806:	697a      	ldr	r2, [r7, #20]
 8001808:	4313      	orrs	r3, r2
 800180a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 800180c:	4936      	ldr	r1, [pc, #216]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 800180e:	693b      	ldr	r3, [r7, #16]
 8001810:	089b      	lsrs	r3, r3, #2
 8001812:	3318      	adds	r3, #24
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	697a      	ldr	r2, [r7, #20]
 8001818:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 800181a:	4a33      	ldr	r2, [pc, #204]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 800181c:	2380      	movs	r3, #128	; 0x80
 800181e:	58d3      	ldr	r3, [r2, r3]
 8001820:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	43da      	mvns	r2, r3
 8001826:	697b      	ldr	r3, [r7, #20]
 8001828:	4013      	ands	r3, r2
 800182a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800182c:	683b      	ldr	r3, [r7, #0]
 800182e:	685a      	ldr	r2, [r3, #4]
 8001830:	2380      	movs	r3, #128	; 0x80
 8001832:	025b      	lsls	r3, r3, #9
 8001834:	4013      	ands	r3, r2
 8001836:	d003      	beq.n	8001840 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001838:	697a      	ldr	r2, [r7, #20]
 800183a:	68fb      	ldr	r3, [r7, #12]
 800183c:	4313      	orrs	r3, r2
 800183e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001840:	4929      	ldr	r1, [pc, #164]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 8001842:	2280      	movs	r2, #128	; 0x80
 8001844:	697b      	ldr	r3, [r7, #20]
 8001846:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001848:	4a27      	ldr	r2, [pc, #156]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 800184a:	2384      	movs	r3, #132	; 0x84
 800184c:	58d3      	ldr	r3, [r2, r3]
 800184e:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	43da      	mvns	r2, r3
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	4013      	ands	r3, r2
 8001858:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	685a      	ldr	r2, [r3, #4]
 800185e:	2380      	movs	r3, #128	; 0x80
 8001860:	029b      	lsls	r3, r3, #10
 8001862:	4013      	ands	r3, r2
 8001864:	d003      	beq.n	800186e <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001866:	697a      	ldr	r2, [r7, #20]
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	4313      	orrs	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 800186e:	491e      	ldr	r1, [pc, #120]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 8001870:	2284      	movs	r2, #132	; 0x84
 8001872:	697b      	ldr	r3, [r7, #20]
 8001874:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001876:	4b1c      	ldr	r3, [pc, #112]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	43da      	mvns	r2, r3
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4013      	ands	r3, r2
 8001884:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	2380      	movs	r3, #128	; 0x80
 800188c:	035b      	lsls	r3, r3, #13
 800188e:	4013      	ands	r3, r2
 8001890:	d003      	beq.n	800189a <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001892:	697a      	ldr	r2, [r7, #20]
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	4313      	orrs	r3, r2
 8001898:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 800189a:	4b13      	ldr	r3, [pc, #76]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 800189c:	697a      	ldr	r2, [r7, #20]
 800189e:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 80018a0:	4b11      	ldr	r3, [pc, #68]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 80018a2:	685b      	ldr	r3, [r3, #4]
 80018a4:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	43da      	mvns	r2, r3
 80018aa:	697b      	ldr	r3, [r7, #20]
 80018ac:	4013      	ands	r3, r2
 80018ae:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80018b0:	683b      	ldr	r3, [r7, #0]
 80018b2:	685a      	ldr	r2, [r3, #4]
 80018b4:	2380      	movs	r3, #128	; 0x80
 80018b6:	039b      	lsls	r3, r3, #14
 80018b8:	4013      	ands	r3, r2
 80018ba:	d003      	beq.n	80018c4 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 80018bc:	697a      	ldr	r2, [r7, #20]
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 80018c4:	4b08      	ldr	r3, [pc, #32]	; (80018e8 <HAL_GPIO_Init+0x2c4>)
 80018c6:	697a      	ldr	r2, [r7, #20]
 80018c8:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 80018ca:	693b      	ldr	r3, [r7, #16]
 80018cc:	3301      	adds	r3, #1
 80018ce:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 80018d0:	683b      	ldr	r3, [r7, #0]
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	693b      	ldr	r3, [r7, #16]
 80018d6:	40da      	lsrs	r2, r3
 80018d8:	1e13      	subs	r3, r2, #0
 80018da:	d000      	beq.n	80018de <HAL_GPIO_Init+0x2ba>
 80018dc:	e6aa      	b.n	8001634 <HAL_GPIO_Init+0x10>
  }
}
 80018de:	46c0      	nop			; (mov r8, r8)
 80018e0:	46c0      	nop			; (mov r8, r8)
 80018e2:	46bd      	mov	sp, r7
 80018e4:	b006      	add	sp, #24
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	40021800 	.word	0x40021800
 80018ec:	50000400 	.word	0x50000400
 80018f0:	50000800 	.word	0x50000800
 80018f4:	50001400 	.word	0x50001400

080018f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
 8001900:	0008      	movs	r0, r1
 8001902:	0011      	movs	r1, r2
 8001904:	1cbb      	adds	r3, r7, #2
 8001906:	1c02      	adds	r2, r0, #0
 8001908:	801a      	strh	r2, [r3, #0]
 800190a:	1c7b      	adds	r3, r7, #1
 800190c:	1c0a      	adds	r2, r1, #0
 800190e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001910:	1c7b      	adds	r3, r7, #1
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d004      	beq.n	8001922 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001918:	1cbb      	adds	r3, r7, #2
 800191a:	881a      	ldrh	r2, [r3, #0]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001920:	e003      	b.n	800192a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001922:	1cbb      	adds	r3, r7, #2
 8001924:	881a      	ldrh	r2, [r3, #0]
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	629a      	str	r2, [r3, #40]	; 0x28
}
 800192a:	46c0      	nop			; (mov r8, r8)
 800192c:	46bd      	mov	sp, r7
 800192e:	b002      	add	sp, #8
 8001930:	bd80      	pop	{r7, pc}
	...

08001934 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	b086      	sub	sp, #24
 8001938:	af00      	add	r7, sp, #0
 800193a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2b00      	cmp	r3, #0
 8001940:	d101      	bne.n	8001946 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e1d0      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	2201      	movs	r2, #1
 800194c:	4013      	ands	r3, r2
 800194e:	d100      	bne.n	8001952 <HAL_RCC_OscConfig+0x1e>
 8001950:	e069      	b.n	8001a26 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001952:	4bc8      	ldr	r3, [pc, #800]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	2238      	movs	r2, #56	; 0x38
 8001958:	4013      	ands	r3, r2
 800195a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 800195c:	697b      	ldr	r3, [r7, #20]
 800195e:	2b08      	cmp	r3, #8
 8001960:	d105      	bne.n	800196e <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	685b      	ldr	r3, [r3, #4]
 8001966:	2b00      	cmp	r3, #0
 8001968:	d15d      	bne.n	8001a26 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 800196a:	2301      	movs	r3, #1
 800196c:	e1bc      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	685a      	ldr	r2, [r3, #4]
 8001972:	2380      	movs	r3, #128	; 0x80
 8001974:	025b      	lsls	r3, r3, #9
 8001976:	429a      	cmp	r2, r3
 8001978:	d107      	bne.n	800198a <HAL_RCC_OscConfig+0x56>
 800197a:	4bbe      	ldr	r3, [pc, #760]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 800197c:	681a      	ldr	r2, [r3, #0]
 800197e:	4bbd      	ldr	r3, [pc, #756]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001980:	2180      	movs	r1, #128	; 0x80
 8001982:	0249      	lsls	r1, r1, #9
 8001984:	430a      	orrs	r2, r1
 8001986:	601a      	str	r2, [r3, #0]
 8001988:	e020      	b.n	80019cc <HAL_RCC_OscConfig+0x98>
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	685a      	ldr	r2, [r3, #4]
 800198e:	23a0      	movs	r3, #160	; 0xa0
 8001990:	02db      	lsls	r3, r3, #11
 8001992:	429a      	cmp	r2, r3
 8001994:	d10e      	bne.n	80019b4 <HAL_RCC_OscConfig+0x80>
 8001996:	4bb7      	ldr	r3, [pc, #732]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001998:	681a      	ldr	r2, [r3, #0]
 800199a:	4bb6      	ldr	r3, [pc, #728]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 800199c:	2180      	movs	r1, #128	; 0x80
 800199e:	02c9      	lsls	r1, r1, #11
 80019a0:	430a      	orrs	r2, r1
 80019a2:	601a      	str	r2, [r3, #0]
 80019a4:	4bb3      	ldr	r3, [pc, #716]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019a6:	681a      	ldr	r2, [r3, #0]
 80019a8:	4bb2      	ldr	r3, [pc, #712]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019aa:	2180      	movs	r1, #128	; 0x80
 80019ac:	0249      	lsls	r1, r1, #9
 80019ae:	430a      	orrs	r2, r1
 80019b0:	601a      	str	r2, [r3, #0]
 80019b2:	e00b      	b.n	80019cc <HAL_RCC_OscConfig+0x98>
 80019b4:	4baf      	ldr	r3, [pc, #700]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019b6:	681a      	ldr	r2, [r3, #0]
 80019b8:	4bae      	ldr	r3, [pc, #696]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019ba:	49af      	ldr	r1, [pc, #700]	; (8001c78 <HAL_RCC_OscConfig+0x344>)
 80019bc:	400a      	ands	r2, r1
 80019be:	601a      	str	r2, [r3, #0]
 80019c0:	4bac      	ldr	r3, [pc, #688]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019c2:	681a      	ldr	r2, [r3, #0]
 80019c4:	4bab      	ldr	r3, [pc, #684]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019c6:	49ad      	ldr	r1, [pc, #692]	; (8001c7c <HAL_RCC_OscConfig+0x348>)
 80019c8:	400a      	ands	r2, r1
 80019ca:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	685b      	ldr	r3, [r3, #4]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d014      	beq.n	80019fe <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019d4:	f7ff fd44 	bl	8001460 <HAL_GetTick>
 80019d8:	0003      	movs	r3, r0
 80019da:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 80019de:	f7ff fd3f 	bl	8001460 <HAL_GetTick>
 80019e2:	0002      	movs	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b64      	cmp	r3, #100	; 0x64
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e17b      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019f0:	4ba0      	ldr	r3, [pc, #640]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 80019f2:	681a      	ldr	r2, [r3, #0]
 80019f4:	2380      	movs	r3, #128	; 0x80
 80019f6:	029b      	lsls	r3, r3, #10
 80019f8:	4013      	ands	r3, r2
 80019fa:	d0f0      	beq.n	80019de <HAL_RCC_OscConfig+0xaa>
 80019fc:	e013      	b.n	8001a26 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019fe:	f7ff fd2f 	bl	8001460 <HAL_GetTick>
 8001a02:	0003      	movs	r3, r0
 8001a04:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a06:	e008      	b.n	8001a1a <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001a08:	f7ff fd2a 	bl	8001460 <HAL_GetTick>
 8001a0c:	0002      	movs	r2, r0
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	1ad3      	subs	r3, r2, r3
 8001a12:	2b64      	cmp	r3, #100	; 0x64
 8001a14:	d901      	bls.n	8001a1a <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001a16:	2303      	movs	r3, #3
 8001a18:	e166      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a1a:	4b96      	ldr	r3, [pc, #600]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a1c:	681a      	ldr	r2, [r3, #0]
 8001a1e:	2380      	movs	r3, #128	; 0x80
 8001a20:	029b      	lsls	r3, r3, #10
 8001a22:	4013      	ands	r3, r2
 8001a24:	d1f0      	bne.n	8001a08 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	2202      	movs	r2, #2
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	d100      	bne.n	8001a32 <HAL_RCC_OscConfig+0xfe>
 8001a30:	e086      	b.n	8001b40 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001a32:	4b90      	ldr	r3, [pc, #576]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	2238      	movs	r2, #56	; 0x38
 8001a38:	4013      	ands	r3, r2
 8001a3a:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a3c:	697b      	ldr	r3, [r7, #20]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d12f      	bne.n	8001aa2 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e14c      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b89      	ldr	r3, [pc, #548]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	4a8b      	ldr	r2, [pc, #556]	; (8001c80 <HAL_RCC_OscConfig+0x34c>)
 8001a54:	4013      	ands	r3, r2
 8001a56:	0019      	movs	r1, r3
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	695b      	ldr	r3, [r3, #20]
 8001a5c:	021a      	lsls	r2, r3, #8
 8001a5e:	4b85      	ldr	r3, [pc, #532]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a60:	430a      	orrs	r2, r1
 8001a62:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d112      	bne.n	8001a90 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001a6a:	4b82      	ldr	r3, [pc, #520]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a85      	ldr	r2, [pc, #532]	; (8001c84 <HAL_RCC_OscConfig+0x350>)
 8001a70:	4013      	ands	r3, r2
 8001a72:	0019      	movs	r1, r3
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	691a      	ldr	r2, [r3, #16]
 8001a78:	4b7e      	ldr	r3, [pc, #504]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a7a:	430a      	orrs	r2, r1
 8001a7c:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001a7e:	4b7d      	ldr	r3, [pc, #500]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	0adb      	lsrs	r3, r3, #11
 8001a84:	2207      	movs	r2, #7
 8001a86:	4013      	ands	r3, r2
 8001a88:	4a7f      	ldr	r2, [pc, #508]	; (8001c88 <HAL_RCC_OscConfig+0x354>)
 8001a8a:	40da      	lsrs	r2, r3
 8001a8c:	4b7f      	ldr	r3, [pc, #508]	; (8001c8c <HAL_RCC_OscConfig+0x358>)
 8001a8e:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001a90:	4b7f      	ldr	r3, [pc, #508]	; (8001c90 <HAL_RCC_OscConfig+0x35c>)
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	0018      	movs	r0, r3
 8001a96:	f7ff fc87 	bl	80013a8 <HAL_InitTick>
 8001a9a:	1e03      	subs	r3, r0, #0
 8001a9c:	d050      	beq.n	8001b40 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001a9e:	2301      	movs	r3, #1
 8001aa0:	e122      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	68db      	ldr	r3, [r3, #12]
 8001aa6:	2b00      	cmp	r3, #0
 8001aa8:	d030      	beq.n	8001b0c <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001aaa:	4b72      	ldr	r3, [pc, #456]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4a75      	ldr	r2, [pc, #468]	; (8001c84 <HAL_RCC_OscConfig+0x350>)
 8001ab0:	4013      	ands	r3, r2
 8001ab2:	0019      	movs	r1, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	691a      	ldr	r2, [r3, #16]
 8001ab8:	4b6e      	ldr	r3, [pc, #440]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001aba:	430a      	orrs	r2, r1
 8001abc:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8001abe:	4b6d      	ldr	r3, [pc, #436]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001ac0:	681a      	ldr	r2, [r3, #0]
 8001ac2:	4b6c      	ldr	r3, [pc, #432]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001ac4:	2180      	movs	r1, #128	; 0x80
 8001ac6:	0049      	lsls	r1, r1, #1
 8001ac8:	430a      	orrs	r2, r1
 8001aca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001acc:	f7ff fcc8 	bl	8001460 <HAL_GetTick>
 8001ad0:	0003      	movs	r3, r0
 8001ad2:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ad4:	e008      	b.n	8001ae8 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001ad6:	f7ff fcc3 	bl	8001460 <HAL_GetTick>
 8001ada:	0002      	movs	r2, r0
 8001adc:	693b      	ldr	r3, [r7, #16]
 8001ade:	1ad3      	subs	r3, r2, r3
 8001ae0:	2b02      	cmp	r3, #2
 8001ae2:	d901      	bls.n	8001ae8 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ae4:	2303      	movs	r3, #3
 8001ae6:	e0ff      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ae8:	4b62      	ldr	r3, [pc, #392]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	00db      	lsls	r3, r3, #3
 8001af0:	4013      	ands	r3, r2
 8001af2:	d0f0      	beq.n	8001ad6 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001af4:	4b5f      	ldr	r3, [pc, #380]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001af6:	685b      	ldr	r3, [r3, #4]
 8001af8:	4a61      	ldr	r2, [pc, #388]	; (8001c80 <HAL_RCC_OscConfig+0x34c>)
 8001afa:	4013      	ands	r3, r2
 8001afc:	0019      	movs	r1, r3
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	695b      	ldr	r3, [r3, #20]
 8001b02:	021a      	lsls	r2, r3, #8
 8001b04:	4b5b      	ldr	r3, [pc, #364]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b06:	430a      	orrs	r2, r1
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	e019      	b.n	8001b40 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8001b0c:	4b59      	ldr	r3, [pc, #356]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	4b58      	ldr	r3, [pc, #352]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b12:	4960      	ldr	r1, [pc, #384]	; (8001c94 <HAL_RCC_OscConfig+0x360>)
 8001b14:	400a      	ands	r2, r1
 8001b16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b18:	f7ff fca2 	bl	8001460 <HAL_GetTick>
 8001b1c:	0003      	movs	r3, r0
 8001b1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b20:	e008      	b.n	8001b34 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8001b22:	f7ff fc9d 	bl	8001460 <HAL_GetTick>
 8001b26:	0002      	movs	r2, r0
 8001b28:	693b      	ldr	r3, [r7, #16]
 8001b2a:	1ad3      	subs	r3, r2, r3
 8001b2c:	2b02      	cmp	r3, #2
 8001b2e:	d901      	bls.n	8001b34 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8001b30:	2303      	movs	r3, #3
 8001b32:	e0d9      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001b34:	4b4f      	ldr	r3, [pc, #316]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b36:	681a      	ldr	r2, [r3, #0]
 8001b38:	2380      	movs	r3, #128	; 0x80
 8001b3a:	00db      	lsls	r3, r3, #3
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	d1f0      	bne.n	8001b22 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	2208      	movs	r2, #8
 8001b46:	4013      	ands	r3, r2
 8001b48:	d042      	beq.n	8001bd0 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001b4a:	4b4a      	ldr	r3, [pc, #296]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b4c:	689b      	ldr	r3, [r3, #8]
 8001b4e:	2238      	movs	r2, #56	; 0x38
 8001b50:	4013      	ands	r3, r2
 8001b52:	2b18      	cmp	r3, #24
 8001b54:	d105      	bne.n	8001b62 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	699b      	ldr	r3, [r3, #24]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d138      	bne.n	8001bd0 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e0c2      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	699b      	ldr	r3, [r3, #24]
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d019      	beq.n	8001b9e <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001b6a:	4b42      	ldr	r3, [pc, #264]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b6c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001b6e:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b70:	2101      	movs	r1, #1
 8001b72:	430a      	orrs	r2, r1
 8001b74:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b76:	f7ff fc73 	bl	8001460 <HAL_GetTick>
 8001b7a:	0003      	movs	r3, r0
 8001b7c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b7e:	e008      	b.n	8001b92 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001b80:	f7ff fc6e 	bl	8001460 <HAL_GetTick>
 8001b84:	0002      	movs	r2, r0
 8001b86:	693b      	ldr	r3, [r7, #16]
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	2b02      	cmp	r3, #2
 8001b8c:	d901      	bls.n	8001b92 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 8001b8e:	2303      	movs	r3, #3
 8001b90:	e0aa      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001b92:	4b38      	ldr	r3, [pc, #224]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001b94:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001b96:	2202      	movs	r2, #2
 8001b98:	4013      	ands	r3, r2
 8001b9a:	d0f1      	beq.n	8001b80 <HAL_RCC_OscConfig+0x24c>
 8001b9c:	e018      	b.n	8001bd0 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001b9e:	4b35      	ldr	r3, [pc, #212]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001ba0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001ba2:	4b34      	ldr	r3, [pc, #208]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001ba4:	2101      	movs	r1, #1
 8001ba6:	438a      	bics	r2, r1
 8001ba8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001baa:	f7ff fc59 	bl	8001460 <HAL_GetTick>
 8001bae:	0003      	movs	r3, r0
 8001bb0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001bb2:	e008      	b.n	8001bc6 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8001bb4:	f7ff fc54 	bl	8001460 <HAL_GetTick>
 8001bb8:	0002      	movs	r2, r0
 8001bba:	693b      	ldr	r3, [r7, #16]
 8001bbc:	1ad3      	subs	r3, r2, r3
 8001bbe:	2b02      	cmp	r3, #2
 8001bc0:	d901      	bls.n	8001bc6 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8001bc2:	2303      	movs	r3, #3
 8001bc4:	e090      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 8001bc6:	4b2b      	ldr	r3, [pc, #172]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001bc8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001bca:	2202      	movs	r2, #2
 8001bcc:	4013      	ands	r3, r2
 8001bce:	d1f1      	bne.n	8001bb4 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2204      	movs	r2, #4
 8001bd6:	4013      	ands	r3, r2
 8001bd8:	d100      	bne.n	8001bdc <HAL_RCC_OscConfig+0x2a8>
 8001bda:	e084      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001bdc:	230f      	movs	r3, #15
 8001bde:	18fb      	adds	r3, r7, r3
 8001be0:	2200      	movs	r2, #0
 8001be2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001be4:	4b23      	ldr	r3, [pc, #140]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2238      	movs	r2, #56	; 0x38
 8001bea:	4013      	ands	r3, r2
 8001bec:	2b20      	cmp	r3, #32
 8001bee:	d106      	bne.n	8001bfe <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	689b      	ldr	r3, [r3, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d000      	beq.n	8001bfa <HAL_RCC_OscConfig+0x2c6>
 8001bf8:	e075      	b.n	8001ce6 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 8001bfa:	2301      	movs	r3, #1
 8001bfc:	e074      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b01      	cmp	r3, #1
 8001c04:	d106      	bne.n	8001c14 <HAL_RCC_OscConfig+0x2e0>
 8001c06:	4b1b      	ldr	r3, [pc, #108]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c08:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c0a:	4b1a      	ldr	r3, [pc, #104]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c0c:	2101      	movs	r1, #1
 8001c0e:	430a      	orrs	r2, r1
 8001c10:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c12:	e01c      	b.n	8001c4e <HAL_RCC_OscConfig+0x31a>
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	2b05      	cmp	r3, #5
 8001c1a:	d10c      	bne.n	8001c36 <HAL_RCC_OscConfig+0x302>
 8001c1c:	4b15      	ldr	r3, [pc, #84]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c1e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c20:	4b14      	ldr	r3, [pc, #80]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c22:	2104      	movs	r1, #4
 8001c24:	430a      	orrs	r2, r1
 8001c26:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c28:	4b12      	ldr	r3, [pc, #72]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c2a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c2c:	4b11      	ldr	r3, [pc, #68]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c2e:	2101      	movs	r1, #1
 8001c30:	430a      	orrs	r2, r1
 8001c32:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c34:	e00b      	b.n	8001c4e <HAL_RCC_OscConfig+0x31a>
 8001c36:	4b0f      	ldr	r3, [pc, #60]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c38:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c3a:	4b0e      	ldr	r3, [pc, #56]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c3c:	2101      	movs	r1, #1
 8001c3e:	438a      	bics	r2, r1
 8001c40:	65da      	str	r2, [r3, #92]	; 0x5c
 8001c42:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c44:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001c46:	4b0b      	ldr	r3, [pc, #44]	; (8001c74 <HAL_RCC_OscConfig+0x340>)
 8001c48:	2104      	movs	r1, #4
 8001c4a:	438a      	bics	r2, r1
 8001c4c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d028      	beq.n	8001ca8 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c56:	f7ff fc03 	bl	8001460 <HAL_GetTick>
 8001c5a:	0003      	movs	r3, r0
 8001c5c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c5e:	e01d      	b.n	8001c9c <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c60:	f7ff fbfe 	bl	8001460 <HAL_GetTick>
 8001c64:	0002      	movs	r2, r0
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	1ad3      	subs	r3, r2, r3
 8001c6a:	4a0b      	ldr	r2, [pc, #44]	; (8001c98 <HAL_RCC_OscConfig+0x364>)
 8001c6c:	4293      	cmp	r3, r2
 8001c6e:	d915      	bls.n	8001c9c <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 8001c70:	2303      	movs	r3, #3
 8001c72:	e039      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
 8001c74:	40021000 	.word	0x40021000
 8001c78:	fffeffff 	.word	0xfffeffff
 8001c7c:	fffbffff 	.word	0xfffbffff
 8001c80:	ffff80ff 	.word	0xffff80ff
 8001c84:	ffffc7ff 	.word	0xffffc7ff
 8001c88:	02dc6c00 	.word	0x02dc6c00
 8001c8c:	20000090 	.word	0x20000090
 8001c90:	20000094 	.word	0x20000094
 8001c94:	fffffeff 	.word	0xfffffeff
 8001c98:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001c9c:	4b14      	ldr	r3, [pc, #80]	; (8001cf0 <HAL_RCC_OscConfig+0x3bc>)
 8001c9e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca0:	2202      	movs	r2, #2
 8001ca2:	4013      	ands	r3, r2
 8001ca4:	d0dc      	beq.n	8001c60 <HAL_RCC_OscConfig+0x32c>
 8001ca6:	e013      	b.n	8001cd0 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ca8:	f7ff fbda 	bl	8001460 <HAL_GetTick>
 8001cac:	0003      	movs	r3, r0
 8001cae:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001cb0:	e009      	b.n	8001cc6 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001cb2:	f7ff fbd5 	bl	8001460 <HAL_GetTick>
 8001cb6:	0002      	movs	r2, r0
 8001cb8:	693b      	ldr	r3, [r7, #16]
 8001cba:	1ad3      	subs	r3, r2, r3
 8001cbc:	4a0d      	ldr	r2, [pc, #52]	; (8001cf4 <HAL_RCC_OscConfig+0x3c0>)
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e010      	b.n	8001ce8 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 8001cc6:	4b0a      	ldr	r3, [pc, #40]	; (8001cf0 <HAL_RCC_OscConfig+0x3bc>)
 8001cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cca:	2202      	movs	r2, #2
 8001ccc:	4013      	ands	r3, r2
 8001cce:	d1f0      	bne.n	8001cb2 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8001cd0:	230f      	movs	r3, #15
 8001cd2:	18fb      	adds	r3, r7, r3
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	2b01      	cmp	r3, #1
 8001cd8:	d105      	bne.n	8001ce6 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8001cda:	4b05      	ldr	r3, [pc, #20]	; (8001cf0 <HAL_RCC_OscConfig+0x3bc>)
 8001cdc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001cde:	4b04      	ldr	r3, [pc, #16]	; (8001cf0 <HAL_RCC_OscConfig+0x3bc>)
 8001ce0:	4905      	ldr	r1, [pc, #20]	; (8001cf8 <HAL_RCC_OscConfig+0x3c4>)
 8001ce2:	400a      	ands	r2, r1
 8001ce4:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 8001ce6:	2300      	movs	r3, #0
}
 8001ce8:	0018      	movs	r0, r3
 8001cea:	46bd      	mov	sp, r7
 8001cec:	b006      	add	sp, #24
 8001cee:	bd80      	pop	{r7, pc}
 8001cf0:	40021000 	.word	0x40021000
 8001cf4:	00001388 	.word	0x00001388
 8001cf8:	efffffff 	.word	0xefffffff

08001cfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b084      	sub	sp, #16
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2b00      	cmp	r3, #0
 8001d0a:	d101      	bne.n	8001d10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001d0c:	2301      	movs	r3, #1
 8001d0e:	e0e9      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001d10:	4b76      	ldr	r3, [pc, #472]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	2207      	movs	r2, #7
 8001d16:	4013      	ands	r3, r2
 8001d18:	683a      	ldr	r2, [r7, #0]
 8001d1a:	429a      	cmp	r2, r3
 8001d1c:	d91e      	bls.n	8001d5c <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001d1e:	4b73      	ldr	r3, [pc, #460]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	2207      	movs	r2, #7
 8001d24:	4393      	bics	r3, r2
 8001d26:	0019      	movs	r1, r3
 8001d28:	4b70      	ldr	r3, [pc, #448]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d2a:	683a      	ldr	r2, [r7, #0]
 8001d2c:	430a      	orrs	r2, r1
 8001d2e:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001d30:	f7ff fb96 	bl	8001460 <HAL_GetTick>
 8001d34:	0003      	movs	r3, r0
 8001d36:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d38:	e009      	b.n	8001d4e <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001d3a:	f7ff fb91 	bl	8001460 <HAL_GetTick>
 8001d3e:	0002      	movs	r2, r0
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	1ad3      	subs	r3, r2, r3
 8001d44:	4a6a      	ldr	r2, [pc, #424]	; (8001ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8001d46:	4293      	cmp	r3, r2
 8001d48:	d901      	bls.n	8001d4e <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8001d4a:	2303      	movs	r3, #3
 8001d4c:	e0ca      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001d4e:	4b67      	ldr	r3, [pc, #412]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	2207      	movs	r2, #7
 8001d54:	4013      	ands	r3, r2
 8001d56:	683a      	ldr	r2, [r7, #0]
 8001d58:	429a      	cmp	r2, r3
 8001d5a:	d1ee      	bne.n	8001d3a <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	2202      	movs	r2, #2
 8001d62:	4013      	ands	r3, r2
 8001d64:	d017      	beq.n	8001d96 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	2204      	movs	r2, #4
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	d008      	beq.n	8001d82 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8001d70:	4b60      	ldr	r3, [pc, #384]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d72:	689b      	ldr	r3, [r3, #8]
 8001d74:	4a60      	ldr	r2, [pc, #384]	; (8001ef8 <HAL_RCC_ClockConfig+0x1fc>)
 8001d76:	401a      	ands	r2, r3
 8001d78:	4b5e      	ldr	r3, [pc, #376]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d7a:	21b0      	movs	r1, #176	; 0xb0
 8001d7c:	0109      	lsls	r1, r1, #4
 8001d7e:	430a      	orrs	r2, r1
 8001d80:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d82:	4b5c      	ldr	r3, [pc, #368]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	4a5d      	ldr	r2, [pc, #372]	; (8001efc <HAL_RCC_ClockConfig+0x200>)
 8001d88:	4013      	ands	r3, r2
 8001d8a:	0019      	movs	r1, r3
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	68da      	ldr	r2, [r3, #12]
 8001d90:	4b58      	ldr	r3, [pc, #352]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001d92:	430a      	orrs	r2, r1
 8001d94:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	2201      	movs	r2, #1
 8001d9c:	4013      	ands	r3, r2
 8001d9e:	d055      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 8001da0:	4b54      	ldr	r3, [pc, #336]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	221c      	movs	r2, #28
 8001da6:	4393      	bics	r3, r2
 8001da8:	0019      	movs	r1, r3
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	689a      	ldr	r2, [r3, #8]
 8001dae:	4b51      	ldr	r3, [pc, #324]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001db0:	430a      	orrs	r2, r1
 8001db2:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	685b      	ldr	r3, [r3, #4]
 8001db8:	2b01      	cmp	r3, #1
 8001dba:	d107      	bne.n	8001dcc <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001dbc:	4b4d      	ldr	r3, [pc, #308]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dbe:	681a      	ldr	r2, [r3, #0]
 8001dc0:	2380      	movs	r3, #128	; 0x80
 8001dc2:	029b      	lsls	r3, r3, #10
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	d11f      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e08b      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	2b00      	cmp	r3, #0
 8001dd2:	d107      	bne.n	8001de4 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001dd4:	4b47      	ldr	r3, [pc, #284]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dd6:	681a      	ldr	r2, [r3, #0]
 8001dd8:	2380      	movs	r3, #128	; 0x80
 8001dda:	00db      	lsls	r3, r3, #3
 8001ddc:	4013      	ands	r3, r2
 8001dde:	d113      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001de0:	2301      	movs	r3, #1
 8001de2:	e07f      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	2b03      	cmp	r3, #3
 8001dea:	d106      	bne.n	8001dfa <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8001dec:	4b41      	ldr	r3, [pc, #260]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001df0:	2202      	movs	r2, #2
 8001df2:	4013      	ands	r3, r2
 8001df4:	d108      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001df6:	2301      	movs	r3, #1
 8001df8:	e074      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8001dfa:	4b3e      	ldr	r3, [pc, #248]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001dfc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dfe:	2202      	movs	r2, #2
 8001e00:	4013      	ands	r3, r2
 8001e02:	d101      	bne.n	8001e08 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8001e04:	2301      	movs	r3, #1
 8001e06:	e06d      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001e08:	4b3a      	ldr	r3, [pc, #232]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e0a:	689b      	ldr	r3, [r3, #8]
 8001e0c:	2207      	movs	r2, #7
 8001e0e:	4393      	bics	r3, r2
 8001e10:	0019      	movs	r1, r3
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	685a      	ldr	r2, [r3, #4]
 8001e16:	4b37      	ldr	r3, [pc, #220]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e18:	430a      	orrs	r2, r1
 8001e1a:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001e1c:	f7ff fb20 	bl	8001460 <HAL_GetTick>
 8001e20:	0003      	movs	r3, r0
 8001e22:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e24:	e009      	b.n	8001e3a <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e26:	f7ff fb1b 	bl	8001460 <HAL_GetTick>
 8001e2a:	0002      	movs	r2, r0
 8001e2c:	68fb      	ldr	r3, [r7, #12]
 8001e2e:	1ad3      	subs	r3, r2, r3
 8001e30:	4a2f      	ldr	r2, [pc, #188]	; (8001ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e32:	4293      	cmp	r3, r2
 8001e34:	d901      	bls.n	8001e3a <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8001e36:	2303      	movs	r3, #3
 8001e38:	e054      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001e3a:	4b2e      	ldr	r3, [pc, #184]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2238      	movs	r2, #56	; 0x38
 8001e40:	401a      	ands	r2, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	d1ec      	bne.n	8001e26 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001e4c:	4b27      	ldr	r3, [pc, #156]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	2207      	movs	r2, #7
 8001e52:	4013      	ands	r3, r2
 8001e54:	683a      	ldr	r2, [r7, #0]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d21e      	bcs.n	8001e98 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e5a:	4b24      	ldr	r3, [pc, #144]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	2207      	movs	r2, #7
 8001e60:	4393      	bics	r3, r2
 8001e62:	0019      	movs	r1, r3
 8001e64:	4b21      	ldr	r3, [pc, #132]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e66:	683a      	ldr	r2, [r7, #0]
 8001e68:	430a      	orrs	r2, r1
 8001e6a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8001e6c:	f7ff faf8 	bl	8001460 <HAL_GetTick>
 8001e70:	0003      	movs	r3, r0
 8001e72:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e74:	e009      	b.n	8001e8a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8001e76:	f7ff faf3 	bl	8001460 <HAL_GetTick>
 8001e7a:	0002      	movs	r2, r0
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	4a1b      	ldr	r2, [pc, #108]	; (8001ef0 <HAL_RCC_ClockConfig+0x1f4>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d901      	bls.n	8001e8a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8001e86:	2303      	movs	r3, #3
 8001e88:	e02c      	b.n	8001ee4 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8001e8a:	4b18      	ldr	r3, [pc, #96]	; (8001eec <HAL_RCC_ClockConfig+0x1f0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2207      	movs	r2, #7
 8001e90:	4013      	ands	r3, r2
 8001e92:	683a      	ldr	r2, [r7, #0]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d1ee      	bne.n	8001e76 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	2204      	movs	r2, #4
 8001e9e:	4013      	ands	r3, r2
 8001ea0:	d009      	beq.n	8001eb6 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8001ea2:	4b14      	ldr	r3, [pc, #80]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ea4:	689b      	ldr	r3, [r3, #8]
 8001ea6:	4a16      	ldr	r2, [pc, #88]	; (8001f00 <HAL_RCC_ClockConfig+0x204>)
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	0019      	movs	r1, r3
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	691a      	ldr	r2, [r3, #16]
 8001eb0:	4b10      	ldr	r3, [pc, #64]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8001eb6:	f000 f82b 	bl	8001f10 <HAL_RCC_GetSysClockFreq>
 8001eba:	0001      	movs	r1, r0
 8001ebc:	4b0d      	ldr	r3, [pc, #52]	; (8001ef4 <HAL_RCC_ClockConfig+0x1f8>)
 8001ebe:	689b      	ldr	r3, [r3, #8]
 8001ec0:	0a1b      	lsrs	r3, r3, #8
 8001ec2:	220f      	movs	r2, #15
 8001ec4:	401a      	ands	r2, r3
 8001ec6:	4b0f      	ldr	r3, [pc, #60]	; (8001f04 <HAL_RCC_ClockConfig+0x208>)
 8001ec8:	0092      	lsls	r2, r2, #2
 8001eca:	58d3      	ldr	r3, [r2, r3]
 8001ecc:	221f      	movs	r2, #31
 8001ece:	4013      	ands	r3, r2
 8001ed0:	000a      	movs	r2, r1
 8001ed2:	40da      	lsrs	r2, r3
 8001ed4:	4b0c      	ldr	r3, [pc, #48]	; (8001f08 <HAL_RCC_ClockConfig+0x20c>)
 8001ed6:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <HAL_RCC_ClockConfig+0x210>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	0018      	movs	r0, r3
 8001ede:	f7ff fa63 	bl	80013a8 <HAL_InitTick>
 8001ee2:	0003      	movs	r3, r0
}
 8001ee4:	0018      	movs	r0, r3
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	b004      	add	sp, #16
 8001eea:	bd80      	pop	{r7, pc}
 8001eec:	40022000 	.word	0x40022000
 8001ef0:	00001388 	.word	0x00001388
 8001ef4:	40021000 	.word	0x40021000
 8001ef8:	ffff84ff 	.word	0xffff84ff
 8001efc:	fffff0ff 	.word	0xfffff0ff
 8001f00:	ffff8fff 	.word	0xffff8fff
 8001f04:	080029fc 	.word	0x080029fc
 8001f08:	20000090 	.word	0x20000090
 8001f0c:	20000094 	.word	0x20000094

08001f10 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b082      	sub	sp, #8
 8001f14:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8001f16:	4b1c      	ldr	r3, [pc, #112]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f18:	689b      	ldr	r3, [r3, #8]
 8001f1a:	2238      	movs	r2, #56	; 0x38
 8001f1c:	4013      	ands	r3, r2
 8001f1e:	d10f      	bne.n	8001f40 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8001f20:	4b19      	ldr	r3, [pc, #100]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	0adb      	lsrs	r3, r3, #11
 8001f26:	2207      	movs	r2, #7
 8001f28:	4013      	ands	r3, r2
 8001f2a:	2201      	movs	r2, #1
 8001f2c:	409a      	lsls	r2, r3
 8001f2e:	0013      	movs	r3, r2
 8001f30:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8001f32:	6839      	ldr	r1, [r7, #0]
 8001f34:	4815      	ldr	r0, [pc, #84]	; (8001f8c <HAL_RCC_GetSysClockFreq+0x7c>)
 8001f36:	f7fe f8e7 	bl	8000108 <__udivsi3>
 8001f3a:	0003      	movs	r3, r0
 8001f3c:	607b      	str	r3, [r7, #4]
 8001f3e:	e01e      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8001f40:	4b11      	ldr	r3, [pc, #68]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f42:	689b      	ldr	r3, [r3, #8]
 8001f44:	2238      	movs	r2, #56	; 0x38
 8001f46:	4013      	ands	r3, r2
 8001f48:	2b08      	cmp	r3, #8
 8001f4a:	d102      	bne.n	8001f52 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8001f4c:	4b10      	ldr	r3, [pc, #64]	; (8001f90 <HAL_RCC_GetSysClockFreq+0x80>)
 8001f4e:	607b      	str	r3, [r7, #4]
 8001f50:	e015      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8001f52:	4b0d      	ldr	r3, [pc, #52]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	2238      	movs	r2, #56	; 0x38
 8001f58:	4013      	ands	r3, r2
 8001f5a:	2b20      	cmp	r3, #32
 8001f5c:	d103      	bne.n	8001f66 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8001f5e:	2380      	movs	r3, #128	; 0x80
 8001f60:	021b      	lsls	r3, r3, #8
 8001f62:	607b      	str	r3, [r7, #4]
 8001f64:	e00b      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8001f66:	4b08      	ldr	r3, [pc, #32]	; (8001f88 <HAL_RCC_GetSysClockFreq+0x78>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	2238      	movs	r2, #56	; 0x38
 8001f6c:	4013      	ands	r3, r2
 8001f6e:	2b18      	cmp	r3, #24
 8001f70:	d103      	bne.n	8001f7a <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8001f72:	23fa      	movs	r3, #250	; 0xfa
 8001f74:	01db      	lsls	r3, r3, #7
 8001f76:	607b      	str	r3, [r7, #4]
 8001f78:	e001      	b.n	8001f7e <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 8001f7e:	687b      	ldr	r3, [r7, #4]
}
 8001f80:	0018      	movs	r0, r3
 8001f82:	46bd      	mov	sp, r7
 8001f84:	b002      	add	sp, #8
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40021000 	.word	0x40021000
 8001f8c:	02dc6c00 	.word	0x02dc6c00
 8001f90:	007a1200 	.word	0x007a1200

08001f94 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8001f9c:	2313      	movs	r3, #19
 8001f9e:	18fb      	adds	r3, r7, r3
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001fa4:	2312      	movs	r3, #18
 8001fa6:	18fb      	adds	r3, r7, r3
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	681a      	ldr	r2, [r3, #0]
 8001fb0:	2380      	movs	r3, #128	; 0x80
 8001fb2:	029b      	lsls	r3, r3, #10
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	d100      	bne.n	8001fba <HAL_RCCEx_PeriphCLKConfig+0x26>
 8001fb8:	e079      	b.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fba:	2011      	movs	r0, #17
 8001fbc:	183b      	adds	r3, r7, r0
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc2:	4b64      	ldr	r3, [pc, #400]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fc6:	2380      	movs	r3, #128	; 0x80
 8001fc8:	055b      	lsls	r3, r3, #21
 8001fca:	4013      	ands	r3, r2
 8001fcc:	d110      	bne.n	8001ff0 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fce:	4b61      	ldr	r3, [pc, #388]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fd0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fd2:	4b60      	ldr	r3, [pc, #384]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fd4:	2180      	movs	r1, #128	; 0x80
 8001fd6:	0549      	lsls	r1, r1, #21
 8001fd8:	430a      	orrs	r2, r1
 8001fda:	63da      	str	r2, [r3, #60]	; 0x3c
 8001fdc:	4b5d      	ldr	r3, [pc, #372]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001fde:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001fe0:	2380      	movs	r3, #128	; 0x80
 8001fe2:	055b      	lsls	r3, r3, #21
 8001fe4:	4013      	ands	r3, r2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	183b      	adds	r3, r7, r0
 8001fec:	2201      	movs	r2, #1
 8001fee:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8001ff0:	4b58      	ldr	r3, [pc, #352]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001ff2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8001ff4:	23c0      	movs	r3, #192	; 0xc0
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	4013      	ands	r3, r2
 8001ffa:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001ffc:	697b      	ldr	r3, [r7, #20]
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d019      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	699b      	ldr	r3, [r3, #24]
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	429a      	cmp	r2, r3
 800200a:	d014      	beq.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 800200c:	4b51      	ldr	r3, [pc, #324]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800200e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002010:	4a51      	ldr	r2, [pc, #324]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002012:	4013      	ands	r3, r2
 8002014:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002016:	4b4f      	ldr	r3, [pc, #316]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002018:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800201a:	4b4e      	ldr	r3, [pc, #312]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800201c:	2180      	movs	r1, #128	; 0x80
 800201e:	0249      	lsls	r1, r1, #9
 8002020:	430a      	orrs	r2, r1
 8002022:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002024:	4b4b      	ldr	r3, [pc, #300]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002026:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002028:	4b4a      	ldr	r3, [pc, #296]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800202a:	494c      	ldr	r1, [pc, #304]	; (800215c <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 800202c:	400a      	ands	r2, r1
 800202e:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002030:	4b48      	ldr	r3, [pc, #288]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002032:	697a      	ldr	r2, [r7, #20]
 8002034:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002036:	697b      	ldr	r3, [r7, #20]
 8002038:	2201      	movs	r2, #1
 800203a:	4013      	ands	r3, r2
 800203c:	d016      	beq.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203e:	f7ff fa0f 	bl	8001460 <HAL_GetTick>
 8002042:	0003      	movs	r3, r0
 8002044:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002046:	e00c      	b.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002048:	f7ff fa0a 	bl	8001460 <HAL_GetTick>
 800204c:	0002      	movs	r2, r0
 800204e:	68fb      	ldr	r3, [r7, #12]
 8002050:	1ad3      	subs	r3, r2, r3
 8002052:	4a43      	ldr	r2, [pc, #268]	; (8002160 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002054:	4293      	cmp	r3, r2
 8002056:	d904      	bls.n	8002062 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002058:	2313      	movs	r3, #19
 800205a:	18fb      	adds	r3, r7, r3
 800205c:	2203      	movs	r2, #3
 800205e:	701a      	strb	r2, [r3, #0]
          break;
 8002060:	e004      	b.n	800206c <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002062:	4b3c      	ldr	r3, [pc, #240]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002064:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002066:	2202      	movs	r2, #2
 8002068:	4013      	ands	r3, r2
 800206a:	d0ed      	beq.n	8002048 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 800206c:	2313      	movs	r3, #19
 800206e:	18fb      	adds	r3, r7, r3
 8002070:	781b      	ldrb	r3, [r3, #0]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d10a      	bne.n	800208c <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002076:	4b37      	ldr	r3, [pc, #220]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	4a37      	ldr	r2, [pc, #220]	; (8002158 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800207c:	4013      	ands	r3, r2
 800207e:	0019      	movs	r1, r3
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	699a      	ldr	r2, [r3, #24]
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002086:	430a      	orrs	r2, r1
 8002088:	65da      	str	r2, [r3, #92]	; 0x5c
 800208a:	e005      	b.n	8002098 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800208c:	2312      	movs	r3, #18
 800208e:	18fb      	adds	r3, r7, r3
 8002090:	2213      	movs	r2, #19
 8002092:	18ba      	adds	r2, r7, r2
 8002094:	7812      	ldrb	r2, [r2, #0]
 8002096:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002098:	2311      	movs	r3, #17
 800209a:	18fb      	adds	r3, r7, r3
 800209c:	781b      	ldrb	r3, [r3, #0]
 800209e:	2b01      	cmp	r3, #1
 80020a0:	d105      	bne.n	80020ae <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020a2:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80020a6:	4b2b      	ldr	r3, [pc, #172]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020a8:	492e      	ldr	r1, [pc, #184]	; (8002164 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	400a      	ands	r2, r1
 80020ac:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	2201      	movs	r2, #1
 80020b4:	4013      	ands	r3, r2
 80020b6:	d009      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80020b8:	4b26      	ldr	r3, [pc, #152]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	2203      	movs	r2, #3
 80020be:	4393      	bics	r3, r2
 80020c0:	0019      	movs	r1, r3
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	689a      	ldr	r2, [r3, #8]
 80020c6:	4b23      	ldr	r3, [pc, #140]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020c8:	430a      	orrs	r2, r1
 80020ca:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	2240      	movs	r2, #64	; 0x40
 80020d2:	4013      	ands	r3, r2
 80020d4:	d009      	beq.n	80020ea <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80020d6:	4b1f      	ldr	r3, [pc, #124]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020da:	4a23      	ldr	r2, [pc, #140]	; (8002168 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020dc:	4013      	ands	r3, r2
 80020de:	0019      	movs	r1, r3
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	4b1b      	ldr	r3, [pc, #108]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020e6:	430a      	orrs	r2, r1
 80020e8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	681a      	ldr	r2, [r3, #0]
 80020ee:	2380      	movs	r3, #128	; 0x80
 80020f0:	01db      	lsls	r3, r3, #7
 80020f2:	4013      	ands	r3, r2
 80020f4:	d008      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80020f6:	4b17      	ldr	r3, [pc, #92]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80020f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020fa:	009b      	lsls	r3, r3, #2
 80020fc:	0899      	lsrs	r1, r3, #2
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	695a      	ldr	r2, [r3, #20]
 8002102:	4b14      	ldr	r3, [pc, #80]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002104:	430a      	orrs	r2, r1
 8002106:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681a      	ldr	r2, [r3, #0]
 800210c:	2380      	movs	r3, #128	; 0x80
 800210e:	011b      	lsls	r3, r3, #4
 8002110:	4013      	ands	r3, r2
 8002112:	d009      	beq.n	8002128 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002116:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002118:	4a14      	ldr	r2, [pc, #80]	; (800216c <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800211a:	4013      	ands	r3, r2
 800211c:	0019      	movs	r1, r3
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	691a      	ldr	r2, [r3, #16]
 8002122:	4b0c      	ldr	r3, [pc, #48]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002124:	430a      	orrs	r2, r1
 8002126:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	2b00      	cmp	r3, #0
 800212e:	da09      	bge.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002130:	4b08      	ldr	r3, [pc, #32]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	22e0      	movs	r2, #224	; 0xe0
 8002136:	4393      	bics	r3, r2
 8002138:	0019      	movs	r1, r3
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	685a      	ldr	r2, [r3, #4]
 800213e:	4b05      	ldr	r3, [pc, #20]	; (8002154 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002140:	430a      	orrs	r2, r1
 8002142:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002144:	2312      	movs	r3, #18
 8002146:	18fb      	adds	r3, r7, r3
 8002148:	781b      	ldrb	r3, [r3, #0]
}
 800214a:	0018      	movs	r0, r3
 800214c:	46bd      	mov	sp, r7
 800214e:	b006      	add	sp, #24
 8002150:	bd80      	pop	{r7, pc}
 8002152:	46c0      	nop			; (mov r8, r8)
 8002154:	40021000 	.word	0x40021000
 8002158:	fffffcff 	.word	0xfffffcff
 800215c:	fffeffff 	.word	0xfffeffff
 8002160:	00001388 	.word	0x00001388
 8002164:	efffffff 	.word	0xefffffff
 8002168:	ffffcfff 	.word	0xffffcfff
 800216c:	ffff3fff 	.word	0xffff3fff

08002170 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b084      	sub	sp, #16
 8002174:	af00      	add	r7, sp, #0
 8002176:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	2b00      	cmp	r3, #0
 800217c:	d101      	bne.n	8002182 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800217e:	2301      	movs	r3, #1
 8002180:	e0a8      	b.n	80022d4 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002186:	2b00      	cmp	r3, #0
 8002188:	d109      	bne.n	800219e <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	685a      	ldr	r2, [r3, #4]
 800218e:	2382      	movs	r3, #130	; 0x82
 8002190:	005b      	lsls	r3, r3, #1
 8002192:	429a      	cmp	r2, r3
 8002194:	d009      	beq.n	80021aa <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	61da      	str	r2, [r3, #28]
 800219c:	e005      	b.n	80021aa <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	2200      	movs	r2, #0
 80021a2:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	2200      	movs	r2, #0
 80021a8:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2200      	movs	r2, #0
 80021ae:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	225d      	movs	r2, #93	; 0x5d
 80021b4:	5c9b      	ldrb	r3, [r3, r2]
 80021b6:	b2db      	uxtb	r3, r3
 80021b8:	2b00      	cmp	r3, #0
 80021ba:	d107      	bne.n	80021cc <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	225c      	movs	r2, #92	; 0x5c
 80021c0:	2100      	movs	r1, #0
 80021c2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	0018      	movs	r0, r3
 80021c8:	f7ff f828 	bl	800121c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	225d      	movs	r2, #93	; 0x5d
 80021d0:	2102      	movs	r1, #2
 80021d2:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	2140      	movs	r1, #64	; 0x40
 80021e0:	438a      	bics	r2, r1
 80021e2:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68da      	ldr	r2, [r3, #12]
 80021e8:	23e0      	movs	r3, #224	; 0xe0
 80021ea:	00db      	lsls	r3, r3, #3
 80021ec:	429a      	cmp	r2, r3
 80021ee:	d902      	bls.n	80021f6 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80021f0:	2300      	movs	r3, #0
 80021f2:	60fb      	str	r3, [r7, #12]
 80021f4:	e002      	b.n	80021fc <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	015b      	lsls	r3, r3, #5
 80021fa:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	68da      	ldr	r2, [r3, #12]
 8002200:	23f0      	movs	r3, #240	; 0xf0
 8002202:	011b      	lsls	r3, r3, #4
 8002204:	429a      	cmp	r2, r3
 8002206:	d008      	beq.n	800221a <HAL_SPI_Init+0xaa>
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	68da      	ldr	r2, [r3, #12]
 800220c:	23e0      	movs	r3, #224	; 0xe0
 800220e:	00db      	lsls	r3, r3, #3
 8002210:	429a      	cmp	r2, r3
 8002212:	d002      	beq.n	800221a <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	2200      	movs	r2, #0
 8002218:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	685a      	ldr	r2, [r3, #4]
 800221e:	2382      	movs	r3, #130	; 0x82
 8002220:	005b      	lsls	r3, r3, #1
 8002222:	401a      	ands	r2, r3
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	6899      	ldr	r1, [r3, #8]
 8002228:	2384      	movs	r3, #132	; 0x84
 800222a:	021b      	lsls	r3, r3, #8
 800222c:	400b      	ands	r3, r1
 800222e:	431a      	orrs	r2, r3
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	691b      	ldr	r3, [r3, #16]
 8002234:	2102      	movs	r1, #2
 8002236:	400b      	ands	r3, r1
 8002238:	431a      	orrs	r2, r3
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	695b      	ldr	r3, [r3, #20]
 800223e:	2101      	movs	r1, #1
 8002240:	400b      	ands	r3, r1
 8002242:	431a      	orrs	r2, r3
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6999      	ldr	r1, [r3, #24]
 8002248:	2380      	movs	r3, #128	; 0x80
 800224a:	009b      	lsls	r3, r3, #2
 800224c:	400b      	ands	r3, r1
 800224e:	431a      	orrs	r2, r3
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	69db      	ldr	r3, [r3, #28]
 8002254:	2138      	movs	r1, #56	; 0x38
 8002256:	400b      	ands	r3, r1
 8002258:	431a      	orrs	r2, r3
 800225a:	687b      	ldr	r3, [r7, #4]
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	2180      	movs	r1, #128	; 0x80
 8002260:	400b      	ands	r3, r1
 8002262:	431a      	orrs	r2, r3
 8002264:	0011      	movs	r1, r2
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800226a:	2380      	movs	r3, #128	; 0x80
 800226c:	019b      	lsls	r3, r3, #6
 800226e:	401a      	ands	r2, r3
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	699b      	ldr	r3, [r3, #24]
 800227c:	0c1b      	lsrs	r3, r3, #16
 800227e:	2204      	movs	r2, #4
 8002280:	401a      	ands	r2, r3
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002286:	2110      	movs	r1, #16
 8002288:	400b      	ands	r3, r1
 800228a:	431a      	orrs	r2, r3
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002290:	2108      	movs	r1, #8
 8002292:	400b      	ands	r3, r1
 8002294:	431a      	orrs	r2, r3
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	68d9      	ldr	r1, [r3, #12]
 800229a:	23f0      	movs	r3, #240	; 0xf0
 800229c:	011b      	lsls	r3, r3, #4
 800229e:	400b      	ands	r3, r1
 80022a0:	431a      	orrs	r2, r3
 80022a2:	0011      	movs	r1, r2
 80022a4:	68fa      	ldr	r2, [r7, #12]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	015b      	lsls	r3, r3, #5
 80022aa:	401a      	ands	r2, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	430a      	orrs	r2, r1
 80022b2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	69da      	ldr	r2, [r3, #28]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	4907      	ldr	r1, [pc, #28]	; (80022dc <HAL_SPI_Init+0x16c>)
 80022c0:	400a      	ands	r2, r1
 80022c2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2200      	movs	r2, #0
 80022c8:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	225d      	movs	r2, #93	; 0x5d
 80022ce:	2101      	movs	r1, #1
 80022d0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80022d2:	2300      	movs	r3, #0
}
 80022d4:	0018      	movs	r0, r3
 80022d6:	46bd      	mov	sp, r7
 80022d8:	b004      	add	sp, #16
 80022da:	bd80      	pop	{r7, pc}
 80022dc:	fffff7ff 	.word	0xfffff7ff

080022e0 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80022e0:	b580      	push	{r7, lr}
 80022e2:	b088      	sub	sp, #32
 80022e4:	af00      	add	r7, sp, #0
 80022e6:	60f8      	str	r0, [r7, #12]
 80022e8:	60b9      	str	r1, [r7, #8]
 80022ea:	603b      	str	r3, [r7, #0]
 80022ec:	1dbb      	adds	r3, r7, #6
 80022ee:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80022f0:	231f      	movs	r3, #31
 80022f2:	18fb      	adds	r3, r7, r3
 80022f4:	2200      	movs	r2, #0
 80022f6:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80022f8:	68fb      	ldr	r3, [r7, #12]
 80022fa:	225c      	movs	r2, #92	; 0x5c
 80022fc:	5c9b      	ldrb	r3, [r3, r2]
 80022fe:	2b01      	cmp	r3, #1
 8002300:	d101      	bne.n	8002306 <HAL_SPI_Transmit+0x26>
 8002302:	2302      	movs	r3, #2
 8002304:	e171      	b.n	80025ea <HAL_SPI_Transmit+0x30a>
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	225c      	movs	r2, #92	; 0x5c
 800230a:	2101      	movs	r1, #1
 800230c:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800230e:	f7ff f8a7 	bl	8001460 <HAL_GetTick>
 8002312:	0003      	movs	r3, r0
 8002314:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002316:	2316      	movs	r3, #22
 8002318:	18fb      	adds	r3, r7, r3
 800231a:	1dba      	adds	r2, r7, #6
 800231c:	8812      	ldrh	r2, [r2, #0]
 800231e:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	225d      	movs	r2, #93	; 0x5d
 8002324:	5c9b      	ldrb	r3, [r3, r2]
 8002326:	b2db      	uxtb	r3, r3
 8002328:	2b01      	cmp	r3, #1
 800232a:	d004      	beq.n	8002336 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 800232c:	231f      	movs	r3, #31
 800232e:	18fb      	adds	r3, r7, r3
 8002330:	2202      	movs	r2, #2
 8002332:	701a      	strb	r2, [r3, #0]
    goto error;
 8002334:	e14e      	b.n	80025d4 <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002336:	68bb      	ldr	r3, [r7, #8]
 8002338:	2b00      	cmp	r3, #0
 800233a:	d003      	beq.n	8002344 <HAL_SPI_Transmit+0x64>
 800233c:	1dbb      	adds	r3, r7, #6
 800233e:	881b      	ldrh	r3, [r3, #0]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d104      	bne.n	800234e <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002344:	231f      	movs	r3, #31
 8002346:	18fb      	adds	r3, r7, r3
 8002348:	2201      	movs	r2, #1
 800234a:	701a      	strb	r2, [r3, #0]
    goto error;
 800234c:	e142      	b.n	80025d4 <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800234e:	68fb      	ldr	r3, [r7, #12]
 8002350:	225d      	movs	r2, #93	; 0x5d
 8002352:	2103      	movs	r1, #3
 8002354:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002356:	68fb      	ldr	r3, [r7, #12]
 8002358:	2200      	movs	r2, #0
 800235a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	68ba      	ldr	r2, [r7, #8]
 8002360:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	1dba      	adds	r2, r7, #6
 8002366:	8812      	ldrh	r2, [r2, #0]
 8002368:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800236a:	68fb      	ldr	r3, [r7, #12]
 800236c:	1dba      	adds	r2, r7, #6
 800236e:	8812      	ldrh	r2, [r2, #0]
 8002370:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	2200      	movs	r2, #0
 8002376:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	2244      	movs	r2, #68	; 0x44
 800237c:	2100      	movs	r1, #0
 800237e:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	2246      	movs	r2, #70	; 0x46
 8002384:	2100      	movs	r1, #0
 8002386:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002388:	68fb      	ldr	r3, [r7, #12]
 800238a:	2200      	movs	r2, #0
 800238c:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	689a      	ldr	r2, [r3, #8]
 8002398:	2380      	movs	r3, #128	; 0x80
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	429a      	cmp	r2, r3
 800239e:	d110      	bne.n	80023c2 <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	681a      	ldr	r2, [r3, #0]
 80023a6:	68fb      	ldr	r3, [r7, #12]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	2140      	movs	r1, #64	; 0x40
 80023ac:	438a      	bics	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	68fb      	ldr	r3, [r7, #12]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2180      	movs	r1, #128	; 0x80
 80023bc:	01c9      	lsls	r1, r1, #7
 80023be:	430a      	orrs	r2, r1
 80023c0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2240      	movs	r2, #64	; 0x40
 80023ca:	4013      	ands	r3, r2
 80023cc:	2b40      	cmp	r3, #64	; 0x40
 80023ce:	d007      	beq.n	80023e0 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	681a      	ldr	r2, [r3, #0]
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	2140      	movs	r1, #64	; 0x40
 80023dc:	430a      	orrs	r2, r1
 80023de:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	68da      	ldr	r2, [r3, #12]
 80023e4:	23e0      	movs	r3, #224	; 0xe0
 80023e6:	00db      	lsls	r3, r3, #3
 80023e8:	429a      	cmp	r2, r3
 80023ea:	d94e      	bls.n	800248a <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80023ec:	68fb      	ldr	r3, [r7, #12]
 80023ee:	685b      	ldr	r3, [r3, #4]
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d004      	beq.n	80023fe <HAL_SPI_Transmit+0x11e>
 80023f4:	2316      	movs	r3, #22
 80023f6:	18fb      	adds	r3, r7, r3
 80023f8:	881b      	ldrh	r3, [r3, #0]
 80023fa:	2b01      	cmp	r3, #1
 80023fc:	d13f      	bne.n	800247e <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80023fe:	68fb      	ldr	r3, [r7, #12]
 8002400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002402:	881a      	ldrh	r2, [r3, #0]
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800240e:	1c9a      	adds	r2, r3, #2
 8002410:	68fb      	ldr	r3, [r7, #12]
 8002412:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002418:	b29b      	uxth	r3, r3
 800241a:	3b01      	subs	r3, #1
 800241c:	b29a      	uxth	r2, r3
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002422:	e02c      	b.n	800247e <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	2202      	movs	r2, #2
 800242c:	4013      	ands	r3, r2
 800242e:	2b02      	cmp	r3, #2
 8002430:	d112      	bne.n	8002458 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002436:	881a      	ldrh	r2, [r3, #0]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002442:	1c9a      	adds	r2, r3, #2
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002448:	68fb      	ldr	r3, [r7, #12]
 800244a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800244c:	b29b      	uxth	r3, r3
 800244e:	3b01      	subs	r3, #1
 8002450:	b29a      	uxth	r2, r3
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002456:	e012      	b.n	800247e <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002458:	f7ff f802 	bl	8001460 <HAL_GetTick>
 800245c:	0002      	movs	r2, r0
 800245e:	69bb      	ldr	r3, [r7, #24]
 8002460:	1ad3      	subs	r3, r2, r3
 8002462:	683a      	ldr	r2, [r7, #0]
 8002464:	429a      	cmp	r2, r3
 8002466:	d802      	bhi.n	800246e <HAL_SPI_Transmit+0x18e>
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	3301      	adds	r3, #1
 800246c:	d102      	bne.n	8002474 <HAL_SPI_Transmit+0x194>
 800246e:	683b      	ldr	r3, [r7, #0]
 8002470:	2b00      	cmp	r3, #0
 8002472:	d104      	bne.n	800247e <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002474:	231f      	movs	r3, #31
 8002476:	18fb      	adds	r3, r7, r3
 8002478:	2203      	movs	r2, #3
 800247a:	701a      	strb	r2, [r3, #0]
          goto error;
 800247c:	e0aa      	b.n	80025d4 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002482:	b29b      	uxth	r3, r3
 8002484:	2b00      	cmp	r3, #0
 8002486:	d1cd      	bne.n	8002424 <HAL_SPI_Transmit+0x144>
 8002488:	e080      	b.n	800258c <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_SPI_Transmit+0x1be>
 8002492:	2316      	movs	r3, #22
 8002494:	18fb      	adds	r3, r7, r3
 8002496:	881b      	ldrh	r3, [r3, #0]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d000      	beq.n	800249e <HAL_SPI_Transmit+0x1be>
 800249c:	e071      	b.n	8002582 <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024a2:	b29b      	uxth	r3, r3
 80024a4:	2b01      	cmp	r3, #1
 80024a6:	d912      	bls.n	80024ce <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024ac:	881a      	ldrh	r2, [r3, #0]
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024b8:	1c9a      	adds	r2, r3, #2
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024c2:	b29b      	uxth	r3, r3
 80024c4:	3b02      	subs	r3, #2
 80024c6:	b29a      	uxth	r2, r3
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	87da      	strh	r2, [r3, #62]	; 0x3e
 80024cc:	e059      	b.n	8002582 <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80024ce:	68fb      	ldr	r3, [r7, #12]
 80024d0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	330c      	adds	r3, #12
 80024d8:	7812      	ldrb	r2, [r2, #0]
 80024da:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80024e0:	1c5a      	adds	r2, r3, #1
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80024ea:	b29b      	uxth	r3, r3
 80024ec:	3b01      	subs	r3, #1
 80024ee:	b29a      	uxth	r2, r3
 80024f0:	68fb      	ldr	r3, [r7, #12]
 80024f2:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 80024f4:	e045      	b.n	8002582 <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80024f6:	68fb      	ldr	r3, [r7, #12]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2202      	movs	r2, #2
 80024fe:	4013      	ands	r3, r2
 8002500:	2b02      	cmp	r3, #2
 8002502:	d12b      	bne.n	800255c <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002508:	b29b      	uxth	r3, r3
 800250a:	2b01      	cmp	r3, #1
 800250c:	d912      	bls.n	8002534 <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002512:	881a      	ldrh	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800251e:	1c9a      	adds	r2, r3, #2
 8002520:	68fb      	ldr	r3, [r7, #12]
 8002522:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002524:	68fb      	ldr	r3, [r7, #12]
 8002526:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002528:	b29b      	uxth	r3, r3
 800252a:	3b02      	subs	r3, #2
 800252c:	b29a      	uxth	r2, r3
 800252e:	68fb      	ldr	r3, [r7, #12]
 8002530:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002532:	e026      	b.n	8002582 <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002534:	68fb      	ldr	r3, [r7, #12]
 8002536:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	330c      	adds	r3, #12
 800253e:	7812      	ldrb	r2, [r2, #0]
 8002540:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002546:	1c5a      	adds	r2, r3, #1
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002550:	b29b      	uxth	r3, r3
 8002552:	3b01      	subs	r3, #1
 8002554:	b29a      	uxth	r2, r3
 8002556:	68fb      	ldr	r3, [r7, #12]
 8002558:	87da      	strh	r2, [r3, #62]	; 0x3e
 800255a:	e012      	b.n	8002582 <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800255c:	f7fe ff80 	bl	8001460 <HAL_GetTick>
 8002560:	0002      	movs	r2, r0
 8002562:	69bb      	ldr	r3, [r7, #24]
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d802      	bhi.n	8002572 <HAL_SPI_Transmit+0x292>
 800256c:	683b      	ldr	r3, [r7, #0]
 800256e:	3301      	adds	r3, #1
 8002570:	d102      	bne.n	8002578 <HAL_SPI_Transmit+0x298>
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	2b00      	cmp	r3, #0
 8002576:	d104      	bne.n	8002582 <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 8002578:	231f      	movs	r3, #31
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2203      	movs	r2, #3
 800257e:	701a      	strb	r2, [r3, #0]
          goto error;
 8002580:	e028      	b.n	80025d4 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002586:	b29b      	uxth	r3, r3
 8002588:	2b00      	cmp	r3, #0
 800258a:	d1b4      	bne.n	80024f6 <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800258c:	69ba      	ldr	r2, [r7, #24]
 800258e:	6839      	ldr	r1, [r7, #0]
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	0018      	movs	r0, r3
 8002594:	f000 f95e 	bl	8002854 <SPI_EndRxTxTransaction>
 8002598:	1e03      	subs	r3, r0, #0
 800259a:	d002      	beq.n	80025a2 <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	2220      	movs	r2, #32
 80025a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	689b      	ldr	r3, [r3, #8]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d10a      	bne.n	80025c0 <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80025aa:	2300      	movs	r3, #0
 80025ac:	613b      	str	r3, [r7, #16]
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	68db      	ldr	r3, [r3, #12]
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	689b      	ldr	r3, [r3, #8]
 80025bc:	613b      	str	r3, [r7, #16]
 80025be:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d004      	beq.n	80025d2 <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 80025c8:	231f      	movs	r3, #31
 80025ca:	18fb      	adds	r3, r7, r3
 80025cc:	2201      	movs	r2, #1
 80025ce:	701a      	strb	r2, [r3, #0]
 80025d0:	e000      	b.n	80025d4 <HAL_SPI_Transmit+0x2f4>
  }

error:
 80025d2:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	225d      	movs	r2, #93	; 0x5d
 80025d8:	2101      	movs	r1, #1
 80025da:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	225c      	movs	r2, #92	; 0x5c
 80025e0:	2100      	movs	r1, #0
 80025e2:	5499      	strb	r1, [r3, r2]
  return errorcode;
 80025e4:	231f      	movs	r3, #31
 80025e6:	18fb      	adds	r3, r7, r3
 80025e8:	781b      	ldrb	r3, [r3, #0]
}
 80025ea:	0018      	movs	r0, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	b008      	add	sp, #32
 80025f0:	bd80      	pop	{r7, pc}
	...

080025f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80025f4:	b580      	push	{r7, lr}
 80025f6:	b088      	sub	sp, #32
 80025f8:	af00      	add	r7, sp, #0
 80025fa:	60f8      	str	r0, [r7, #12]
 80025fc:	60b9      	str	r1, [r7, #8]
 80025fe:	603b      	str	r3, [r7, #0]
 8002600:	1dfb      	adds	r3, r7, #7
 8002602:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002604:	f7fe ff2c 	bl	8001460 <HAL_GetTick>
 8002608:	0002      	movs	r2, r0
 800260a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800260c:	1a9b      	subs	r3, r3, r2
 800260e:	683a      	ldr	r2, [r7, #0]
 8002610:	18d3      	adds	r3, r2, r3
 8002612:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002614:	f7fe ff24 	bl	8001460 <HAL_GetTick>
 8002618:	0003      	movs	r3, r0
 800261a:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800261c:	4b3a      	ldr	r3, [pc, #232]	; (8002708 <SPI_WaitFlagStateUntilTimeout+0x114>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	015b      	lsls	r3, r3, #5
 8002622:	0d1b      	lsrs	r3, r3, #20
 8002624:	69fa      	ldr	r2, [r7, #28]
 8002626:	4353      	muls	r3, r2
 8002628:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800262a:	e058      	b.n	80026de <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	3301      	adds	r3, #1
 8002630:	d055      	beq.n	80026de <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002632:	f7fe ff15 	bl	8001460 <HAL_GetTick>
 8002636:	0002      	movs	r2, r0
 8002638:	69bb      	ldr	r3, [r7, #24]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	69fa      	ldr	r2, [r7, #28]
 800263e:	429a      	cmp	r2, r3
 8002640:	d902      	bls.n	8002648 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002642:	69fb      	ldr	r3, [r7, #28]
 8002644:	2b00      	cmp	r3, #0
 8002646:	d142      	bne.n	80026ce <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	21e0      	movs	r1, #224	; 0xe0
 8002654:	438a      	bics	r2, r1
 8002656:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	685a      	ldr	r2, [r3, #4]
 800265c:	2382      	movs	r3, #130	; 0x82
 800265e:	005b      	lsls	r3, r3, #1
 8002660:	429a      	cmp	r2, r3
 8002662:	d113      	bne.n	800268c <SPI_WaitFlagStateUntilTimeout+0x98>
 8002664:	68fb      	ldr	r3, [r7, #12]
 8002666:	689a      	ldr	r2, [r3, #8]
 8002668:	2380      	movs	r3, #128	; 0x80
 800266a:	021b      	lsls	r3, r3, #8
 800266c:	429a      	cmp	r2, r3
 800266e:	d005      	beq.n	800267c <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	689a      	ldr	r2, [r3, #8]
 8002674:	2380      	movs	r3, #128	; 0x80
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	429a      	cmp	r2, r3
 800267a:	d107      	bne.n	800268c <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	68fb      	ldr	r3, [r7, #12]
 8002684:	681b      	ldr	r3, [r3, #0]
 8002686:	2140      	movs	r1, #64	; 0x40
 8002688:	438a      	bics	r2, r1
 800268a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002690:	2380      	movs	r3, #128	; 0x80
 8002692:	019b      	lsls	r3, r3, #6
 8002694:	429a      	cmp	r2, r3
 8002696:	d110      	bne.n	80026ba <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	681b      	ldr	r3, [r3, #0]
 800269c:	681a      	ldr	r2, [r3, #0]
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	491a      	ldr	r1, [pc, #104]	; (800270c <SPI_WaitFlagStateUntilTimeout+0x118>)
 80026a4:	400a      	ands	r2, r1
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	68fb      	ldr	r3, [r7, #12]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	681a      	ldr	r2, [r3, #0]
 80026ae:	68fb      	ldr	r3, [r7, #12]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	2180      	movs	r1, #128	; 0x80
 80026b4:	0189      	lsls	r1, r1, #6
 80026b6:	430a      	orrs	r2, r1
 80026b8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	225d      	movs	r2, #93	; 0x5d
 80026be:	2101      	movs	r1, #1
 80026c0:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80026c2:	68fb      	ldr	r3, [r7, #12]
 80026c4:	225c      	movs	r2, #92	; 0x5c
 80026c6:	2100      	movs	r1, #0
 80026c8:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e017      	b.n	80026fe <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80026ce:	697b      	ldr	r3, [r7, #20]
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d101      	bne.n	80026d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 80026d4:	2300      	movs	r3, #0
 80026d6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80026d8:	697b      	ldr	r3, [r7, #20]
 80026da:	3b01      	subs	r3, #1
 80026dc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	689b      	ldr	r3, [r3, #8]
 80026e4:	68ba      	ldr	r2, [r7, #8]
 80026e6:	4013      	ands	r3, r2
 80026e8:	68ba      	ldr	r2, [r7, #8]
 80026ea:	1ad3      	subs	r3, r2, r3
 80026ec:	425a      	negs	r2, r3
 80026ee:	4153      	adcs	r3, r2
 80026f0:	b2db      	uxtb	r3, r3
 80026f2:	001a      	movs	r2, r3
 80026f4:	1dfb      	adds	r3, r7, #7
 80026f6:	781b      	ldrb	r3, [r3, #0]
 80026f8:	429a      	cmp	r2, r3
 80026fa:	d197      	bne.n	800262c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80026fc:	2300      	movs	r3, #0
}
 80026fe:	0018      	movs	r0, r3
 8002700:	46bd      	mov	sp, r7
 8002702:	b008      	add	sp, #32
 8002704:	bd80      	pop	{r7, pc}
 8002706:	46c0      	nop			; (mov r8, r8)
 8002708:	20000090 	.word	0x20000090
 800270c:	ffffdfff 	.word	0xffffdfff

08002710 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002710:	b580      	push	{r7, lr}
 8002712:	b08a      	sub	sp, #40	; 0x28
 8002714:	af00      	add	r7, sp, #0
 8002716:	60f8      	str	r0, [r7, #12]
 8002718:	60b9      	str	r1, [r7, #8]
 800271a:	607a      	str	r2, [r7, #4]
 800271c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800271e:	2317      	movs	r3, #23
 8002720:	18fb      	adds	r3, r7, r3
 8002722:	2200      	movs	r2, #0
 8002724:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002726:	f7fe fe9b 	bl	8001460 <HAL_GetTick>
 800272a:	0002      	movs	r2, r0
 800272c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800272e:	1a9b      	subs	r3, r3, r2
 8002730:	683a      	ldr	r2, [r7, #0]
 8002732:	18d3      	adds	r3, r2, r3
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002736:	f7fe fe93 	bl	8001460 <HAL_GetTick>
 800273a:	0003      	movs	r3, r0
 800273c:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800273e:	68fb      	ldr	r3, [r7, #12]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	330c      	adds	r3, #12
 8002744:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002746:	4b41      	ldr	r3, [pc, #260]	; (800284c <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002748:	681a      	ldr	r2, [r3, #0]
 800274a:	0013      	movs	r3, r2
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	189b      	adds	r3, r3, r2
 8002750:	00da      	lsls	r2, r3, #3
 8002752:	1ad3      	subs	r3, r2, r3
 8002754:	0d1b      	lsrs	r3, r3, #20
 8002756:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002758:	4353      	muls	r3, r2
 800275a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800275c:	e068      	b.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800275e:	68ba      	ldr	r2, [r7, #8]
 8002760:	23c0      	movs	r3, #192	; 0xc0
 8002762:	00db      	lsls	r3, r3, #3
 8002764:	429a      	cmp	r2, r3
 8002766:	d10a      	bne.n	800277e <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d107      	bne.n	800277e <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800276e:	69fb      	ldr	r3, [r7, #28]
 8002770:	781b      	ldrb	r3, [r3, #0]
 8002772:	b2da      	uxtb	r2, r3
 8002774:	2117      	movs	r1, #23
 8002776:	187b      	adds	r3, r7, r1
 8002778:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800277a:	187b      	adds	r3, r7, r1
 800277c:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 800277e:	683b      	ldr	r3, [r7, #0]
 8002780:	3301      	adds	r3, #1
 8002782:	d055      	beq.n	8002830 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002784:	f7fe fe6c 	bl	8001460 <HAL_GetTick>
 8002788:	0002      	movs	r2, r0
 800278a:	6a3b      	ldr	r3, [r7, #32]
 800278c:	1ad3      	subs	r3, r2, r3
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	429a      	cmp	r2, r3
 8002792:	d902      	bls.n	800279a <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002796:	2b00      	cmp	r3, #0
 8002798:	d142      	bne.n	8002820 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800279a:	68fb      	ldr	r3, [r7, #12]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	685a      	ldr	r2, [r3, #4]
 80027a0:	68fb      	ldr	r3, [r7, #12]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	21e0      	movs	r1, #224	; 0xe0
 80027a6:	438a      	bics	r2, r1
 80027a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	685a      	ldr	r2, [r3, #4]
 80027ae:	2382      	movs	r3, #130	; 0x82
 80027b0:	005b      	lsls	r3, r3, #1
 80027b2:	429a      	cmp	r2, r3
 80027b4:	d113      	bne.n	80027de <SPI_WaitFifoStateUntilTimeout+0xce>
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	689a      	ldr	r2, [r3, #8]
 80027ba:	2380      	movs	r3, #128	; 0x80
 80027bc:	021b      	lsls	r3, r3, #8
 80027be:	429a      	cmp	r2, r3
 80027c0:	d005      	beq.n	80027ce <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	689a      	ldr	r2, [r3, #8]
 80027c6:	2380      	movs	r3, #128	; 0x80
 80027c8:	00db      	lsls	r3, r3, #3
 80027ca:	429a      	cmp	r2, r3
 80027cc:	d107      	bne.n	80027de <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	681a      	ldr	r2, [r3, #0]
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	2140      	movs	r1, #64	; 0x40
 80027da:	438a      	bics	r2, r1
 80027dc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80027e2:	2380      	movs	r3, #128	; 0x80
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	429a      	cmp	r2, r3
 80027e8:	d110      	bne.n	800280c <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 80027ea:	68fb      	ldr	r3, [r7, #12]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	681a      	ldr	r2, [r3, #0]
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4916      	ldr	r1, [pc, #88]	; (8002850 <SPI_WaitFifoStateUntilTimeout+0x140>)
 80027f6:	400a      	ands	r2, r1
 80027f8:	601a      	str	r2, [r3, #0]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	681a      	ldr	r2, [r3, #0]
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	2180      	movs	r1, #128	; 0x80
 8002806:	0189      	lsls	r1, r1, #6
 8002808:	430a      	orrs	r2, r1
 800280a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	225d      	movs	r2, #93	; 0x5d
 8002810:	2101      	movs	r1, #1
 8002812:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	225c      	movs	r2, #92	; 0x5c
 8002818:	2100      	movs	r1, #0
 800281a:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e010      	b.n	8002842 <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002820:	69bb      	ldr	r3, [r7, #24]
 8002822:	2b00      	cmp	r3, #0
 8002824:	d101      	bne.n	800282a <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002826:	2300      	movs	r3, #0
 8002828:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800282a:	69bb      	ldr	r3, [r7, #24]
 800282c:	3b01      	subs	r3, #1
 800282e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	689b      	ldr	r3, [r3, #8]
 8002836:	68ba      	ldr	r2, [r7, #8]
 8002838:	4013      	ands	r3, r2
 800283a:	687a      	ldr	r2, [r7, #4]
 800283c:	429a      	cmp	r2, r3
 800283e:	d18e      	bne.n	800275e <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002840:	2300      	movs	r3, #0
}
 8002842:	0018      	movs	r0, r3
 8002844:	46bd      	mov	sp, r7
 8002846:	b00a      	add	sp, #40	; 0x28
 8002848:	bd80      	pop	{r7, pc}
 800284a:	46c0      	nop			; (mov r8, r8)
 800284c:	20000090 	.word	0x20000090
 8002850:	ffffdfff 	.word	0xffffdfff

08002854 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002854:	b580      	push	{r7, lr}
 8002856:	b086      	sub	sp, #24
 8002858:	af02      	add	r7, sp, #8
 800285a:	60f8      	str	r0, [r7, #12]
 800285c:	60b9      	str	r1, [r7, #8]
 800285e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002860:	68ba      	ldr	r2, [r7, #8]
 8002862:	23c0      	movs	r3, #192	; 0xc0
 8002864:	0159      	lsls	r1, r3, #5
 8002866:	68f8      	ldr	r0, [r7, #12]
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	9300      	str	r3, [sp, #0]
 800286c:	0013      	movs	r3, r2
 800286e:	2200      	movs	r2, #0
 8002870:	f7ff ff4e 	bl	8002710 <SPI_WaitFifoStateUntilTimeout>
 8002874:	1e03      	subs	r3, r0, #0
 8002876:	d007      	beq.n	8002888 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800287c:	2220      	movs	r2, #32
 800287e:	431a      	orrs	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002884:	2303      	movs	r3, #3
 8002886:	e027      	b.n	80028d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002888:	68ba      	ldr	r2, [r7, #8]
 800288a:	68f8      	ldr	r0, [r7, #12]
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	9300      	str	r3, [sp, #0]
 8002890:	0013      	movs	r3, r2
 8002892:	2200      	movs	r2, #0
 8002894:	2180      	movs	r1, #128	; 0x80
 8002896:	f7ff fead 	bl	80025f4 <SPI_WaitFlagStateUntilTimeout>
 800289a:	1e03      	subs	r3, r0, #0
 800289c:	d007      	beq.n	80028ae <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800289e:	68fb      	ldr	r3, [r7, #12]
 80028a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028a2:	2220      	movs	r2, #32
 80028a4:	431a      	orrs	r2, r3
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028aa:	2303      	movs	r3, #3
 80028ac:	e014      	b.n	80028d8 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80028ae:	68ba      	ldr	r2, [r7, #8]
 80028b0:	23c0      	movs	r3, #192	; 0xc0
 80028b2:	00d9      	lsls	r1, r3, #3
 80028b4:	68f8      	ldr	r0, [r7, #12]
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	9300      	str	r3, [sp, #0]
 80028ba:	0013      	movs	r3, r2
 80028bc:	2200      	movs	r2, #0
 80028be:	f7ff ff27 	bl	8002710 <SPI_WaitFifoStateUntilTimeout>
 80028c2:	1e03      	subs	r3, r0, #0
 80028c4:	d007      	beq.n	80028d6 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80028c6:	68fb      	ldr	r3, [r7, #12]
 80028c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80028ca:	2220      	movs	r2, #32
 80028cc:	431a      	orrs	r2, r3
 80028ce:	68fb      	ldr	r3, [r7, #12]
 80028d0:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80028d2:	2303      	movs	r3, #3
 80028d4:	e000      	b.n	80028d8 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	0018      	movs	r0, r3
 80028da:	46bd      	mov	sp, r7
 80028dc:	b004      	add	sp, #16
 80028de:	bd80      	pop	{r7, pc}

080028e0 <memset>:
 80028e0:	0003      	movs	r3, r0
 80028e2:	1882      	adds	r2, r0, r2
 80028e4:	4293      	cmp	r3, r2
 80028e6:	d100      	bne.n	80028ea <memset+0xa>
 80028e8:	4770      	bx	lr
 80028ea:	7019      	strb	r1, [r3, #0]
 80028ec:	3301      	adds	r3, #1
 80028ee:	e7f9      	b.n	80028e4 <memset+0x4>

080028f0 <__libc_init_array>:
 80028f0:	b570      	push	{r4, r5, r6, lr}
 80028f2:	2600      	movs	r6, #0
 80028f4:	4c0c      	ldr	r4, [pc, #48]	; (8002928 <__libc_init_array+0x38>)
 80028f6:	4d0d      	ldr	r5, [pc, #52]	; (800292c <__libc_init_array+0x3c>)
 80028f8:	1b64      	subs	r4, r4, r5
 80028fa:	10a4      	asrs	r4, r4, #2
 80028fc:	42a6      	cmp	r6, r4
 80028fe:	d109      	bne.n	8002914 <__libc_init_array+0x24>
 8002900:	2600      	movs	r6, #0
 8002902:	f000 f819 	bl	8002938 <_init>
 8002906:	4c0a      	ldr	r4, [pc, #40]	; (8002930 <__libc_init_array+0x40>)
 8002908:	4d0a      	ldr	r5, [pc, #40]	; (8002934 <__libc_init_array+0x44>)
 800290a:	1b64      	subs	r4, r4, r5
 800290c:	10a4      	asrs	r4, r4, #2
 800290e:	42a6      	cmp	r6, r4
 8002910:	d105      	bne.n	800291e <__libc_init_array+0x2e>
 8002912:	bd70      	pop	{r4, r5, r6, pc}
 8002914:	00b3      	lsls	r3, r6, #2
 8002916:	58eb      	ldr	r3, [r5, r3]
 8002918:	4798      	blx	r3
 800291a:	3601      	adds	r6, #1
 800291c:	e7ee      	b.n	80028fc <__libc_init_array+0xc>
 800291e:	00b3      	lsls	r3, r6, #2
 8002920:	58eb      	ldr	r3, [r5, r3]
 8002922:	4798      	blx	r3
 8002924:	3601      	adds	r6, #1
 8002926:	e7f2      	b.n	800290e <__libc_init_array+0x1e>
 8002928:	08002a3c 	.word	0x08002a3c
 800292c:	08002a3c 	.word	0x08002a3c
 8002930:	08002a40 	.word	0x08002a40
 8002934:	08002a3c 	.word	0x08002a3c

08002938 <_init>:
 8002938:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800293a:	46c0      	nop			; (mov r8, r8)
 800293c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800293e:	bc08      	pop	{r3}
 8002940:	469e      	mov	lr, r3
 8002942:	4770      	bx	lr

08002944 <_fini>:
 8002944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002946:	46c0      	nop			; (mov r8, r8)
 8002948:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800294a:	bc08      	pop	{r3}
 800294c:	469e      	mov	lr, r3
 800294e:	4770      	bx	lr
