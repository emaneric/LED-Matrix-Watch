
LED-Matrix-Watch.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003624  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000015c  080036e4  080036e4  000136e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003840  08003840  00020064  2**0
                  CONTENTS
  4 .ARM          00000000  08003840  08003840  00020064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003840  08003840  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003840  08003840  00013840  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003844  08003844  00013844  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08003848  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000264  20000064  080038ac  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200002c8  080038ac  000202c8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008744  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001928  00000000  00000000  00028813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000910  00000000  00000000  0002a140  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000006d8  00000000  00000000  0002aa50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013d49  00000000  00000000  0002b128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a332  00000000  00000000  0003ee71  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0007db5b  00000000  00000000  000491a3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000021e4  00000000  00000000  000c6d00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000c8ee4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000064 	.word	0x20000064
 80000e0:	00000000 	.word	0x00000000
 80000e4:	080036cc 	.word	0x080036cc

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000068 	.word	0x20000068
 8000104:	080036cc 	.word	0x080036cc

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fd32 	bl	8000c8e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f8b1 	bl	8000390 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 fa0b 	bl	8000648 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000232:	f000 f8f5 	bl	8000420 <MX_ADC1_Init>
  MX_SPI1_Init();
 8000236:	f000 f9c9 	bl	80005cc <MX_SPI1_Init>
  MX_RTC_Init();
 800023a:	f000 f95b 	bl	80004f4 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  set_time_auto();
 800023e:	f000 fa87 	bl	8000750 <set_time_auto>


  HAL_GPIO_WritePin(DIV_EN_GPIO_Port, DIV_EN_Pin, 0);
 8000242:	2380      	movs	r3, #128	; 0x80
 8000244:	021b      	lsls	r3, r3, #8
 8000246:	4848      	ldr	r0, [pc, #288]	; (8000368 <main+0x148>)
 8000248:	2200      	movs	r2, #0
 800024a:	0019      	movs	r1, r3
 800024c:	f001 fdf6 	bl	8001e3c <HAL_GPIO_WritePin>
  HAL_Delay(1);
 8000250:	2001      	movs	r0, #1
 8000252:	f000 fd99 	bl	8000d88 <HAL_Delay>

  //power on and clear LEDs
  LED_init();
 8000256:	f000 fb41 	bl	80008dc <LED_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  HAL_RTC_GetTime(&hrtc, &sTime1, FORMAT_BCD);
 800025a:	4944      	ldr	r1, [pc, #272]	; (800036c <main+0x14c>)
 800025c:	4b44      	ldr	r3, [pc, #272]	; (8000370 <main+0x150>)
 800025e:	2201      	movs	r2, #1
 8000260:	0018      	movs	r0, r3
 8000262:	f002 fb6d 	bl	8002940 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate1, FORMAT_BCD);
 8000266:	4943      	ldr	r1, [pc, #268]	; (8000374 <main+0x154>)
 8000268:	4b41      	ldr	r3, [pc, #260]	; (8000370 <main+0x150>)
 800026a:	2201      	movs	r2, #1
 800026c:	0018      	movs	r0, r3
 800026e:	f002 fc55 	bl	8002b1c <HAL_RTC_GetDate>

	  //get the time from the rtc and convert to decimal
	  uint8_t  hour1 = (sTime1.Hours & 0b110000) >> 4;	//Mask the 2 bits of hour tens and shift right to covert to decimal
 8000272:	4b3e      	ldr	r3, [pc, #248]	; (800036c <main+0x14c>)
 8000274:	781b      	ldrb	r3, [r3, #0]
 8000276:	111b      	asrs	r3, r3, #4
 8000278:	b2da      	uxtb	r2, r3
 800027a:	1dbb      	adds	r3, r7, #6
 800027c:	2103      	movs	r1, #3
 800027e:	400a      	ands	r2, r1
 8000280:	701a      	strb	r2, [r3, #0]
	  uint8_t  hour2 = sTime1.Hours & 0b001111;	//Mask 4 bits of hour tenths
 8000282:	4b3a      	ldr	r3, [pc, #232]	; (800036c <main+0x14c>)
 8000284:	781a      	ldrb	r2, [r3, #0]
 8000286:	1d7b      	adds	r3, r7, #5
 8000288:	210f      	movs	r1, #15
 800028a:	400a      	ands	r2, r1
 800028c:	701a      	strb	r2, [r3, #0]

	  uint8_t  minute1 = (sTime1.Minutes & 0b1110000) >> 4;
 800028e:	4b37      	ldr	r3, [pc, #220]	; (800036c <main+0x14c>)
 8000290:	785b      	ldrb	r3, [r3, #1]
 8000292:	111b      	asrs	r3, r3, #4
 8000294:	b2da      	uxtb	r2, r3
 8000296:	1d3b      	adds	r3, r7, #4
 8000298:	2107      	movs	r1, #7
 800029a:	400a      	ands	r2, r1
 800029c:	701a      	strb	r2, [r3, #0]
	  uint8_t  minute2 = (sTime1.Minutes &0b00001111);
 800029e:	4b33      	ldr	r3, [pc, #204]	; (800036c <main+0x14c>)
 80002a0:	785a      	ldrb	r2, [r3, #1]
 80002a2:	1cfb      	adds	r3, r7, #3
 80002a4:	210f      	movs	r1, #15
 80002a6:	400a      	ands	r2, r1
 80002a8:	701a      	strb	r2, [r3, #0]

	  HAL_Delay(1000);
 80002aa:	23fa      	movs	r3, #250	; 0xfa
 80002ac:	009b      	lsls	r3, r3, #2
 80002ae:	0018      	movs	r0, r3
 80002b0:	f000 fd6a 	bl	8000d88 <HAL_Delay>


	   */


	  HAL_ADC_Start(&hadc1);
 80002b4:	4b30      	ldr	r3, [pc, #192]	; (8000378 <main+0x158>)
 80002b6:	0018      	movs	r0, r3
 80002b8:	f001 f866 	bl	8001388 <HAL_ADC_Start>
	  HAL_Delay(10);
 80002bc:	200a      	movs	r0, #10
 80002be:	f000 fd63 	bl	8000d88 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 80002c2:	23fa      	movs	r3, #250	; 0xfa
 80002c4:	009a      	lsls	r2, r3, #2
 80002c6:	4b2c      	ldr	r3, [pc, #176]	; (8000378 <main+0x158>)
 80002c8:	0011      	movs	r1, r2
 80002ca:	0018      	movs	r0, r3
 80002cc:	f001 f8aa 	bl	8001424 <HAL_ADC_PollForConversion>
	  ADC_raw = HAL_ADC_GetValue(&hadc1);
 80002d0:	4b29      	ldr	r3, [pc, #164]	; (8000378 <main+0x158>)
 80002d2:	0018      	movs	r0, r3
 80002d4:	f001 f934 	bl	8001540 <HAL_ADC_GetValue>
 80002d8:	0003      	movs	r3, r0
 80002da:	b29a      	uxth	r2, r3
 80002dc:	4b27      	ldr	r3, [pc, #156]	; (800037c <main+0x15c>)
 80002de:	801a      	strh	r2, [r3, #0]

	  if (ADC_raw < 2975){
 80002e0:	4b26      	ldr	r3, [pc, #152]	; (800037c <main+0x15c>)
 80002e2:	881b      	ldrh	r3, [r3, #0]
 80002e4:	4a26      	ldr	r2, [pc, #152]	; (8000380 <main+0x160>)
 80002e6:	4293      	cmp	r3, r2
 80002e8:	d806      	bhi.n	80002f8 <main+0xd8>
		  //tx_buffer[] = {0b1110010, 0, 1, 0};
		  tx_buffer[2] = 0;
 80002ea:	4b26      	ldr	r3, [pc, #152]	; (8000384 <main+0x164>)
 80002ec:	2200      	movs	r2, #0
 80002ee:	709a      	strb	r2, [r3, #2]
		  tx_buffer[3] = 1;
 80002f0:	4b24      	ldr	r3, [pc, #144]	; (8000384 <main+0x164>)
 80002f2:	2201      	movs	r2, #1
 80002f4:	70da      	strb	r2, [r3, #3]
 80002f6:	e005      	b.n	8000304 <main+0xe4>
	  }
	  else{
		  tx_buffer[2] = 1;
 80002f8:	4b22      	ldr	r3, [pc, #136]	; (8000384 <main+0x164>)
 80002fa:	2201      	movs	r2, #1
 80002fc:	709a      	strb	r2, [r3, #2]
		  tx_buffer[3] = 0;
 80002fe:	4b21      	ldr	r3, [pc, #132]	; (8000384 <main+0x164>)
 8000300:	2200      	movs	r2, #0
 8000302:	70da      	strb	r2, [r3, #3]





	  tx_start_frame();
 8000304:	f000 fb20 	bl	8000948 <tx_start_frame>

	  for (uint8_t i = 0; i <= numLED; i++) {
 8000308:	1dfb      	adds	r3, r7, #7
 800030a:	2200      	movs	r2, #0
 800030c:	701a      	strb	r2, [r3, #0]
 800030e:	e010      	b.n	8000332 <main+0x112>

		  if (i == LED_index){
 8000310:	4b1d      	ldr	r3, [pc, #116]	; (8000388 <main+0x168>)
 8000312:	781b      	ldrb	r3, [r3, #0]
 8000314:	1dfa      	adds	r2, r7, #7
 8000316:	7812      	ldrb	r2, [r2, #0]
 8000318:	429a      	cmp	r2, r3
 800031a:	d005      	beq.n	8000328 <main+0x108>
			  //HAL_SPI_Transmit(&hspi1, tx_buffer2, 4, 100);
		  }

		  else{
			  HAL_SPI_Transmit(&hspi1, tx_buffer, 4, 100);
 800031c:	4919      	ldr	r1, [pc, #100]	; (8000384 <main+0x164>)
 800031e:	481b      	ldr	r0, [pc, #108]	; (800038c <main+0x16c>)
 8000320:	2364      	movs	r3, #100	; 0x64
 8000322:	2204      	movs	r2, #4
 8000324:	f002 fe08 	bl	8002f38 <HAL_SPI_Transmit>
	  for (uint8_t i = 0; i <= numLED; i++) {
 8000328:	1dfb      	adds	r3, r7, #7
 800032a:	781a      	ldrb	r2, [r3, #0]
 800032c:	1dfb      	adds	r3, r7, #7
 800032e:	3201      	adds	r2, #1
 8000330:	701a      	strb	r2, [r3, #0]
 8000332:	2254      	movs	r2, #84	; 0x54
 8000334:	1dfb      	adds	r3, r7, #7
 8000336:	781b      	ldrb	r3, [r3, #0]
 8000338:	4293      	cmp	r3, r2
 800033a:	d9e9      	bls.n	8000310 <main+0xf0>
		  }
	  }

	  tx_end_frame();
 800033c:	f000 fb14 	bl	8000968 <tx_end_frame>
	  HAL_Delay(50);
 8000340:	2032      	movs	r0, #50	; 0x32
 8000342:	f000 fd21 	bl	8000d88 <HAL_Delay>

	  if (LED_index >= numLED){
 8000346:	4b10      	ldr	r3, [pc, #64]	; (8000388 <main+0x168>)
 8000348:	781b      	ldrb	r3, [r3, #0]
 800034a:	2254      	movs	r2, #84	; 0x54
 800034c:	4293      	cmp	r3, r2
 800034e:	d303      	bcc.n	8000358 <main+0x138>
		  LED_index = 0;
 8000350:	4b0d      	ldr	r3, [pc, #52]	; (8000388 <main+0x168>)
 8000352:	2200      	movs	r2, #0
 8000354:	701a      	strb	r2, [r3, #0]
 8000356:	e780      	b.n	800025a <main+0x3a>
	  }
	  else{
		  LED_index++;
 8000358:	4b0b      	ldr	r3, [pc, #44]	; (8000388 <main+0x168>)
 800035a:	781b      	ldrb	r3, [r3, #0]
 800035c:	3301      	adds	r3, #1
 800035e:	b2da      	uxtb	r2, r3
 8000360:	4b09      	ldr	r3, [pc, #36]	; (8000388 <main+0x168>)
 8000362:	701a      	strb	r2, [r3, #0]
  {
 8000364:	e779      	b.n	800025a <main+0x3a>
 8000366:	46c0      	nop			; (mov r8, r8)
 8000368:	50000800 	.word	0x50000800
 800036c:	20000174 	.word	0x20000174
 8000370:	200000e4 	.word	0x200000e4
 8000374:	20000188 	.word	0x20000188
 8000378:	20000080 	.word	0x20000080
 800037c:	20000172 	.word	0x20000172
 8000380:	00000b9e 	.word	0x00000b9e
 8000384:	20000004 	.word	0x20000004
 8000388:	20000170 	.word	0x20000170
 800038c:	2000010c 	.word	0x2000010c

08000390 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000390:	b590      	push	{r4, r7, lr}
 8000392:	b08d      	sub	sp, #52	; 0x34
 8000394:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000396:	2414      	movs	r4, #20
 8000398:	193b      	adds	r3, r7, r4
 800039a:	0018      	movs	r0, r3
 800039c:	231c      	movs	r3, #28
 800039e:	001a      	movs	r2, r3
 80003a0:	2100      	movs	r1, #0
 80003a2:	f003 f961 	bl	8003668 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80003a6:	003b      	movs	r3, r7
 80003a8:	0018      	movs	r0, r3
 80003aa:	2314      	movs	r3, #20
 80003ac:	001a      	movs	r2, r3
 80003ae:	2100      	movs	r1, #0
 80003b0:	f003 f95a 	bl	8003668 <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 80003b4:	193b      	adds	r3, r7, r4
 80003b6:	220a      	movs	r2, #10
 80003b8:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80003ba:	193b      	adds	r3, r7, r4
 80003bc:	2280      	movs	r2, #128	; 0x80
 80003be:	0052      	lsls	r2, r2, #1
 80003c0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV8;
 80003c2:	193b      	adds	r3, r7, r4
 80003c4:	22c0      	movs	r2, #192	; 0xc0
 80003c6:	0152      	lsls	r2, r2, #5
 80003c8:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80003ca:	193b      	adds	r3, r7, r4
 80003cc:	2240      	movs	r2, #64	; 0x40
 80003ce:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80003d0:	193b      	adds	r3, r7, r4
 80003d2:	2201      	movs	r2, #1
 80003d4:	619a      	str	r2, [r3, #24]

  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80003d6:	193b      	adds	r3, r7, r4
 80003d8:	0018      	movs	r0, r3
 80003da:	f001 fd4d 	bl	8001e78 <HAL_RCC_OscConfig>
 80003de:	1e03      	subs	r3, r0, #0
 80003e0:	d001      	beq.n	80003e6 <SystemClock_Config+0x56>
  {
    Error_Handler();
 80003e2:	f000 fae1 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80003e6:	003b      	movs	r3, r7
 80003e8:	2207      	movs	r2, #7
 80003ea:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 80003ec:	003b      	movs	r3, r7
 80003ee:	2200      	movs	r2, #0
 80003f0:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80003f2:	003b      	movs	r3, r7
 80003f4:	2200      	movs	r2, #0
 80003f6:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 80003f8:	003b      	movs	r3, r7
 80003fa:	2200      	movs	r2, #0
 80003fc:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003fe:	003b      	movs	r3, r7
 8000400:	2200      	movs	r2, #0
 8000402:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000404:	003b      	movs	r3, r7
 8000406:	2100      	movs	r1, #0
 8000408:	0018      	movs	r0, r3
 800040a:	f001 ff19 	bl	8002240 <HAL_RCC_ClockConfig>
 800040e:	1e03      	subs	r3, r0, #0
 8000410:	d001      	beq.n	8000416 <SystemClock_Config+0x86>
  {
    Error_Handler();
 8000412:	f000 fac9 	bl	80009a8 <Error_Handler>
  }
}
 8000416:	46c0      	nop			; (mov r8, r8)
 8000418:	46bd      	mov	sp, r7
 800041a:	b00d      	add	sp, #52	; 0x34
 800041c:	bd90      	pop	{r4, r7, pc}
	...

08000420 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000420:	b580      	push	{r7, lr}
 8000422:	b084      	sub	sp, #16
 8000424:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000426:	1d3b      	adds	r3, r7, #4
 8000428:	0018      	movs	r0, r3
 800042a:	230c      	movs	r3, #12
 800042c:	001a      	movs	r2, r3
 800042e:	2100      	movs	r1, #0
 8000430:	f003 f91a 	bl	8003668 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000434:	4b2d      	ldr	r3, [pc, #180]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000436:	4a2e      	ldr	r2, [pc, #184]	; (80004f0 <MX_ADC1_Init+0xd0>)
 8000438:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 800043a:	4b2c      	ldr	r3, [pc, #176]	; (80004ec <MX_ADC1_Init+0xcc>)
 800043c:	22c0      	movs	r2, #192	; 0xc0
 800043e:	0612      	lsls	r2, r2, #24
 8000440:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000442:	4b2a      	ldr	r3, [pc, #168]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000444:	2200      	movs	r2, #0
 8000446:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000448:	4b28      	ldr	r3, [pc, #160]	; (80004ec <MX_ADC1_Init+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800044e:	4b27      	ldr	r3, [pc, #156]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000450:	2200      	movs	r2, #0
 8000452:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000454:	4b25      	ldr	r3, [pc, #148]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000456:	2204      	movs	r2, #4
 8000458:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 800045a:	4b24      	ldr	r3, [pc, #144]	; (80004ec <MX_ADC1_Init+0xcc>)
 800045c:	2201      	movs	r2, #1
 800045e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = ENABLE;
 8000460:	4b22      	ldr	r3, [pc, #136]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000462:	2201      	movs	r2, #1
 8000464:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000466:	4b21      	ldr	r3, [pc, #132]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000468:	2200      	movs	r2, #0
 800046a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800046c:	4b1f      	ldr	r3, [pc, #124]	; (80004ec <MX_ADC1_Init+0xcc>)
 800046e:	2201      	movs	r2, #1
 8000470:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000472:	4b1e      	ldr	r3, [pc, #120]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000474:	2220      	movs	r2, #32
 8000476:	2100      	movs	r1, #0
 8000478:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800047a:	4b1c      	ldr	r3, [pc, #112]	; (80004ec <MX_ADC1_Init+0xcc>)
 800047c:	2200      	movs	r2, #0
 800047e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000480:	4b1a      	ldr	r3, [pc, #104]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000482:	2200      	movs	r2, #0
 8000484:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000486:	4b19      	ldr	r3, [pc, #100]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000488:	222c      	movs	r2, #44	; 0x2c
 800048a:	2100      	movs	r1, #0
 800048c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800048e:	4b17      	ldr	r3, [pc, #92]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000490:	2200      	movs	r2, #0
 8000492:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000494:	4b15      	ldr	r3, [pc, #84]	; (80004ec <MX_ADC1_Init+0xcc>)
 8000496:	2200      	movs	r2, #0
 8000498:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800049a:	4b14      	ldr	r3, [pc, #80]	; (80004ec <MX_ADC1_Init+0xcc>)
 800049c:	2200      	movs	r2, #0
 800049e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80004a0:	4b12      	ldr	r3, [pc, #72]	; (80004ec <MX_ADC1_Init+0xcc>)
 80004a2:	223c      	movs	r2, #60	; 0x3c
 80004a4:	2100      	movs	r1, #0
 80004a6:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80004a8:	4b10      	ldr	r3, [pc, #64]	; (80004ec <MX_ADC1_Init+0xcc>)
 80004aa:	2200      	movs	r2, #0
 80004ac:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80004ae:	4b0f      	ldr	r3, [pc, #60]	; (80004ec <MX_ADC1_Init+0xcc>)
 80004b0:	0018      	movs	r0, r3
 80004b2:	f000 fdc3 	bl	800103c <HAL_ADC_Init>
 80004b6:	1e03      	subs	r3, r0, #0
 80004b8:	d001      	beq.n	80004be <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80004ba:	f000 fa75 	bl	80009a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80004be:	1d3b      	adds	r3, r7, #4
 80004c0:	2201      	movs	r2, #1
 80004c2:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80004c4:	1d3b      	adds	r3, r7, #4
 80004c6:	2200      	movs	r2, #0
 80004c8:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80004ca:	1d3b      	adds	r3, r7, #4
 80004cc:	2200      	movs	r2, #0
 80004ce:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80004d0:	1d3a      	adds	r2, r7, #4
 80004d2:	4b06      	ldr	r3, [pc, #24]	; (80004ec <MX_ADC1_Init+0xcc>)
 80004d4:	0011      	movs	r1, r2
 80004d6:	0018      	movs	r0, r3
 80004d8:	f001 f83e 	bl	8001558 <HAL_ADC_ConfigChannel>
 80004dc:	1e03      	subs	r3, r0, #0
 80004de:	d001      	beq.n	80004e4 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 80004e0:	f000 fa62 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80004e4:	46c0      	nop			; (mov r8, r8)
 80004e6:	46bd      	mov	sp, r7
 80004e8:	b004      	add	sp, #16
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	20000080 	.word	0x20000080
 80004f0:	40012400 	.word	0x40012400

080004f4 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 80004f4:	b580      	push	{r7, lr}
 80004f6:	b086      	sub	sp, #24
 80004f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80004fa:	1d3b      	adds	r3, r7, #4
 80004fc:	0018      	movs	r0, r3
 80004fe:	2314      	movs	r3, #20
 8000500:	001a      	movs	r2, r3
 8000502:	2100      	movs	r1, #0
 8000504:	f003 f8b0 	bl	8003668 <memset>
  RTC_DateTypeDef sDate = {0};
 8000508:	003b      	movs	r3, r7
 800050a:	2200      	movs	r2, #0
 800050c:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 800050e:	4b2d      	ldr	r3, [pc, #180]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000510:	4a2d      	ldr	r2, [pc, #180]	; (80005c8 <MX_RTC_Init+0xd4>)
 8000512:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8000514:	4b2b      	ldr	r3, [pc, #172]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000516:	2200      	movs	r2, #0
 8000518:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800051a:	4b2a      	ldr	r3, [pc, #168]	; (80005c4 <MX_RTC_Init+0xd0>)
 800051c:	227f      	movs	r2, #127	; 0x7f
 800051e:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8000520:	4b28      	ldr	r3, [pc, #160]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000522:	22ff      	movs	r2, #255	; 0xff
 8000524:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8000526:	4b27      	ldr	r3, [pc, #156]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000528:	2200      	movs	r2, #0
 800052a:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 800052c:	4b25      	ldr	r3, [pc, #148]	; (80005c4 <MX_RTC_Init+0xd0>)
 800052e:	2200      	movs	r2, #0
 8000530:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8000532:	4b24      	ldr	r3, [pc, #144]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000534:	2200      	movs	r2, #0
 8000536:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8000538:	4b22      	ldr	r3, [pc, #136]	; (80005c4 <MX_RTC_Init+0xd0>)
 800053a:	2280      	movs	r2, #128	; 0x80
 800053c:	05d2      	lsls	r2, r2, #23
 800053e:	61da      	str	r2, [r3, #28]
  hrtc.Init.OutPutPullUp = RTC_OUTPUT_PULLUP_NONE;
 8000540:	4b20      	ldr	r3, [pc, #128]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000542:	2200      	movs	r2, #0
 8000544:	621a      	str	r2, [r3, #32]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8000546:	4b1f      	ldr	r3, [pc, #124]	; (80005c4 <MX_RTC_Init+0xd0>)
 8000548:	0018      	movs	r0, r3
 800054a:	f002 f8b3 	bl	80026b4 <HAL_RTC_Init>
 800054e:	1e03      	subs	r3, r0, #0
 8000550:	d001      	beq.n	8000556 <MX_RTC_Init+0x62>
  {
    Error_Handler();
 8000552:	f000 fa29 	bl	80009a8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x22;
 8000556:	1d3b      	adds	r3, r7, #4
 8000558:	2222      	movs	r2, #34	; 0x22
 800055a:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0x42;
 800055c:	1d3b      	adds	r3, r7, #4
 800055e:	2242      	movs	r2, #66	; 0x42
 8000560:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0x0;
 8000562:	1d3b      	adds	r3, r7, #4
 8000564:	2200      	movs	r2, #0
 8000566:	709a      	strb	r2, [r3, #2]
  sTime.SubSeconds = 0x0;
 8000568:	1d3b      	adds	r3, r7, #4
 800056a:	2200      	movs	r2, #0
 800056c:	605a      	str	r2, [r3, #4]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800056e:	1d3b      	adds	r3, r7, #4
 8000570:	2200      	movs	r2, #0
 8000572:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8000574:	1d3b      	adds	r3, r7, #4
 8000576:	2200      	movs	r2, #0
 8000578:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800057a:	1d39      	adds	r1, r7, #4
 800057c:	4b11      	ldr	r3, [pc, #68]	; (80005c4 <MX_RTC_Init+0xd0>)
 800057e:	2201      	movs	r2, #1
 8000580:	0018      	movs	r0, r3
 8000582:	f002 f935 	bl	80027f0 <HAL_RTC_SetTime>
 8000586:	1e03      	subs	r3, r0, #0
 8000588:	d001      	beq.n	800058e <MX_RTC_Init+0x9a>
  {
    Error_Handler();
 800058a:	f000 fa0d 	bl	80009a8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800058e:	003b      	movs	r3, r7
 8000590:	2201      	movs	r2, #1
 8000592:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000594:	003b      	movs	r3, r7
 8000596:	2201      	movs	r2, #1
 8000598:	705a      	strb	r2, [r3, #1]
  sDate.Date = 0x29;
 800059a:	003b      	movs	r3, r7
 800059c:	2229      	movs	r2, #41	; 0x29
 800059e:	709a      	strb	r2, [r3, #2]
  sDate.Year = 0x24;
 80005a0:	003b      	movs	r3, r7
 80005a2:	2224      	movs	r2, #36	; 0x24
 80005a4:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80005a6:	0039      	movs	r1, r7
 80005a8:	4b06      	ldr	r3, [pc, #24]	; (80005c4 <MX_RTC_Init+0xd0>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	0018      	movs	r0, r3
 80005ae:	f002 fa23 	bl	80029f8 <HAL_RTC_SetDate>
 80005b2:	1e03      	subs	r3, r0, #0
 80005b4:	d001      	beq.n	80005ba <MX_RTC_Init+0xc6>
  {
    Error_Handler();
 80005b6:	f000 f9f7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80005ba:	46c0      	nop			; (mov r8, r8)
 80005bc:	46bd      	mov	sp, r7
 80005be:	b006      	add	sp, #24
 80005c0:	bd80      	pop	{r7, pc}
 80005c2:	46c0      	nop			; (mov r8, r8)
 80005c4:	200000e4 	.word	0x200000e4
 80005c8:	40002800 	.word	0x40002800

080005cc <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80005d0:	4b1b      	ldr	r3, [pc, #108]	; (8000640 <MX_SPI1_Init+0x74>)
 80005d2:	4a1c      	ldr	r2, [pc, #112]	; (8000644 <MX_SPI1_Init+0x78>)
 80005d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80005d6:	4b1a      	ldr	r3, [pc, #104]	; (8000640 <MX_SPI1_Init+0x74>)
 80005d8:	2282      	movs	r2, #130	; 0x82
 80005da:	0052      	lsls	r2, r2, #1
 80005dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80005de:	4b18      	ldr	r3, [pc, #96]	; (8000640 <MX_SPI1_Init+0x74>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80005e4:	4b16      	ldr	r3, [pc, #88]	; (8000640 <MX_SPI1_Init+0x74>)
 80005e6:	22e0      	movs	r2, #224	; 0xe0
 80005e8:	00d2      	lsls	r2, r2, #3
 80005ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80005ec:	4b14      	ldr	r3, [pc, #80]	; (8000640 <MX_SPI1_Init+0x74>)
 80005ee:	2200      	movs	r2, #0
 80005f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80005f2:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MX_SPI1_Init+0x74>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80005f8:	4b11      	ldr	r3, [pc, #68]	; (8000640 <MX_SPI1_Init+0x74>)
 80005fa:	2280      	movs	r2, #128	; 0x80
 80005fc:	0092      	lsls	r2, r2, #2
 80005fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000600:	4b0f      	ldr	r3, [pc, #60]	; (8000640 <MX_SPI1_Init+0x74>)
 8000602:	2200      	movs	r2, #0
 8000604:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000606:	4b0e      	ldr	r3, [pc, #56]	; (8000640 <MX_SPI1_Init+0x74>)
 8000608:	2200      	movs	r2, #0
 800060a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800060c:	4b0c      	ldr	r3, [pc, #48]	; (8000640 <MX_SPI1_Init+0x74>)
 800060e:	2200      	movs	r2, #0
 8000610:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000612:	4b0b      	ldr	r3, [pc, #44]	; (8000640 <MX_SPI1_Init+0x74>)
 8000614:	2200      	movs	r2, #0
 8000616:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <MX_SPI1_Init+0x74>)
 800061a:	2207      	movs	r2, #7
 800061c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800061e:	4b08      	ldr	r3, [pc, #32]	; (8000640 <MX_SPI1_Init+0x74>)
 8000620:	2200      	movs	r2, #0
 8000622:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8000624:	4b06      	ldr	r3, [pc, #24]	; (8000640 <MX_SPI1_Init+0x74>)
 8000626:	2208      	movs	r2, #8
 8000628:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800062a:	4b05      	ldr	r3, [pc, #20]	; (8000640 <MX_SPI1_Init+0x74>)
 800062c:	0018      	movs	r0, r3
 800062e:	f002 fbcb 	bl	8002dc8 <HAL_SPI_Init>
 8000632:	1e03      	subs	r3, r0, #0
 8000634:	d001      	beq.n	800063a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8000636:	f000 f9b7 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800063a:	46c0      	nop			; (mov r8, r8)
 800063c:	46bd      	mov	sp, r7
 800063e:	bd80      	pop	{r7, pc}
 8000640:	2000010c 	.word	0x2000010c
 8000644:	40013000 	.word	0x40013000

08000648 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000648:	b590      	push	{r4, r7, lr}
 800064a:	b089      	sub	sp, #36	; 0x24
 800064c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800064e:	240c      	movs	r4, #12
 8000650:	193b      	adds	r3, r7, r4
 8000652:	0018      	movs	r0, r3
 8000654:	2314      	movs	r3, #20
 8000656:	001a      	movs	r2, r3
 8000658:	2100      	movs	r1, #0
 800065a:	f003 f805 	bl	8003668 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800065e:	4b39      	ldr	r3, [pc, #228]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000660:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000662:	4b38      	ldr	r3, [pc, #224]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000664:	2104      	movs	r1, #4
 8000666:	430a      	orrs	r2, r1
 8000668:	635a      	str	r2, [r3, #52]	; 0x34
 800066a:	4b36      	ldr	r3, [pc, #216]	; (8000744 <MX_GPIO_Init+0xfc>)
 800066c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800066e:	2204      	movs	r2, #4
 8000670:	4013      	ands	r3, r2
 8000672:	60bb      	str	r3, [r7, #8]
 8000674:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000676:	4b33      	ldr	r3, [pc, #204]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000678:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800067a:	4b32      	ldr	r3, [pc, #200]	; (8000744 <MX_GPIO_Init+0xfc>)
 800067c:	2101      	movs	r1, #1
 800067e:	430a      	orrs	r2, r1
 8000680:	635a      	str	r2, [r3, #52]	; 0x34
 8000682:	4b30      	ldr	r3, [pc, #192]	; (8000744 <MX_GPIO_Init+0xfc>)
 8000684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000686:	2201      	movs	r2, #1
 8000688:	4013      	ands	r3, r2
 800068a:	607b      	str	r3, [r7, #4]
 800068c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIV_EN_GPIO_Port, DIV_EN_Pin, GPIO_PIN_RESET);
 800068e:	2380      	movs	r3, #128	; 0x80
 8000690:	021b      	lsls	r3, r3, #8
 8000692:	482d      	ldr	r0, [pc, #180]	; (8000748 <MX_GPIO_Init+0x100>)
 8000694:	2200      	movs	r2, #0
 8000696:	0019      	movs	r1, r3
 8000698:	f001 fbd0 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
 800069c:	23a0      	movs	r3, #160	; 0xa0
 800069e:	05db      	lsls	r3, r3, #23
 80006a0:	2200      	movs	r2, #0
 80006a2:	2108      	movs	r1, #8
 80006a4:	0018      	movs	r0, r3
 80006a6:	f001 fbc9 	bl	8001e3c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIV_EN_Pin */
  GPIO_InitStruct.Pin = DIV_EN_Pin;
 80006aa:	193b      	adds	r3, r7, r4
 80006ac:	2280      	movs	r2, #128	; 0x80
 80006ae:	0212      	lsls	r2, r2, #8
 80006b0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006b2:	193b      	adds	r3, r7, r4
 80006b4:	2201      	movs	r2, #1
 80006b6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006b8:	193b      	adds	r3, r7, r4
 80006ba:	2200      	movs	r2, #0
 80006bc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006be:	193b      	adds	r3, r7, r4
 80006c0:	2200      	movs	r2, #0
 80006c2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIV_EN_GPIO_Port, &GPIO_InitStruct);
 80006c4:	193b      	adds	r3, r7, r4
 80006c6:	4a20      	ldr	r2, [pc, #128]	; (8000748 <MX_GPIO_Init+0x100>)
 80006c8:	0019      	movs	r1, r3
 80006ca:	0010      	movs	r0, r2
 80006cc:	f001 fa4c 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_EN_Pin */
  GPIO_InitStruct.Pin = LED_EN_Pin;
 80006d0:	193b      	adds	r3, r7, r4
 80006d2:	2208      	movs	r2, #8
 80006d4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006d6:	193b      	adds	r3, r7, r4
 80006d8:	2201      	movs	r2, #1
 80006da:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006dc:	193b      	adds	r3, r7, r4
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006e2:	193b      	adds	r3, r7, r4
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_EN_GPIO_Port, &GPIO_InitStruct);
 80006e8:	193a      	adds	r2, r7, r4
 80006ea:	23a0      	movs	r3, #160	; 0xa0
 80006ec:	05db      	lsls	r3, r3, #23
 80006ee:	0011      	movs	r1, r2
 80006f0:	0018      	movs	r0, r3
 80006f2:	f001 fa39 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI_INT_1_Pin BMI_INT_2_Pin EXT_RTC_INT_Pin */
  GPIO_InitStruct.Pin = BMI_INT_1_Pin|BMI_INT_2_Pin|EXT_RTC_INT_Pin;
 80006f6:	193b      	adds	r3, r7, r4
 80006f8:	228c      	movs	r2, #140	; 0x8c
 80006fa:	0152      	lsls	r2, r2, #5
 80006fc:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80006fe:	193b      	adds	r3, r7, r4
 8000700:	4a12      	ldr	r2, [pc, #72]	; (800074c <MX_GPIO_Init+0x104>)
 8000702:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000704:	193b      	adds	r3, r7, r4
 8000706:	2200      	movs	r2, #0
 8000708:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800070a:	193a      	adds	r2, r7, r4
 800070c:	23a0      	movs	r3, #160	; 0xa0
 800070e:	05db      	lsls	r3, r3, #23
 8000710:	0011      	movs	r1, r2
 8000712:	0018      	movs	r0, r3
 8000714:	f001 fa28 	bl	8001b68 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000718:	0021      	movs	r1, r4
 800071a:	187b      	adds	r3, r7, r1
 800071c:	2280      	movs	r2, #128	; 0x80
 800071e:	0112      	lsls	r2, r2, #4
 8000720:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000722:	187b      	adds	r3, r7, r1
 8000724:	2200      	movs	r2, #0
 8000726:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000728:	187b      	adds	r3, r7, r1
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 800072e:	187a      	adds	r2, r7, r1
 8000730:	23a0      	movs	r3, #160	; 0xa0
 8000732:	05db      	lsls	r3, r3, #23
 8000734:	0011      	movs	r1, r2
 8000736:	0018      	movs	r0, r3
 8000738:	f001 fa16 	bl	8001b68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800073c:	46c0      	nop			; (mov r8, r8)
 800073e:	46bd      	mov	sp, r7
 8000740:	b009      	add	sp, #36	; 0x24
 8000742:	bd90      	pop	{r4, r7, pc}
 8000744:	40021000 	.word	0x40021000
 8000748:	50000800 	.word	0x50000800
 800074c:	10110000 	.word	0x10110000

08000750 <set_time_auto>:

/* USER CODE BEGIN 4 */

void set_time_auto(void)
{
 8000750:	b5b0      	push	{r4, r5, r7, lr}
 8000752:	b08c      	sub	sp, #48	; 0x30
 8000754:	af00      	add	r7, sp, #0
	//Get the time at compile and sets RTC with this time
	//Add a pre-build command in project properties to touch <project_name>.elf so that it is always rebuilt

	const uint8_t compile_datetime[] = __DATE__ " " __TIME__;
 8000756:	2518      	movs	r5, #24
 8000758:	197b      	adds	r3, r7, r5
 800075a:	4a5c      	ldr	r2, [pc, #368]	; (80008cc <set_time_auto+0x17c>)
 800075c:	ca13      	ldmia	r2!, {r0, r1, r4}
 800075e:	c313      	stmia	r3!, {r0, r1, r4}
 8000760:	ca03      	ldmia	r2!, {r0, r1}
 8000762:	c303      	stmia	r3!, {r0, r1}
 8000764:	7812      	ldrb	r2, [r2, #0]
 8000766:	701a      	strb	r2, [r3, #0]

	uint8_t compile_day[] = {compile_datetime[4], compile_datetime[5]};
 8000768:	197b      	adds	r3, r7, r5
 800076a:	791a      	ldrb	r2, [r3, #4]
 800076c:	2114      	movs	r1, #20
 800076e:	187b      	adds	r3, r7, r1
 8000770:	701a      	strb	r2, [r3, #0]
 8000772:	197b      	adds	r3, r7, r5
 8000774:	795a      	ldrb	r2, [r3, #5]
 8000776:	187b      	adds	r3, r7, r1
 8000778:	705a      	strb	r2, [r3, #1]
	//uint8_t compile_day_int = atoi(compile_day);
	sDate1.Date = atoi(compile_day);
 800077a:	187b      	adds	r3, r7, r1
 800077c:	0018      	movs	r0, r3
 800077e:	f002 fedb 	bl	8003538 <atoi>
 8000782:	0003      	movs	r3, r0
 8000784:	b2da      	uxtb	r2, r3
 8000786:	4b52      	ldr	r3, [pc, #328]	; (80008d0 <set_time_auto+0x180>)
 8000788:	709a      	strb	r2, [r3, #2]

	//uint8_t compile_month_int = MONTH;
	sDate1.Month = MONTH;
 800078a:	236e      	movs	r3, #110	; 0x6e
 800078c:	2b6e      	cmp	r3, #110	; 0x6e
 800078e:	d106      	bne.n	800079e <set_time_auto+0x4e>
 8000790:	2361      	movs	r3, #97	; 0x61
 8000792:	2b61      	cmp	r3, #97	; 0x61
 8000794:	d101      	bne.n	800079a <set_time_auto+0x4a>
 8000796:	2301      	movs	r3, #1
 8000798:	e02f      	b.n	80007fa <set_time_auto+0xaa>
 800079a:	2306      	movs	r3, #6
 800079c:	e02d      	b.n	80007fa <set_time_auto+0xaa>
 800079e:	236e      	movs	r3, #110	; 0x6e
 80007a0:	2b62      	cmp	r3, #98	; 0x62
 80007a2:	d029      	beq.n	80007f8 <set_time_auto+0xa8>
 80007a4:	236e      	movs	r3, #110	; 0x6e
 80007a6:	2b72      	cmp	r3, #114	; 0x72
 80007a8:	d106      	bne.n	80007b8 <set_time_auto+0x68>
 80007aa:	234a      	movs	r3, #74	; 0x4a
 80007ac:	2b4d      	cmp	r3, #77	; 0x4d
 80007ae:	d101      	bne.n	80007b4 <set_time_auto+0x64>
 80007b0:	2303      	movs	r3, #3
 80007b2:	e022      	b.n	80007fa <set_time_auto+0xaa>
 80007b4:	2304      	movs	r3, #4
 80007b6:	e020      	b.n	80007fa <set_time_auto+0xaa>
 80007b8:	236e      	movs	r3, #110	; 0x6e
 80007ba:	2b79      	cmp	r3, #121	; 0x79
 80007bc:	d01a      	beq.n	80007f4 <set_time_auto+0xa4>
 80007be:	236e      	movs	r3, #110	; 0x6e
 80007c0:	2b6c      	cmp	r3, #108	; 0x6c
 80007c2:	d015      	beq.n	80007f0 <set_time_auto+0xa0>
 80007c4:	236e      	movs	r3, #110	; 0x6e
 80007c6:	2b67      	cmp	r3, #103	; 0x67
 80007c8:	d010      	beq.n	80007ec <set_time_auto+0x9c>
 80007ca:	236e      	movs	r3, #110	; 0x6e
 80007cc:	2b70      	cmp	r3, #112	; 0x70
 80007ce:	d00b      	beq.n	80007e8 <set_time_auto+0x98>
 80007d0:	236e      	movs	r3, #110	; 0x6e
 80007d2:	2b74      	cmp	r3, #116	; 0x74
 80007d4:	d006      	beq.n	80007e4 <set_time_auto+0x94>
 80007d6:	236e      	movs	r3, #110	; 0x6e
 80007d8:	2b76      	cmp	r3, #118	; 0x76
 80007da:	d101      	bne.n	80007e0 <set_time_auto+0x90>
 80007dc:	230b      	movs	r3, #11
 80007de:	e00c      	b.n	80007fa <set_time_auto+0xaa>
 80007e0:	230c      	movs	r3, #12
 80007e2:	e00a      	b.n	80007fa <set_time_auto+0xaa>
 80007e4:	230a      	movs	r3, #10
 80007e6:	e008      	b.n	80007fa <set_time_auto+0xaa>
 80007e8:	2309      	movs	r3, #9
 80007ea:	e006      	b.n	80007fa <set_time_auto+0xaa>
 80007ec:	2308      	movs	r3, #8
 80007ee:	e004      	b.n	80007fa <set_time_auto+0xaa>
 80007f0:	2307      	movs	r3, #7
 80007f2:	e002      	b.n	80007fa <set_time_auto+0xaa>
 80007f4:	2305      	movs	r3, #5
 80007f6:	e000      	b.n	80007fa <set_time_auto+0xaa>
 80007f8:	2302      	movs	r3, #2
 80007fa:	4a35      	ldr	r2, [pc, #212]	; (80008d0 <set_time_auto+0x180>)
 80007fc:	7053      	strb	r3, [r2, #1]

	uint8_t compile_year[] = {compile_datetime[9], compile_datetime[10]};
 80007fe:	2418      	movs	r4, #24
 8000800:	193b      	adds	r3, r7, r4
 8000802:	7a5a      	ldrb	r2, [r3, #9]
 8000804:	2110      	movs	r1, #16
 8000806:	187b      	adds	r3, r7, r1
 8000808:	701a      	strb	r2, [r3, #0]
 800080a:	193b      	adds	r3, r7, r4
 800080c:	7a9a      	ldrb	r2, [r3, #10]
 800080e:	187b      	adds	r3, r7, r1
 8000810:	705a      	strb	r2, [r3, #1]
	//uint8_t compile_year_int = atoi(compile_year);
	sDate1.Year = atoi(compile_year);
 8000812:	187b      	adds	r3, r7, r1
 8000814:	0018      	movs	r0, r3
 8000816:	f002 fe8f 	bl	8003538 <atoi>
 800081a:	0003      	movs	r3, r0
 800081c:	b2da      	uxtb	r2, r3
 800081e:	4b2c      	ldr	r3, [pc, #176]	; (80008d0 <set_time_auto+0x180>)
 8000820:	70da      	strb	r2, [r3, #3]

	uint8_t compile_hours[] = {compile_datetime[12], compile_datetime[13]};
 8000822:	193b      	adds	r3, r7, r4
 8000824:	7b1a      	ldrb	r2, [r3, #12]
 8000826:	210c      	movs	r1, #12
 8000828:	187b      	adds	r3, r7, r1
 800082a:	701a      	strb	r2, [r3, #0]
 800082c:	193b      	adds	r3, r7, r4
 800082e:	7b5a      	ldrb	r2, [r3, #13]
 8000830:	187b      	adds	r3, r7, r1
 8000832:	705a      	strb	r2, [r3, #1]
	//uint8_t compile_hours_int = atoi(compile_hours);
	sTime1.Hours = atoi(compile_hours);
 8000834:	187b      	adds	r3, r7, r1
 8000836:	0018      	movs	r0, r3
 8000838:	f002 fe7e 	bl	8003538 <atoi>
 800083c:	0003      	movs	r3, r0
 800083e:	b2da      	uxtb	r2, r3
 8000840:	4b24      	ldr	r3, [pc, #144]	; (80008d4 <set_time_auto+0x184>)
 8000842:	701a      	strb	r2, [r3, #0]

	uint8_t compile_minutes[] = {compile_datetime[15], compile_datetime[16]};
 8000844:	193b      	adds	r3, r7, r4
 8000846:	7bda      	ldrb	r2, [r3, #15]
 8000848:	2108      	movs	r1, #8
 800084a:	187b      	adds	r3, r7, r1
 800084c:	701a      	strb	r2, [r3, #0]
 800084e:	193b      	adds	r3, r7, r4
 8000850:	7c1a      	ldrb	r2, [r3, #16]
 8000852:	187b      	adds	r3, r7, r1
 8000854:	705a      	strb	r2, [r3, #1]
	//uint8_t compile_minutes_int = atoi(compile_minutes);
	sTime1.Minutes = atoi(compile_minutes);
 8000856:	187b      	adds	r3, r7, r1
 8000858:	0018      	movs	r0, r3
 800085a:	f002 fe6d 	bl	8003538 <atoi>
 800085e:	0003      	movs	r3, r0
 8000860:	b2da      	uxtb	r2, r3
 8000862:	4b1c      	ldr	r3, [pc, #112]	; (80008d4 <set_time_auto+0x184>)
 8000864:	705a      	strb	r2, [r3, #1]

	uint8_t compile_seconds[] = {compile_datetime[18], compile_datetime[19]};
 8000866:	193b      	adds	r3, r7, r4
 8000868:	7c9a      	ldrb	r2, [r3, #18]
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	701a      	strb	r2, [r3, #0]
 800086e:	193b      	adds	r3, r7, r4
 8000870:	7cda      	ldrb	r2, [r3, #19]
 8000872:	1d3b      	adds	r3, r7, #4
 8000874:	705a      	strb	r2, [r3, #1]
	//uint8_t compile_seconds_int = atoi(compile_seconds);
	//sTime1.SecondFraction = atoi(compile_seconds);
	sTime1.Seconds = atoi(compile_seconds);
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	0018      	movs	r0, r3
 800087a:	f002 fe5d 	bl	8003538 <atoi>
 800087e:	0003      	movs	r3, r0
 8000880:	b2da      	uxtb	r2, r3
 8000882:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <set_time_auto+0x184>)
 8000884:	709a      	strb	r2, [r3, #2]
	sTime1.SubSeconds = 0x0;
 8000886:	4b13      	ldr	r3, [pc, #76]	; (80008d4 <set_time_auto+0x184>)
 8000888:	2200      	movs	r2, #0
 800088a:	605a      	str	r2, [r3, #4]
	sTime1.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800088c:	4b11      	ldr	r3, [pc, #68]	; (80008d4 <set_time_auto+0x184>)
 800088e:	2200      	movs	r2, #0
 8000890:	60da      	str	r2, [r3, #12]
	sTime1.StoreOperation = RTC_STOREOPERATION_RESET;
 8000892:	4b10      	ldr	r3, [pc, #64]	; (80008d4 <set_time_auto+0x184>)
 8000894:	2200      	movs	r2, #0
 8000896:	611a      	str	r2, [r3, #16]

	if (HAL_RTC_SetTime(&hrtc, &sTime1, RTC_FORMAT_BCD) != HAL_OK)
 8000898:	490e      	ldr	r1, [pc, #56]	; (80008d4 <set_time_auto+0x184>)
 800089a:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <set_time_auto+0x188>)
 800089c:	2201      	movs	r2, #1
 800089e:	0018      	movs	r0, r3
 80008a0:	f001 ffa6 	bl	80027f0 <HAL_RTC_SetTime>
 80008a4:	1e03      	subs	r3, r0, #0
 80008a6:	d001      	beq.n	80008ac <set_time_auto+0x15c>
	{
		Error_Handler();
 80008a8:	f000 f87e 	bl	80009a8 <Error_Handler>
	}
	if (HAL_RTC_SetDate(&hrtc, &sDate1, RTC_FORMAT_BCD) != HAL_OK)
 80008ac:	4908      	ldr	r1, [pc, #32]	; (80008d0 <set_time_auto+0x180>)
 80008ae:	4b0a      	ldr	r3, [pc, #40]	; (80008d8 <set_time_auto+0x188>)
 80008b0:	2201      	movs	r2, #1
 80008b2:	0018      	movs	r0, r3
 80008b4:	f002 f8a0 	bl	80029f8 <HAL_RTC_SetDate>
 80008b8:	1e03      	subs	r3, r0, #0
 80008ba:	d001      	beq.n	80008c0 <set_time_auto+0x170>
	{
		Error_Handler();
 80008bc:	f000 f874 	bl	80009a8 <Error_Handler>

	//Need to fix ATOI has warning
	//Doesnt seem to work when chaningin sTime1 to sTime, same with date. Weird


	__NOP();
 80008c0:	46c0      	nop			; (mov r8, r8)
}
 80008c2:	46c0      	nop			; (mov r8, r8)
 80008c4:	46bd      	mov	sp, r7
 80008c6:	b00c      	add	sp, #48	; 0x30
 80008c8:	bdb0      	pop	{r4, r5, r7, pc}
 80008ca:	46c0      	nop			; (mov r8, r8)
 80008cc:	080036e4 	.word	0x080036e4
 80008d0:	20000188 	.word	0x20000188
 80008d4:	20000174 	.word	0x20000174
 80008d8:	200000e4 	.word	0x200000e4

080008dc <LED_init>:




void LED_init(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 80008e0:	23a0      	movs	r3, #160	; 0xa0
 80008e2:	05db      	lsls	r3, r3, #23
 80008e4:	2201      	movs	r2, #1
 80008e6:	2108      	movs	r1, #8
 80008e8:	0018      	movs	r0, r3
 80008ea:	f001 faa7 	bl	8001e3c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80008ee:	200a      	movs	r0, #10
 80008f0:	f000 fa4a 	bl	8000d88 <HAL_Delay>
	LED_clear();
 80008f4:	f000 f804 	bl	8000900 <LED_clear>
}
 80008f8:	46c0      	nop			; (mov r8, r8)
 80008fa:	46bd      	mov	sp, r7
 80008fc:	bd80      	pop	{r7, pc}
	...

08000900 <LED_clear>:

void LED_clear(void)
{
 8000900:	b580      	push	{r7, lr}
 8000902:	b082      	sub	sp, #8
 8000904:	af00      	add	r7, sp, #0
	tx_start_frame();
 8000906:	f000 f81f 	bl	8000948 <tx_start_frame>
	for (uint8_t i = 0; i <= numLED; i++) HAL_SPI_Transmit(&hspi1, LED_clear_frames, 4, 100);
 800090a:	1dfb      	adds	r3, r7, #7
 800090c:	2200      	movs	r2, #0
 800090e:	701a      	strb	r2, [r3, #0]
 8000910:	e00a      	b.n	8000928 <LED_clear+0x28>
 8000912:	490b      	ldr	r1, [pc, #44]	; (8000940 <LED_clear+0x40>)
 8000914:	480b      	ldr	r0, [pc, #44]	; (8000944 <LED_clear+0x44>)
 8000916:	2364      	movs	r3, #100	; 0x64
 8000918:	2204      	movs	r2, #4
 800091a:	f002 fb0d 	bl	8002f38 <HAL_SPI_Transmit>
 800091e:	1dfb      	adds	r3, r7, #7
 8000920:	781a      	ldrb	r2, [r3, #0]
 8000922:	1dfb      	adds	r3, r7, #7
 8000924:	3201      	adds	r2, #1
 8000926:	701a      	strb	r2, [r3, #0]
 8000928:	2254      	movs	r2, #84	; 0x54
 800092a:	1dfb      	adds	r3, r7, #7
 800092c:	781b      	ldrb	r3, [r3, #0]
 800092e:	4293      	cmp	r3, r2
 8000930:	d9ef      	bls.n	8000912 <LED_clear+0x12>
	tx_end_frame();
 8000932:	f000 f819 	bl	8000968 <tx_end_frame>
}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b002      	add	sp, #8
 800093c:	bd80      	pop	{r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	20000000 	.word	0x20000000
 8000944:	2000010c 	.word	0x2000010c

08000948 <tx_start_frame>:

void tx_start_frame(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&empty_frame, 1, 100);
 800094c:	4904      	ldr	r1, [pc, #16]	; (8000960 <tx_start_frame+0x18>)
 800094e:	4805      	ldr	r0, [pc, #20]	; (8000964 <tx_start_frame+0x1c>)
 8000950:	2364      	movs	r3, #100	; 0x64
 8000952:	2201      	movs	r2, #1
 8000954:	f002 faf0 	bl	8002f38 <HAL_SPI_Transmit>
}
 8000958:	46c0      	nop			; (mov r8, r8)
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	46c0      	nop			; (mov r8, r8)
 8000960:	080036f9 	.word	0x080036f9
 8000964:	2000010c 	.word	0x2000010c

08000968 <tx_end_frame>:

void tx_end_frame(void)
{
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 6; i++) HAL_SPI_Transmit(&hspi1, (uint8_t *)&empty_frame, 1, 100);
 800096e:	1dfb      	adds	r3, r7, #7
 8000970:	2200      	movs	r2, #0
 8000972:	701a      	strb	r2, [r3, #0]
 8000974:	e00a      	b.n	800098c <tx_end_frame+0x24>
 8000976:	490a      	ldr	r1, [pc, #40]	; (80009a0 <tx_end_frame+0x38>)
 8000978:	480a      	ldr	r0, [pc, #40]	; (80009a4 <tx_end_frame+0x3c>)
 800097a:	2364      	movs	r3, #100	; 0x64
 800097c:	2201      	movs	r2, #1
 800097e:	f002 fadb 	bl	8002f38 <HAL_SPI_Transmit>
 8000982:	1dfb      	adds	r3, r7, #7
 8000984:	781a      	ldrb	r2, [r3, #0]
 8000986:	1dfb      	adds	r3, r7, #7
 8000988:	3201      	adds	r2, #1
 800098a:	701a      	strb	r2, [r3, #0]
 800098c:	1dfb      	adds	r3, r7, #7
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	2b06      	cmp	r3, #6
 8000992:	d9f0      	bls.n	8000976 <tx_end_frame+0xe>
}
 8000994:	46c0      	nop			; (mov r8, r8)
 8000996:	46c0      	nop			; (mov r8, r8)
 8000998:	46bd      	mov	sp, r7
 800099a:	b002      	add	sp, #8
 800099c:	bd80      	pop	{r7, pc}
 800099e:	46c0      	nop			; (mov r8, r8)
 80009a0:	080036f9 	.word	0x080036f9
 80009a4:	2000010c 	.word	0x2000010c

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	e7fe      	b.n	80009b0 <Error_Handler+0x8>
	...

080009b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80009ba:	4b0f      	ldr	r3, [pc, #60]	; (80009f8 <HAL_MspInit+0x44>)
 80009bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009be:	4b0e      	ldr	r3, [pc, #56]	; (80009f8 <HAL_MspInit+0x44>)
 80009c0:	2101      	movs	r1, #1
 80009c2:	430a      	orrs	r2, r1
 80009c4:	641a      	str	r2, [r3, #64]	; 0x40
 80009c6:	4b0c      	ldr	r3, [pc, #48]	; (80009f8 <HAL_MspInit+0x44>)
 80009c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ca:	2201      	movs	r2, #1
 80009cc:	4013      	ands	r3, r2
 80009ce:	607b      	str	r3, [r7, #4]
 80009d0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80009d2:	4b09      	ldr	r3, [pc, #36]	; (80009f8 <HAL_MspInit+0x44>)
 80009d4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009d6:	4b08      	ldr	r3, [pc, #32]	; (80009f8 <HAL_MspInit+0x44>)
 80009d8:	2180      	movs	r1, #128	; 0x80
 80009da:	0549      	lsls	r1, r1, #21
 80009dc:	430a      	orrs	r2, r1
 80009de:	63da      	str	r2, [r3, #60]	; 0x3c
 80009e0:	4b05      	ldr	r3, [pc, #20]	; (80009f8 <HAL_MspInit+0x44>)
 80009e2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80009e4:	2380      	movs	r3, #128	; 0x80
 80009e6:	055b      	lsls	r3, r3, #21
 80009e8:	4013      	ands	r3, r2
 80009ea:	603b      	str	r3, [r7, #0]
 80009ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80009ee:	46c0      	nop			; (mov r8, r8)
 80009f0:	46bd      	mov	sp, r7
 80009f2:	b002      	add	sp, #8
 80009f4:	bd80      	pop	{r7, pc}
 80009f6:	46c0      	nop			; (mov r8, r8)
 80009f8:	40021000 	.word	0x40021000

080009fc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80009fc:	b590      	push	{r4, r7, lr}
 80009fe:	b091      	sub	sp, #68	; 0x44
 8000a00:	af00      	add	r7, sp, #0
 8000a02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a04:	232c      	movs	r3, #44	; 0x2c
 8000a06:	18fb      	adds	r3, r7, r3
 8000a08:	0018      	movs	r0, r3
 8000a0a:	2314      	movs	r3, #20
 8000a0c:	001a      	movs	r2, r3
 8000a0e:	2100      	movs	r1, #0
 8000a10:	f002 fe2a 	bl	8003668 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000a14:	2410      	movs	r4, #16
 8000a16:	193b      	adds	r3, r7, r4
 8000a18:	0018      	movs	r0, r3
 8000a1a:	231c      	movs	r3, #28
 8000a1c:	001a      	movs	r2, r3
 8000a1e:	2100      	movs	r1, #0
 8000a20:	f002 fe22 	bl	8003668 <memset>
  if(hadc->Instance==ADC1)
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	681b      	ldr	r3, [r3, #0]
 8000a28:	4a20      	ldr	r2, [pc, #128]	; (8000aac <HAL_ADC_MspInit+0xb0>)
 8000a2a:	4293      	cmp	r3, r2
 8000a2c:	d139      	bne.n	8000aa2 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a2e:	193b      	adds	r3, r7, r4
 8000a30:	2280      	movs	r2, #128	; 0x80
 8000a32:	01d2      	lsls	r2, r2, #7
 8000a34:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 8000a36:	193b      	adds	r3, r7, r4
 8000a38:	2200      	movs	r2, #0
 8000a3a:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000a3c:	193b      	adds	r3, r7, r4
 8000a3e:	0018      	movs	r0, r3
 8000a40:	f001 fd4a 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000a44:	1e03      	subs	r3, r0, #0
 8000a46:	d001      	beq.n	8000a4c <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000a48:	f7ff ffae 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <HAL_ADC_MspInit+0xb4>)
 8000a4e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a50:	4b17      	ldr	r3, [pc, #92]	; (8000ab0 <HAL_ADC_MspInit+0xb4>)
 8000a52:	2180      	movs	r1, #128	; 0x80
 8000a54:	0349      	lsls	r1, r1, #13
 8000a56:	430a      	orrs	r2, r1
 8000a58:	641a      	str	r2, [r3, #64]	; 0x40
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_ADC_MspInit+0xb4>)
 8000a5c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000a5e:	2380      	movs	r3, #128	; 0x80
 8000a60:	035b      	lsls	r3, r3, #13
 8000a62:	4013      	ands	r3, r2
 8000a64:	60fb      	str	r3, [r7, #12]
 8000a66:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a68:	4b11      	ldr	r3, [pc, #68]	; (8000ab0 <HAL_ADC_MspInit+0xb4>)
 8000a6a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a6c:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <HAL_ADC_MspInit+0xb4>)
 8000a6e:	2101      	movs	r1, #1
 8000a70:	430a      	orrs	r2, r1
 8000a72:	635a      	str	r2, [r3, #52]	; 0x34
 8000a74:	4b0e      	ldr	r3, [pc, #56]	; (8000ab0 <HAL_ADC_MspInit+0xb4>)
 8000a76:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a78:	2201      	movs	r2, #1
 8000a7a:	4013      	ands	r3, r2
 8000a7c:	60bb      	str	r3, [r7, #8]
 8000a7e:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 8000a80:	212c      	movs	r1, #44	; 0x2c
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2201      	movs	r2, #1
 8000a86:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2203      	movs	r2, #3
 8000a8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2200      	movs	r2, #0
 8000a92:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f001 f863 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b011      	add	sp, #68	; 0x44
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40012400 	.word	0x40012400
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8000ab4:	b590      	push	{r4, r7, lr}
 8000ab6:	b08b      	sub	sp, #44	; 0x2c
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000abc:	240c      	movs	r4, #12
 8000abe:	193b      	adds	r3, r7, r4
 8000ac0:	0018      	movs	r0, r3
 8000ac2:	231c      	movs	r3, #28
 8000ac4:	001a      	movs	r2, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	f002 fdce 	bl	8003668 <memset>
  if(hrtc->Instance==RTC)
 8000acc:	687b      	ldr	r3, [r7, #4]
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	4a15      	ldr	r2, [pc, #84]	; (8000b28 <HAL_RTC_MspInit+0x74>)
 8000ad2:	4293      	cmp	r3, r2
 8000ad4:	d124      	bne.n	8000b20 <HAL_RTC_MspInit+0x6c>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8000ad6:	193b      	adds	r3, r7, r4
 8000ad8:	2280      	movs	r2, #128	; 0x80
 8000ada:	0292      	lsls	r2, r2, #10
 8000adc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000ade:	193b      	adds	r3, r7, r4
 8000ae0:	2280      	movs	r2, #128	; 0x80
 8000ae2:	0092      	lsls	r2, r2, #2
 8000ae4:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ae6:	193b      	adds	r3, r7, r4
 8000ae8:	0018      	movs	r0, r3
 8000aea:	f001 fcf5 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000aee:	1e03      	subs	r3, r0, #0
 8000af0:	d001      	beq.n	8000af6 <HAL_RTC_MspInit+0x42>
    {
      Error_Handler();
 8000af2:	f7ff ff59 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8000af6:	4b0d      	ldr	r3, [pc, #52]	; (8000b2c <HAL_RTC_MspInit+0x78>)
 8000af8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8000afa:	4b0c      	ldr	r3, [pc, #48]	; (8000b2c <HAL_RTC_MspInit+0x78>)
 8000afc:	2180      	movs	r1, #128	; 0x80
 8000afe:	0209      	lsls	r1, r1, #8
 8000b00:	430a      	orrs	r2, r1
 8000b02:	65da      	str	r2, [r3, #92]	; 0x5c
    __HAL_RCC_RTCAPB_CLK_ENABLE();
 8000b04:	4b09      	ldr	r3, [pc, #36]	; (8000b2c <HAL_RTC_MspInit+0x78>)
 8000b06:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b08:	4b08      	ldr	r3, [pc, #32]	; (8000b2c <HAL_RTC_MspInit+0x78>)
 8000b0a:	2180      	movs	r1, #128	; 0x80
 8000b0c:	00c9      	lsls	r1, r1, #3
 8000b0e:	430a      	orrs	r2, r1
 8000b10:	63da      	str	r2, [r3, #60]	; 0x3c
 8000b12:	4b06      	ldr	r3, [pc, #24]	; (8000b2c <HAL_RTC_MspInit+0x78>)
 8000b14:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000b16:	2380      	movs	r3, #128	; 0x80
 8000b18:	00db      	lsls	r3, r3, #3
 8000b1a:	4013      	ands	r3, r2
 8000b1c:	60bb      	str	r3, [r7, #8]
 8000b1e:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8000b20:	46c0      	nop			; (mov r8, r8)
 8000b22:	46bd      	mov	sp, r7
 8000b24:	b00b      	add	sp, #44	; 0x2c
 8000b26:	bd90      	pop	{r4, r7, pc}
 8000b28:	40002800 	.word	0x40002800
 8000b2c:	40021000 	.word	0x40021000

08000b30 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b30:	b590      	push	{r4, r7, lr}
 8000b32:	b091      	sub	sp, #68	; 0x44
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b38:	232c      	movs	r3, #44	; 0x2c
 8000b3a:	18fb      	adds	r3, r7, r3
 8000b3c:	0018      	movs	r0, r3
 8000b3e:	2314      	movs	r3, #20
 8000b40:	001a      	movs	r2, r3
 8000b42:	2100      	movs	r1, #0
 8000b44:	f002 fd90 	bl	8003668 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000b48:	2410      	movs	r4, #16
 8000b4a:	193b      	adds	r3, r7, r4
 8000b4c:	0018      	movs	r0, r3
 8000b4e:	231c      	movs	r3, #28
 8000b50:	001a      	movs	r2, r3
 8000b52:	2100      	movs	r1, #0
 8000b54:	f002 fd88 	bl	8003668 <memset>
  if(hspi->Instance==SPI1)
 8000b58:	687b      	ldr	r3, [r7, #4]
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	4a23      	ldr	r2, [pc, #140]	; (8000bec <HAL_SPI_MspInit+0xbc>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d13f      	bne.n	8000be2 <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 8000b62:	193b      	adds	r3, r7, r4
 8000b64:	2280      	movs	r2, #128	; 0x80
 8000b66:	0112      	lsls	r2, r2, #4
 8000b68:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000b6a:	193b      	adds	r3, r7, r4
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000b70:	193b      	adds	r3, r7, r4
 8000b72:	0018      	movs	r0, r3
 8000b74:	f001 fcb0 	bl	80024d8 <HAL_RCCEx_PeriphCLKConfig>
 8000b78:	1e03      	subs	r3, r0, #0
 8000b7a:	d001      	beq.n	8000b80 <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000b7c:	f7ff ff14 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000b80:	4b1b      	ldr	r3, [pc, #108]	; (8000bf0 <HAL_SPI_MspInit+0xc0>)
 8000b82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b84:	4b1a      	ldr	r3, [pc, #104]	; (8000bf0 <HAL_SPI_MspInit+0xc0>)
 8000b86:	2180      	movs	r1, #128	; 0x80
 8000b88:	0149      	lsls	r1, r1, #5
 8000b8a:	430a      	orrs	r2, r1
 8000b8c:	641a      	str	r2, [r3, #64]	; 0x40
 8000b8e:	4b18      	ldr	r3, [pc, #96]	; (8000bf0 <HAL_SPI_MspInit+0xc0>)
 8000b90:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	015b      	lsls	r3, r3, #5
 8000b96:	4013      	ands	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
 8000b9a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b14      	ldr	r3, [pc, #80]	; (8000bf0 <HAL_SPI_MspInit+0xc0>)
 8000b9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ba0:	4b13      	ldr	r3, [pc, #76]	; (8000bf0 <HAL_SPI_MspInit+0xc0>)
 8000ba2:	2101      	movs	r1, #1
 8000ba4:	430a      	orrs	r2, r1
 8000ba6:	635a      	str	r2, [r3, #52]	; 0x34
 8000ba8:	4b11      	ldr	r3, [pc, #68]	; (8000bf0 <HAL_SPI_MspInit+0xc0>)
 8000baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bac:	2201      	movs	r2, #1
 8000bae:	4013      	ands	r3, r2
 8000bb0:	60bb      	str	r3, [r7, #8]
 8000bb2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 8000bb4:	212c      	movs	r1, #44	; 0x2c
 8000bb6:	187b      	adds	r3, r7, r1
 8000bb8:	2206      	movs	r2, #6
 8000bba:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bbc:	187b      	adds	r3, r7, r1
 8000bbe:	2202      	movs	r2, #2
 8000bc0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	187b      	adds	r3, r7, r1
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc8:	187b      	adds	r3, r7, r1
 8000bca:	2200      	movs	r2, #0
 8000bcc:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 8000bce:	187b      	adds	r3, r7, r1
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bd4:	187a      	adds	r2, r7, r1
 8000bd6:	23a0      	movs	r3, #160	; 0xa0
 8000bd8:	05db      	lsls	r3, r3, #23
 8000bda:	0011      	movs	r1, r2
 8000bdc:	0018      	movs	r0, r3
 8000bde:	f000 ffc3 	bl	8001b68 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8000be2:	46c0      	nop			; (mov r8, r8)
 8000be4:	46bd      	mov	sp, r7
 8000be6:	b011      	add	sp, #68	; 0x44
 8000be8:	bd90      	pop	{r4, r7, pc}
 8000bea:	46c0      	nop			; (mov r8, r8)
 8000bec:	40013000 	.word	0x40013000
 8000bf0:	40021000 	.word	0x40021000

08000bf4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bf8:	e7fe      	b.n	8000bf8 <NMI_Handler+0x4>

08000bfa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bfa:	b580      	push	{r7, lr}
 8000bfc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bfe:	e7fe      	b.n	8000bfe <HardFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000c04:	46c0      	nop			; (mov r8, r8)
 8000c06:	46bd      	mov	sp, r7
 8000c08:	bd80      	pop	{r7, pc}

08000c0a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c0a:	b580      	push	{r7, lr}
 8000c0c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c18:	f000 f89a 	bl	8000d50 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c1c:	46c0      	nop			; (mov r8, r8)
 8000c1e:	46bd      	mov	sp, r7
 8000c20:	bd80      	pop	{r7, pc}
	...

08000c24 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c24:	b580      	push	{r7, lr}
 8000c26:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000c28:	4b03      	ldr	r3, [pc, #12]	; (8000c38 <SystemInit+0x14>)
 8000c2a:	2280      	movs	r2, #128	; 0x80
 8000c2c:	0512      	lsls	r2, r2, #20
 8000c2e:	609a      	str	r2, [r3, #8]
#endif
}
 8000c30:	46c0      	nop			; (mov r8, r8)
 8000c32:	46bd      	mov	sp, r7
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	46c0      	nop			; (mov r8, r8)
 8000c38:	e000ed00 	.word	0xe000ed00

08000c3c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c3c:	480d      	ldr	r0, [pc, #52]	; (8000c74 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c3e:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000c40:	f7ff fff0 	bl	8000c24 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000c44:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000c46:	e003      	b.n	8000c50 <LoopCopyDataInit>

08000c48 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000c48:	4b0b      	ldr	r3, [pc, #44]	; (8000c78 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000c4a:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000c4c:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000c4e:	3104      	adds	r1, #4

08000c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000c50:	480a      	ldr	r0, [pc, #40]	; (8000c7c <LoopForever+0xa>)
  ldr r3, =_edata
 8000c52:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <LoopForever+0xe>)
  adds r2, r0, r1
 8000c54:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000c56:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000c58:	d3f6      	bcc.n	8000c48 <CopyDataInit>
  ldr r2, =_sbss
 8000c5a:	4a0a      	ldr	r2, [pc, #40]	; (8000c84 <LoopForever+0x12>)
  b LoopFillZerobss
 8000c5c:	e002      	b.n	8000c64 <LoopFillZerobss>

08000c5e <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000c5e:	2300      	movs	r3, #0
  str  r3, [r2]
 8000c60:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c62:	3204      	adds	r2, #4

08000c64 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000c64:	4b08      	ldr	r3, [pc, #32]	; (8000c88 <LoopForever+0x16>)
  cmp r2, r3
 8000c66:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000c68:	d3f9      	bcc.n	8000c5e <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000c6a:	f002 fd0b 	bl	8003684 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c6e:	f7ff fad7 	bl	8000220 <main>

08000c72 <LoopForever>:

LoopForever:
    b LoopForever
 8000c72:	e7fe      	b.n	8000c72 <LoopForever>
  ldr   r0, =_estack
 8000c74:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000c78:	08003848 	.word	0x08003848
  ldr r0, =_sdata
 8000c7c:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000c80:	20000064 	.word	0x20000064
  ldr r2, =_sbss
 8000c84:	20000064 	.word	0x20000064
  ldr r3, = _ebss
 8000c88:	200002c8 	.word	0x200002c8

08000c8c <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c8c:	e7fe      	b.n	8000c8c <ADC1_IRQHandler>

08000c8e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	b082      	sub	sp, #8
 8000c92:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000c94:	1dfb      	adds	r3, r7, #7
 8000c96:	2200      	movs	r2, #0
 8000c98:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000c9a:	2003      	movs	r0, #3
 8000c9c:	f000 f80e 	bl	8000cbc <HAL_InitTick>
 8000ca0:	1e03      	subs	r3, r0, #0
 8000ca2:	d003      	beq.n	8000cac <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ca4:	1dfb      	adds	r3, r7, #7
 8000ca6:	2201      	movs	r2, #1
 8000ca8:	701a      	strb	r2, [r3, #0]
 8000caa:	e001      	b.n	8000cb0 <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000cac:	f7ff fe82 	bl	80009b4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000cb0:	1dfb      	adds	r3, r7, #7
 8000cb2:	781b      	ldrb	r3, [r3, #0]
}
 8000cb4:	0018      	movs	r0, r3
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	b002      	add	sp, #8
 8000cba:	bd80      	pop	{r7, pc}

08000cbc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cbc:	b590      	push	{r4, r7, lr}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000cc4:	230f      	movs	r3, #15
 8000cc6:	18fb      	adds	r3, r7, r3
 8000cc8:	2200      	movs	r2, #0
 8000cca:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ccc:	4b1d      	ldr	r3, [pc, #116]	; (8000d44 <HAL_InitTick+0x88>)
 8000cce:	781b      	ldrb	r3, [r3, #0]
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d02b      	beq.n	8000d2c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000cd4:	4b1c      	ldr	r3, [pc, #112]	; (8000d48 <HAL_InitTick+0x8c>)
 8000cd6:	681c      	ldr	r4, [r3, #0]
 8000cd8:	4b1a      	ldr	r3, [pc, #104]	; (8000d44 <HAL_InitTick+0x88>)
 8000cda:	781b      	ldrb	r3, [r3, #0]
 8000cdc:	0019      	movs	r1, r3
 8000cde:	23fa      	movs	r3, #250	; 0xfa
 8000ce0:	0098      	lsls	r0, r3, #2
 8000ce2:	f7ff fa11 	bl	8000108 <__udivsi3>
 8000ce6:	0003      	movs	r3, r0
 8000ce8:	0019      	movs	r1, r3
 8000cea:	0020      	movs	r0, r4
 8000cec:	f7ff fa0c 	bl	8000108 <__udivsi3>
 8000cf0:	0003      	movs	r3, r0
 8000cf2:	0018      	movs	r0, r3
 8000cf4:	f000 ff2b 	bl	8001b4e <HAL_SYSTICK_Config>
 8000cf8:	1e03      	subs	r3, r0, #0
 8000cfa:	d112      	bne.n	8000d22 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cfc:	687b      	ldr	r3, [r7, #4]
 8000cfe:	2b03      	cmp	r3, #3
 8000d00:	d80a      	bhi.n	8000d18 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d02:	6879      	ldr	r1, [r7, #4]
 8000d04:	2301      	movs	r3, #1
 8000d06:	425b      	negs	r3, r3
 8000d08:	2200      	movs	r2, #0
 8000d0a:	0018      	movs	r0, r3
 8000d0c:	f000 ff0a 	bl	8001b24 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d10:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_InitTick+0x90>)
 8000d12:	687a      	ldr	r2, [r7, #4]
 8000d14:	601a      	str	r2, [r3, #0]
 8000d16:	e00d      	b.n	8000d34 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000d18:	230f      	movs	r3, #15
 8000d1a:	18fb      	adds	r3, r7, r3
 8000d1c:	2201      	movs	r2, #1
 8000d1e:	701a      	strb	r2, [r3, #0]
 8000d20:	e008      	b.n	8000d34 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000d22:	230f      	movs	r3, #15
 8000d24:	18fb      	adds	r3, r7, r3
 8000d26:	2201      	movs	r2, #1
 8000d28:	701a      	strb	r2, [r3, #0]
 8000d2a:	e003      	b.n	8000d34 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000d2c:	230f      	movs	r3, #15
 8000d2e:	18fb      	adds	r3, r7, r3
 8000d30:	2201      	movs	r2, #1
 8000d32:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000d34:	230f      	movs	r3, #15
 8000d36:	18fb      	adds	r3, r7, r3
 8000d38:	781b      	ldrb	r3, [r3, #0]
}
 8000d3a:	0018      	movs	r0, r3
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	b005      	add	sp, #20
 8000d40:	bd90      	pop	{r4, r7, pc}
 8000d42:	46c0      	nop			; (mov r8, r8)
 8000d44:	20000010 	.word	0x20000010
 8000d48:	20000008 	.word	0x20000008
 8000d4c:	2000000c 	.word	0x2000000c

08000d50 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000d54:	4b05      	ldr	r3, [pc, #20]	; (8000d6c <HAL_IncTick+0x1c>)
 8000d56:	781b      	ldrb	r3, [r3, #0]
 8000d58:	001a      	movs	r2, r3
 8000d5a:	4b05      	ldr	r3, [pc, #20]	; (8000d70 <HAL_IncTick+0x20>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	18d2      	adds	r2, r2, r3
 8000d60:	4b03      	ldr	r3, [pc, #12]	; (8000d70 <HAL_IncTick+0x20>)
 8000d62:	601a      	str	r2, [r3, #0]
}
 8000d64:	46c0      	nop			; (mov r8, r8)
 8000d66:	46bd      	mov	sp, r7
 8000d68:	bd80      	pop	{r7, pc}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	20000010 	.word	0x20000010
 8000d70:	2000018c 	.word	0x2000018c

08000d74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d74:	b580      	push	{r7, lr}
 8000d76:	af00      	add	r7, sp, #0
  return uwTick;
 8000d78:	4b02      	ldr	r3, [pc, #8]	; (8000d84 <HAL_GetTick+0x10>)
 8000d7a:	681b      	ldr	r3, [r3, #0]
}
 8000d7c:	0018      	movs	r0, r3
 8000d7e:	46bd      	mov	sp, r7
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	46c0      	nop			; (mov r8, r8)
 8000d84:	2000018c 	.word	0x2000018c

08000d88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d88:	b580      	push	{r7, lr}
 8000d8a:	b084      	sub	sp, #16
 8000d8c:	af00      	add	r7, sp, #0
 8000d8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d90:	f7ff fff0 	bl	8000d74 <HAL_GetTick>
 8000d94:	0003      	movs	r3, r0
 8000d96:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d9c:	68fb      	ldr	r3, [r7, #12]
 8000d9e:	3301      	adds	r3, #1
 8000da0:	d005      	beq.n	8000dae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000da2:	4b0a      	ldr	r3, [pc, #40]	; (8000dcc <HAL_Delay+0x44>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	001a      	movs	r2, r3
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	189b      	adds	r3, r3, r2
 8000dac:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000dae:	46c0      	nop			; (mov r8, r8)
 8000db0:	f7ff ffe0 	bl	8000d74 <HAL_GetTick>
 8000db4:	0002      	movs	r2, r0
 8000db6:	68bb      	ldr	r3, [r7, #8]
 8000db8:	1ad3      	subs	r3, r2, r3
 8000dba:	68fa      	ldr	r2, [r7, #12]
 8000dbc:	429a      	cmp	r2, r3
 8000dbe:	d8f7      	bhi.n	8000db0 <HAL_Delay+0x28>
  {
  }
}
 8000dc0:	46c0      	nop			; (mov r8, r8)
 8000dc2:	46c0      	nop			; (mov r8, r8)
 8000dc4:	46bd      	mov	sp, r7
 8000dc6:	b004      	add	sp, #16
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	46c0      	nop			; (mov r8, r8)
 8000dcc:	20000010 	.word	0x20000010

08000dd0 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b082      	sub	sp, #8
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000dda:	687b      	ldr	r3, [r7, #4]
 8000ddc:	681b      	ldr	r3, [r3, #0]
 8000dde:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000de0:	401a      	ands	r2, r3
 8000de2:	683b      	ldr	r3, [r7, #0]
 8000de4:	431a      	orrs	r2, r3
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	601a      	str	r2, [r3, #0]
}
 8000dea:	46c0      	nop			; (mov r8, r8)
 8000dec:	46bd      	mov	sp, r7
 8000dee:	b002      	add	sp, #8
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	46c0      	nop			; (mov r8, r8)
 8000df4:	ff3fffff 	.word	0xff3fffff

08000df8 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b082      	sub	sp, #8
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	681a      	ldr	r2, [r3, #0]
 8000e04:	23c0      	movs	r3, #192	; 0xc0
 8000e06:	041b      	lsls	r3, r3, #16
 8000e08:	4013      	ands	r3, r2
}
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	b002      	add	sp, #8
 8000e10:	bd80      	pop	{r7, pc}

08000e12 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000e12:	b580      	push	{r7, lr}
 8000e14:	b084      	sub	sp, #16
 8000e16:	af00      	add	r7, sp, #0
 8000e18:	60f8      	str	r0, [r7, #12]
 8000e1a:	60b9      	str	r1, [r7, #8]
 8000e1c:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000e1e:	68fb      	ldr	r3, [r7, #12]
 8000e20:	695b      	ldr	r3, [r3, #20]
 8000e22:	68ba      	ldr	r2, [r7, #8]
 8000e24:	2104      	movs	r1, #4
 8000e26:	400a      	ands	r2, r1
 8000e28:	2107      	movs	r1, #7
 8000e2a:	4091      	lsls	r1, r2
 8000e2c:	000a      	movs	r2, r1
 8000e2e:	43d2      	mvns	r2, r2
 8000e30:	401a      	ands	r2, r3
 8000e32:	68bb      	ldr	r3, [r7, #8]
 8000e34:	2104      	movs	r1, #4
 8000e36:	400b      	ands	r3, r1
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	4099      	lsls	r1, r3
 8000e3c:	000b      	movs	r3, r1
 8000e3e:	431a      	orrs	r2, r3
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000e44:	46c0      	nop			; (mov r8, r8)
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b004      	add	sp, #16
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
 8000e54:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	695b      	ldr	r3, [r3, #20]
 8000e5a:	683a      	ldr	r2, [r7, #0]
 8000e5c:	2104      	movs	r1, #4
 8000e5e:	400a      	ands	r2, r1
 8000e60:	2107      	movs	r1, #7
 8000e62:	4091      	lsls	r1, r2
 8000e64:	000a      	movs	r2, r1
 8000e66:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000e68:	683b      	ldr	r3, [r7, #0]
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000e6e:	40da      	lsrs	r2, r3
 8000e70:	0013      	movs	r3, r2
}
 8000e72:	0018      	movs	r0, r3
 8000e74:	46bd      	mov	sp, r7
 8000e76:	b002      	add	sp, #8
 8000e78:	bd80      	pop	{r7, pc}

08000e7a <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000e7a:	b580      	push	{r7, lr}
 8000e7c:	b082      	sub	sp, #8
 8000e7e:	af00      	add	r7, sp, #0
 8000e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	68da      	ldr	r2, [r3, #12]
 8000e86:	23c0      	movs	r3, #192	; 0xc0
 8000e88:	011b      	lsls	r3, r3, #4
 8000e8a:	4013      	ands	r3, r2
 8000e8c:	d101      	bne.n	8000e92 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000e8e:	2301      	movs	r3, #1
 8000e90:	e000      	b.n	8000e94 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000e92:	2300      	movs	r3, #0
}
 8000e94:	0018      	movs	r0, r3
 8000e96:	46bd      	mov	sp, r7
 8000e98:	b002      	add	sp, #8
 8000e9a:	bd80      	pop	{r7, pc}

08000e9c <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000e9c:	b580      	push	{r7, lr}
 8000e9e:	b084      	sub	sp, #16
 8000ea0:	af00      	add	r7, sp, #0
 8000ea2:	60f8      	str	r0, [r7, #12]
 8000ea4:	60b9      	str	r1, [r7, #8]
 8000ea6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000ea8:	68fb      	ldr	r3, [r7, #12]
 8000eaa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000eac:	68ba      	ldr	r2, [r7, #8]
 8000eae:	211f      	movs	r1, #31
 8000eb0:	400a      	ands	r2, r1
 8000eb2:	210f      	movs	r1, #15
 8000eb4:	4091      	lsls	r1, r2
 8000eb6:	000a      	movs	r2, r1
 8000eb8:	43d2      	mvns	r2, r2
 8000eba:	401a      	ands	r2, r3
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	0e9b      	lsrs	r3, r3, #26
 8000ec0:	210f      	movs	r1, #15
 8000ec2:	4019      	ands	r1, r3
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	201f      	movs	r0, #31
 8000ec8:	4003      	ands	r3, r0
 8000eca:	4099      	lsls	r1, r3
 8000ecc:	000b      	movs	r3, r1
 8000ece:	431a      	orrs	r2, r3
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000ed4:	46c0      	nop			; (mov r8, r8)
 8000ed6:	46bd      	mov	sp, r7
 8000ed8:	b004      	add	sp, #16
 8000eda:	bd80      	pop	{r7, pc}

08000edc <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b082      	sub	sp, #8
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
 8000ee4:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	025b      	lsls	r3, r3, #9
 8000eee:	0a5b      	lsrs	r3, r3, #9
 8000ef0:	431a      	orrs	r2, r3
 8000ef2:	687b      	ldr	r3, [r7, #4]
 8000ef4:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000ef6:	46c0      	nop			; (mov r8, r8)
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	b002      	add	sp, #8
 8000efc:	bd80      	pop	{r7, pc}

08000efe <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000efe:	b580      	push	{r7, lr}
 8000f00:	b082      	sub	sp, #8
 8000f02:	af00      	add	r7, sp, #0
 8000f04:	6078      	str	r0, [r7, #4]
 8000f06:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000f0c:	683a      	ldr	r2, [r7, #0]
 8000f0e:	0252      	lsls	r2, r2, #9
 8000f10:	0a52      	lsrs	r2, r2, #9
 8000f12:	43d2      	mvns	r2, r2
 8000f14:	401a      	ands	r2, r3
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000f1a:	46c0      	nop			; (mov r8, r8)
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	b002      	add	sp, #8
 8000f20:	bd80      	pop	{r7, pc}
	...

08000f24 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b084      	sub	sp, #16
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	60f8      	str	r0, [r7, #12]
 8000f2c:	60b9      	str	r1, [r7, #8]
 8000f2e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000f30:	68fb      	ldr	r3, [r7, #12]
 8000f32:	695b      	ldr	r3, [r3, #20]
 8000f34:	68ba      	ldr	r2, [r7, #8]
 8000f36:	0212      	lsls	r2, r2, #8
 8000f38:	43d2      	mvns	r2, r2
 8000f3a:	401a      	ands	r2, r3
 8000f3c:	68bb      	ldr	r3, [r7, #8]
 8000f3e:	021b      	lsls	r3, r3, #8
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	400b      	ands	r3, r1
 8000f44:	4904      	ldr	r1, [pc, #16]	; (8000f58 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000f46:	400b      	ands	r3, r1
 8000f48:	431a      	orrs	r2, r3
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000f4e:	46c0      	nop			; (mov r8, r8)
 8000f50:	46bd      	mov	sp, r7
 8000f52:	b004      	add	sp, #16
 8000f54:	bd80      	pop	{r7, pc}
 8000f56:	46c0      	nop			; (mov r8, r8)
 8000f58:	7fffff00 	.word	0x7fffff00

08000f5c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000f64:	687b      	ldr	r3, [r7, #4]
 8000f66:	689b      	ldr	r3, [r3, #8]
 8000f68:	4a05      	ldr	r2, [pc, #20]	; (8000f80 <LL_ADC_EnableInternalRegulator+0x24>)
 8000f6a:	4013      	ands	r3, r2
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	0552      	lsls	r2, r2, #21
 8000f70:	431a      	orrs	r2, r3
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000f76:	46c0      	nop			; (mov r8, r8)
 8000f78:	46bd      	mov	sp, r7
 8000f7a:	b002      	add	sp, #8
 8000f7c:	bd80      	pop	{r7, pc}
 8000f7e:	46c0      	nop			; (mov r8, r8)
 8000f80:	6fffffe8 	.word	0x6fffffe8

08000f84 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b082      	sub	sp, #8
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	689a      	ldr	r2, [r3, #8]
 8000f90:	2380      	movs	r3, #128	; 0x80
 8000f92:	055b      	lsls	r3, r3, #21
 8000f94:	401a      	ands	r2, r3
 8000f96:	2380      	movs	r3, #128	; 0x80
 8000f98:	055b      	lsls	r3, r3, #21
 8000f9a:	429a      	cmp	r2, r3
 8000f9c:	d101      	bne.n	8000fa2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000f9e:	2301      	movs	r3, #1
 8000fa0:	e000      	b.n	8000fa4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000fa2:	2300      	movs	r3, #0
}
 8000fa4:	0018      	movs	r0, r3
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	b002      	add	sp, #8
 8000faa:	bd80      	pop	{r7, pc}

08000fac <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	689b      	ldr	r3, [r3, #8]
 8000fb8:	4a04      	ldr	r2, [pc, #16]	; (8000fcc <LL_ADC_Enable+0x20>)
 8000fba:	4013      	ands	r3, r2
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	431a      	orrs	r2, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000fc4:	46c0      	nop			; (mov r8, r8)
 8000fc6:	46bd      	mov	sp, r7
 8000fc8:	b002      	add	sp, #8
 8000fca:	bd80      	pop	{r7, pc}
 8000fcc:	7fffffe8 	.word	0x7fffffe8

08000fd0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b082      	sub	sp, #8
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	2201      	movs	r2, #1
 8000fde:	4013      	ands	r3, r2
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d101      	bne.n	8000fe8 <LL_ADC_IsEnabled+0x18>
 8000fe4:	2301      	movs	r3, #1
 8000fe6:	e000      	b.n	8000fea <LL_ADC_IsEnabled+0x1a>
 8000fe8:	2300      	movs	r3, #0
}
 8000fea:	0018      	movs	r0, r3
 8000fec:	46bd      	mov	sp, r7
 8000fee:	b002      	add	sp, #8
 8000ff0:	bd80      	pop	{r7, pc}
	...

08000ff4 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b082      	sub	sp, #8
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	689b      	ldr	r3, [r3, #8]
 8001000:	4a04      	ldr	r2, [pc, #16]	; (8001014 <LL_ADC_REG_StartConversion+0x20>)
 8001002:	4013      	ands	r3, r2
 8001004:	2204      	movs	r2, #4
 8001006:	431a      	orrs	r2, r3
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800100c:	46c0      	nop			; (mov r8, r8)
 800100e:	46bd      	mov	sp, r7
 8001010:	b002      	add	sp, #8
 8001012:	bd80      	pop	{r7, pc}
 8001014:	7fffffe8 	.word	0x7fffffe8

08001018 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	689b      	ldr	r3, [r3, #8]
 8001024:	2204      	movs	r2, #4
 8001026:	4013      	ands	r3, r2
 8001028:	2b04      	cmp	r3, #4
 800102a:	d101      	bne.n	8001030 <LL_ADC_REG_IsConversionOngoing+0x18>
 800102c:	2301      	movs	r3, #1
 800102e:	e000      	b.n	8001032 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001030:	2300      	movs	r3, #0
}
 8001032:	0018      	movs	r0, r3
 8001034:	46bd      	mov	sp, r7
 8001036:	b002      	add	sp, #8
 8001038:	bd80      	pop	{r7, pc}
	...

0800103c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b088      	sub	sp, #32
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001044:	231f      	movs	r3, #31
 8001046:	18fb      	adds	r3, r7, r3
 8001048:	2200      	movs	r2, #0
 800104a:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 800104c:	2300      	movs	r3, #0
 800104e:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8001050:	2300      	movs	r3, #0
 8001052:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001054:	2300      	movs	r3, #0
 8001056:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	2b00      	cmp	r3, #0
 800105c:	d101      	bne.n	8001062 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800105e:	2301      	movs	r3, #1
 8001060:	e17e      	b.n	8001360 <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001066:	2b00      	cmp	r3, #0
 8001068:	d10a      	bne.n	8001080 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	0018      	movs	r0, r3
 800106e:	f7ff fcc5 	bl	80009fc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	2200      	movs	r2, #0
 8001076:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2254      	movs	r2, #84	; 0x54
 800107c:	2100      	movs	r1, #0
 800107e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	0018      	movs	r0, r3
 8001086:	f7ff ff7d 	bl	8000f84 <LL_ADC_IsInternalRegulatorEnabled>
 800108a:	1e03      	subs	r3, r0, #0
 800108c:	d114      	bne.n	80010b8 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	681b      	ldr	r3, [r3, #0]
 8001092:	0018      	movs	r0, r3
 8001094:	f7ff ff62 	bl	8000f5c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8001098:	4bb3      	ldr	r3, [pc, #716]	; (8001368 <HAL_ADC_Init+0x32c>)
 800109a:	681b      	ldr	r3, [r3, #0]
 800109c:	49b3      	ldr	r1, [pc, #716]	; (800136c <HAL_ADC_Init+0x330>)
 800109e:	0018      	movs	r0, r3
 80010a0:	f7ff f832 	bl	8000108 <__udivsi3>
 80010a4:	0003      	movs	r3, r0
 80010a6:	005b      	lsls	r3, r3, #1
 80010a8:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010aa:	e002      	b.n	80010b2 <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d1f9      	bne.n	80010ac <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	0018      	movs	r0, r3
 80010be:	f7ff ff61 	bl	8000f84 <LL_ADC_IsInternalRegulatorEnabled>
 80010c2:	1e03      	subs	r3, r0, #0
 80010c4:	d10f      	bne.n	80010e6 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010ca:	2210      	movs	r2, #16
 80010cc:	431a      	orrs	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80010d6:	2201      	movs	r2, #1
 80010d8:	431a      	orrs	r2, r3
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80010de:	231f      	movs	r3, #31
 80010e0:	18fb      	adds	r3, r7, r3
 80010e2:	2201      	movs	r2, #1
 80010e4:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	0018      	movs	r0, r3
 80010ec:	f7ff ff94 	bl	8001018 <LL_ADC_REG_IsConversionOngoing>
 80010f0:	0003      	movs	r3, r0
 80010f2:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f8:	2210      	movs	r2, #16
 80010fa:	4013      	ands	r3, r2
 80010fc:	d000      	beq.n	8001100 <HAL_ADC_Init+0xc4>
 80010fe:	e122      	b.n	8001346 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001100:	693b      	ldr	r3, [r7, #16]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d000      	beq.n	8001108 <HAL_ADC_Init+0xcc>
 8001106:	e11e      	b.n	8001346 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800110c:	4a98      	ldr	r2, [pc, #608]	; (8001370 <HAL_ADC_Init+0x334>)
 800110e:	4013      	ands	r3, r2
 8001110:	2202      	movs	r2, #2
 8001112:	431a      	orrs	r2, r3
 8001114:	687b      	ldr	r3, [r7, #4]
 8001116:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	681b      	ldr	r3, [r3, #0]
 800111c:	0018      	movs	r0, r3
 800111e:	f7ff ff57 	bl	8000fd0 <LL_ADC_IsEnabled>
 8001122:	1e03      	subs	r3, r0, #0
 8001124:	d000      	beq.n	8001128 <HAL_ADC_Init+0xec>
 8001126:	e0ad      	b.n	8001284 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	7e1b      	ldrb	r3, [r3, #24]
 8001130:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8001132:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	7e5b      	ldrb	r3, [r3, #25]
 8001138:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800113a:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	7e9b      	ldrb	r3, [r3, #26]
 8001140:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001142:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <HAL_ADC_Init+0x116>
 800114c:	2380      	movs	r3, #128	; 0x80
 800114e:	015b      	lsls	r3, r3, #5
 8001150:	e000      	b.n	8001154 <HAL_ADC_Init+0x118>
 8001152:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001154:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 800115a:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	691b      	ldr	r3, [r3, #16]
 8001160:	2b00      	cmp	r3, #0
 8001162:	da04      	bge.n	800116e <HAL_ADC_Init+0x132>
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	691b      	ldr	r3, [r3, #16]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	085b      	lsrs	r3, r3, #1
 800116c:	e001      	b.n	8001172 <HAL_ADC_Init+0x136>
 800116e:	2380      	movs	r3, #128	; 0x80
 8001170:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8001172:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	212c      	movs	r1, #44	; 0x2c
 8001178:	5c5b      	ldrb	r3, [r3, r1]
 800117a:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800117c:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 800117e:	69ba      	ldr	r2, [r7, #24]
 8001180:	4313      	orrs	r3, r2
 8001182:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2220      	movs	r2, #32
 8001188:	5c9b      	ldrb	r3, [r3, r2]
 800118a:	2b01      	cmp	r3, #1
 800118c:	d115      	bne.n	80011ba <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	7e9b      	ldrb	r3, [r3, #26]
 8001192:	2b00      	cmp	r3, #0
 8001194:	d105      	bne.n	80011a2 <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8001196:	69bb      	ldr	r3, [r7, #24]
 8001198:	2280      	movs	r2, #128	; 0x80
 800119a:	0252      	lsls	r2, r2, #9
 800119c:	4313      	orrs	r3, r2
 800119e:	61bb      	str	r3, [r7, #24]
 80011a0:	e00b      	b.n	80011ba <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011a6:	2220      	movs	r2, #32
 80011a8:	431a      	orrs	r2, r3
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011b2:	2201      	movs	r2, #1
 80011b4:	431a      	orrs	r2, r3
 80011b6:	687b      	ldr	r3, [r7, #4]
 80011b8:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d00a      	beq.n	80011d8 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80011c6:	23e0      	movs	r3, #224	; 0xe0
 80011c8:	005b      	lsls	r3, r3, #1
 80011ca:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80011d0:	4313      	orrs	r3, r2
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	68db      	ldr	r3, [r3, #12]
 80011de:	4a65      	ldr	r2, [pc, #404]	; (8001374 <HAL_ADC_Init+0x338>)
 80011e0:	4013      	ands	r3, r2
 80011e2:	0019      	movs	r1, r3
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	69ba      	ldr	r2, [r7, #24]
 80011ea:	430a      	orrs	r2, r1
 80011ec:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	685b      	ldr	r3, [r3, #4]
 80011f2:	0f9b      	lsrs	r3, r3, #30
 80011f4:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80011fa:	4313      	orrs	r3, r2
 80011fc:	697a      	ldr	r2, [r7, #20]
 80011fe:	4313      	orrs	r3, r2
 8001200:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	223c      	movs	r2, #60	; 0x3c
 8001206:	5c9b      	ldrb	r3, [r3, r2]
 8001208:	2b01      	cmp	r3, #1
 800120a:	d111      	bne.n	8001230 <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	685b      	ldr	r3, [r3, #4]
 8001210:	0f9b      	lsrs	r3, r3, #30
 8001212:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001218:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800121e:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001224:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001226:	697b      	ldr	r3, [r7, #20]
 8001228:	4313      	orrs	r3, r2
 800122a:	2201      	movs	r2, #1
 800122c:	4313      	orrs	r3, r2
 800122e:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	681b      	ldr	r3, [r3, #0]
 8001234:	691b      	ldr	r3, [r3, #16]
 8001236:	4a50      	ldr	r2, [pc, #320]	; (8001378 <HAL_ADC_Init+0x33c>)
 8001238:	4013      	ands	r3, r2
 800123a:	0019      	movs	r1, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	681b      	ldr	r3, [r3, #0]
 8001240:	697a      	ldr	r2, [r7, #20]
 8001242:	430a      	orrs	r2, r1
 8001244:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	685a      	ldr	r2, [r3, #4]
 800124a:	23c0      	movs	r3, #192	; 0xc0
 800124c:	061b      	lsls	r3, r3, #24
 800124e:	429a      	cmp	r2, r3
 8001250:	d018      	beq.n	8001284 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001256:	2380      	movs	r3, #128	; 0x80
 8001258:	05db      	lsls	r3, r3, #23
 800125a:	429a      	cmp	r2, r3
 800125c:	d012      	beq.n	8001284 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001262:	2380      	movs	r3, #128	; 0x80
 8001264:	061b      	lsls	r3, r3, #24
 8001266:	429a      	cmp	r2, r3
 8001268:	d00c      	beq.n	8001284 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800126a:	4b44      	ldr	r3, [pc, #272]	; (800137c <HAL_ADC_Init+0x340>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a44      	ldr	r2, [pc, #272]	; (8001380 <HAL_ADC_Init+0x344>)
 8001270:	4013      	ands	r3, r2
 8001272:	0019      	movs	r1, r3
 8001274:	687b      	ldr	r3, [r7, #4]
 8001276:	685a      	ldr	r2, [r3, #4]
 8001278:	23f0      	movs	r3, #240	; 0xf0
 800127a:	039b      	lsls	r3, r3, #14
 800127c:	401a      	ands	r2, r3
 800127e:	4b3f      	ldr	r3, [pc, #252]	; (800137c <HAL_ADC_Init+0x340>)
 8001280:	430a      	orrs	r2, r1
 8001282:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	6818      	ldr	r0, [r3, #0]
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800128c:	001a      	movs	r2, r3
 800128e:	2100      	movs	r1, #0
 8001290:	f7ff fdbf 	bl	8000e12 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	6818      	ldr	r0, [r3, #0]
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800129c:	4939      	ldr	r1, [pc, #228]	; (8001384 <HAL_ADC_Init+0x348>)
 800129e:	001a      	movs	r2, r3
 80012a0:	f7ff fdb7 	bl	8000e12 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	691b      	ldr	r3, [r3, #16]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d109      	bne.n	80012c0 <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	2110      	movs	r1, #16
 80012b8:	4249      	negs	r1, r1
 80012ba:	430a      	orrs	r2, r1
 80012bc:	629a      	str	r2, [r3, #40]	; 0x28
 80012be:	e018      	b.n	80012f2 <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	691a      	ldr	r2, [r3, #16]
 80012c4:	2380      	movs	r3, #128	; 0x80
 80012c6:	039b      	lsls	r3, r3, #14
 80012c8:	429a      	cmp	r2, r3
 80012ca:	d112      	bne.n	80012f2 <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	69db      	ldr	r3, [r3, #28]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	009b      	lsls	r3, r3, #2
 80012da:	221c      	movs	r2, #28
 80012dc:	4013      	ands	r3, r2
 80012de:	2210      	movs	r2, #16
 80012e0:	4252      	negs	r2, r2
 80012e2:	409a      	lsls	r2, r3
 80012e4:	0011      	movs	r1, r2
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80012ea:	687b      	ldr	r3, [r7, #4]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	430a      	orrs	r2, r1
 80012f0:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	2100      	movs	r1, #0
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fda7 	bl	8000e4c <LL_ADC_GetSamplingTimeCommonChannels>
 80012fe:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001304:	429a      	cmp	r2, r3
 8001306:	d10b      	bne.n	8001320 <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2200      	movs	r2, #0
 800130c:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001312:	2203      	movs	r2, #3
 8001314:	4393      	bics	r3, r2
 8001316:	2201      	movs	r2, #1
 8001318:	431a      	orrs	r2, r3
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800131e:	e01c      	b.n	800135a <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001324:	2212      	movs	r2, #18
 8001326:	4393      	bics	r3, r2
 8001328:	2210      	movs	r2, #16
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2201      	movs	r2, #1
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800133c:	231f      	movs	r3, #31
 800133e:	18fb      	adds	r3, r7, r3
 8001340:	2201      	movs	r2, #1
 8001342:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001344:	e009      	b.n	800135a <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800134a:	2210      	movs	r2, #16
 800134c:	431a      	orrs	r2, r3
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001352:	231f      	movs	r3, #31
 8001354:	18fb      	adds	r3, r7, r3
 8001356:	2201      	movs	r2, #1
 8001358:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800135a:	231f      	movs	r3, #31
 800135c:	18fb      	adds	r3, r7, r3
 800135e:	781b      	ldrb	r3, [r3, #0]
}
 8001360:	0018      	movs	r0, r3
 8001362:	46bd      	mov	sp, r7
 8001364:	b008      	add	sp, #32
 8001366:	bd80      	pop	{r7, pc}
 8001368:	20000008 	.word	0x20000008
 800136c:	00030d40 	.word	0x00030d40
 8001370:	fffffefd 	.word	0xfffffefd
 8001374:	ffde0201 	.word	0xffde0201
 8001378:	1ffffc02 	.word	0x1ffffc02
 800137c:	40012708 	.word	0x40012708
 8001380:	ffc3ffff 	.word	0xffc3ffff
 8001384:	7fffff04 	.word	0x7fffff04

08001388 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001388:	b5b0      	push	{r4, r5, r7, lr}
 800138a:	b084      	sub	sp, #16
 800138c:	af00      	add	r7, sp, #0
 800138e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	0018      	movs	r0, r3
 8001396:	f7ff fe3f 	bl	8001018 <LL_ADC_REG_IsConversionOngoing>
 800139a:	1e03      	subs	r3, r0, #0
 800139c:	d135      	bne.n	800140a <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2254      	movs	r2, #84	; 0x54
 80013a2:	5c9b      	ldrb	r3, [r3, r2]
 80013a4:	2b01      	cmp	r3, #1
 80013a6:	d101      	bne.n	80013ac <HAL_ADC_Start+0x24>
 80013a8:	2302      	movs	r3, #2
 80013aa:	e035      	b.n	8001418 <HAL_ADC_Start+0x90>
 80013ac:	687b      	ldr	r3, [r7, #4]
 80013ae:	2254      	movs	r2, #84	; 0x54
 80013b0:	2101      	movs	r1, #1
 80013b2:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80013b4:	250f      	movs	r5, #15
 80013b6:	197c      	adds	r4, r7, r5
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	0018      	movs	r0, r3
 80013bc:	f000 faa2 	bl	8001904 <ADC_Enable>
 80013c0:	0003      	movs	r3, r0
 80013c2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80013c4:	197b      	adds	r3, r7, r5
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	2b00      	cmp	r3, #0
 80013ca:	d119      	bne.n	8001400 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80013d0:	4a13      	ldr	r2, [pc, #76]	; (8001420 <HAL_ADC_Start+0x98>)
 80013d2:	4013      	ands	r3, r2
 80013d4:	2280      	movs	r2, #128	; 0x80
 80013d6:	0052      	lsls	r2, r2, #1
 80013d8:	431a      	orrs	r2, r3
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	221c      	movs	r2, #28
 80013ea:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2254      	movs	r2, #84	; 0x54
 80013f0:	2100      	movs	r1, #0
 80013f2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	0018      	movs	r0, r3
 80013fa:	f7ff fdfb 	bl	8000ff4 <LL_ADC_REG_StartConversion>
 80013fe:	e008      	b.n	8001412 <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2254      	movs	r2, #84	; 0x54
 8001404:	2100      	movs	r1, #0
 8001406:	5499      	strb	r1, [r3, r2]
 8001408:	e003      	b.n	8001412 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800140a:	230f      	movs	r3, #15
 800140c:	18fb      	adds	r3, r7, r3
 800140e:	2202      	movs	r2, #2
 8001410:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001412:	230f      	movs	r3, #15
 8001414:	18fb      	adds	r3, r7, r3
 8001416:	781b      	ldrb	r3, [r3, #0]
}
 8001418:	0018      	movs	r0, r3
 800141a:	46bd      	mov	sp, r7
 800141c:	b004      	add	sp, #16
 800141e:	bdb0      	pop	{r4, r5, r7, pc}
 8001420:	fffff0fe 	.word	0xfffff0fe

08001424 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b084      	sub	sp, #16
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
 800142c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	695b      	ldr	r3, [r3, #20]
 8001432:	2b08      	cmp	r3, #8
 8001434:	d102      	bne.n	800143c <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001436:	2308      	movs	r3, #8
 8001438:	60fb      	str	r3, [r7, #12]
 800143a:	e00f      	b.n	800145c <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	2201      	movs	r2, #1
 8001444:	4013      	ands	r3, r2
 8001446:	d007      	beq.n	8001458 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800144c:	2220      	movs	r2, #32
 800144e:	431a      	orrs	r2, r3
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001454:	2301      	movs	r3, #1
 8001456:	e06c      	b.n	8001532 <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001458:	2304      	movs	r3, #4
 800145a:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800145c:	f7ff fc8a 	bl	8000d74 <HAL_GetTick>
 8001460:	0003      	movs	r3, r0
 8001462:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001464:	e019      	b.n	800149a <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001466:	683b      	ldr	r3, [r7, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	d016      	beq.n	800149a <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 800146c:	f7ff fc82 	bl	8000d74 <HAL_GetTick>
 8001470:	0002      	movs	r2, r0
 8001472:	68bb      	ldr	r3, [r7, #8]
 8001474:	1ad3      	subs	r3, r2, r3
 8001476:	683a      	ldr	r2, [r7, #0]
 8001478:	429a      	cmp	r2, r3
 800147a:	d302      	bcc.n	8001482 <HAL_ADC_PollForConversion+0x5e>
 800147c:	683b      	ldr	r3, [r7, #0]
 800147e:	2b00      	cmp	r3, #0
 8001480:	d10b      	bne.n	800149a <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001486:	2204      	movs	r2, #4
 8001488:	431a      	orrs	r2, r3
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	2254      	movs	r2, #84	; 0x54
 8001492:	2100      	movs	r1, #0
 8001494:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8001496:	2303      	movs	r3, #3
 8001498:	e04b      	b.n	8001532 <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	68fa      	ldr	r2, [r7, #12]
 80014a2:	4013      	ands	r3, r2
 80014a4:	d0df      	beq.n	8001466 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014aa:	2280      	movs	r2, #128	; 0x80
 80014ac:	0092      	lsls	r2, r2, #2
 80014ae:	431a      	orrs	r2, r3
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80014b4:	687b      	ldr	r3, [r7, #4]
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	0018      	movs	r0, r3
 80014ba:	f7ff fcde 	bl	8000e7a <LL_ADC_REG_IsTriggerSourceSWStart>
 80014be:	1e03      	subs	r3, r0, #0
 80014c0:	d02e      	beq.n	8001520 <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	7e9b      	ldrb	r3, [r3, #26]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d12a      	bne.n	8001520 <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	2208      	movs	r2, #8
 80014d2:	4013      	ands	r3, r2
 80014d4:	2b08      	cmp	r3, #8
 80014d6:	d123      	bne.n	8001520 <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	0018      	movs	r0, r3
 80014de:	f7ff fd9b 	bl	8001018 <LL_ADC_REG_IsConversionOngoing>
 80014e2:	1e03      	subs	r3, r0, #0
 80014e4:	d110      	bne.n	8001508 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	685a      	ldr	r2, [r3, #4]
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	210c      	movs	r1, #12
 80014f2:	438a      	bics	r2, r1
 80014f4:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014fa:	4a10      	ldr	r2, [pc, #64]	; (800153c <HAL_ADC_PollForConversion+0x118>)
 80014fc:	4013      	ands	r3, r2
 80014fe:	2201      	movs	r2, #1
 8001500:	431a      	orrs	r2, r3
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	659a      	str	r2, [r3, #88]	; 0x58
 8001506:	e00b      	b.n	8001520 <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800150c:	2220      	movs	r2, #32
 800150e:	431a      	orrs	r2, r3
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001518:	2201      	movs	r2, #1
 800151a:	431a      	orrs	r2, r3
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	7e1b      	ldrb	r3, [r3, #24]
 8001524:	2b00      	cmp	r3, #0
 8001526:	d103      	bne.n	8001530 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	220c      	movs	r2, #12
 800152e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001530:	2300      	movs	r3, #0
}
 8001532:	0018      	movs	r0, r3
 8001534:	46bd      	mov	sp, r7
 8001536:	b004      	add	sp, #16
 8001538:	bd80      	pop	{r7, pc}
 800153a:	46c0      	nop			; (mov r8, r8)
 800153c:	fffffefe 	.word	0xfffffefe

08001540 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	b082      	sub	sp, #8
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800154e:	0018      	movs	r0, r3
 8001550:	46bd      	mov	sp, r7
 8001552:	b002      	add	sp, #8
 8001554:	bd80      	pop	{r7, pc}
	...

08001558 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001558:	b580      	push	{r7, lr}
 800155a:	b086      	sub	sp, #24
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
 8001560:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001562:	2317      	movs	r3, #23
 8001564:	18fb      	adds	r3, r7, r3
 8001566:	2200      	movs	r2, #0
 8001568:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800156a:	2300      	movs	r3, #0
 800156c:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	2254      	movs	r2, #84	; 0x54
 8001572:	5c9b      	ldrb	r3, [r3, r2]
 8001574:	2b01      	cmp	r3, #1
 8001576:	d101      	bne.n	800157c <HAL_ADC_ConfigChannel+0x24>
 8001578:	2302      	movs	r3, #2
 800157a:	e1be      	b.n	80018fa <HAL_ADC_ConfigChannel+0x3a2>
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2254      	movs	r2, #84	; 0x54
 8001580:	2101      	movs	r1, #1
 8001582:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	0018      	movs	r0, r3
 800158a:	f7ff fd45 	bl	8001018 <LL_ADC_REG_IsConversionOngoing>
 800158e:	1e03      	subs	r3, r0, #0
 8001590:	d000      	beq.n	8001594 <HAL_ADC_ConfigChannel+0x3c>
 8001592:	e1a1      	b.n	80018d8 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 8001594:	683b      	ldr	r3, [r7, #0]
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	2b02      	cmp	r3, #2
 800159a:	d100      	bne.n	800159e <HAL_ADC_ConfigChannel+0x46>
 800159c:	e152      	b.n	8001844 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	691a      	ldr	r2, [r3, #16]
 80015a2:	2380      	movs	r3, #128	; 0x80
 80015a4:	061b      	lsls	r3, r3, #24
 80015a6:	429a      	cmp	r2, r3
 80015a8:	d004      	beq.n	80015b4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015ae:	4ac2      	ldr	r2, [pc, #776]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 80015b0:	4293      	cmp	r3, r2
 80015b2:	d108      	bne.n	80015c6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	681a      	ldr	r2, [r3, #0]
 80015b8:	683b      	ldr	r3, [r7, #0]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	0019      	movs	r1, r3
 80015be:	0010      	movs	r0, r2
 80015c0:	f7ff fc8c 	bl	8000edc <LL_ADC_REG_SetSequencerChAdd>
 80015c4:	e0ed      	b.n	80017a2 <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	685b      	ldr	r3, [r3, #4]
 80015ce:	211f      	movs	r1, #31
 80015d0:	400b      	ands	r3, r1
 80015d2:	210f      	movs	r1, #15
 80015d4:	4099      	lsls	r1, r3
 80015d6:	000b      	movs	r3, r1
 80015d8:	43db      	mvns	r3, r3
 80015da:	4013      	ands	r3, r2
 80015dc:	0019      	movs	r1, r3
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	681b      	ldr	r3, [r3, #0]
 80015e2:	025b      	lsls	r3, r3, #9
 80015e4:	0a5b      	lsrs	r3, r3, #9
 80015e6:	d105      	bne.n	80015f4 <HAL_ADC_ConfigChannel+0x9c>
 80015e8:	683b      	ldr	r3, [r7, #0]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	0e9b      	lsrs	r3, r3, #26
 80015ee:	221f      	movs	r2, #31
 80015f0:	4013      	ands	r3, r2
 80015f2:	e0bc      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 80015f4:	683b      	ldr	r3, [r7, #0]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	2201      	movs	r2, #1
 80015fa:	4013      	ands	r3, r2
 80015fc:	d000      	beq.n	8001600 <HAL_ADC_ConfigChannel+0xa8>
 80015fe:	e0b5      	b.n	800176c <HAL_ADC_ConfigChannel+0x214>
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	681b      	ldr	r3, [r3, #0]
 8001604:	2202      	movs	r2, #2
 8001606:	4013      	ands	r3, r2
 8001608:	d000      	beq.n	800160c <HAL_ADC_ConfigChannel+0xb4>
 800160a:	e0ad      	b.n	8001768 <HAL_ADC_ConfigChannel+0x210>
 800160c:	683b      	ldr	r3, [r7, #0]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2204      	movs	r2, #4
 8001612:	4013      	ands	r3, r2
 8001614:	d000      	beq.n	8001618 <HAL_ADC_ConfigChannel+0xc0>
 8001616:	e0a5      	b.n	8001764 <HAL_ADC_ConfigChannel+0x20c>
 8001618:	683b      	ldr	r3, [r7, #0]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	2208      	movs	r2, #8
 800161e:	4013      	ands	r3, r2
 8001620:	d000      	beq.n	8001624 <HAL_ADC_ConfigChannel+0xcc>
 8001622:	e09d      	b.n	8001760 <HAL_ADC_ConfigChannel+0x208>
 8001624:	683b      	ldr	r3, [r7, #0]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	2210      	movs	r2, #16
 800162a:	4013      	ands	r3, r2
 800162c:	d000      	beq.n	8001630 <HAL_ADC_ConfigChannel+0xd8>
 800162e:	e095      	b.n	800175c <HAL_ADC_ConfigChannel+0x204>
 8001630:	683b      	ldr	r3, [r7, #0]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	2220      	movs	r2, #32
 8001636:	4013      	ands	r3, r2
 8001638:	d000      	beq.n	800163c <HAL_ADC_ConfigChannel+0xe4>
 800163a:	e08d      	b.n	8001758 <HAL_ADC_ConfigChannel+0x200>
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	2240      	movs	r2, #64	; 0x40
 8001642:	4013      	ands	r3, r2
 8001644:	d000      	beq.n	8001648 <HAL_ADC_ConfigChannel+0xf0>
 8001646:	e085      	b.n	8001754 <HAL_ADC_ConfigChannel+0x1fc>
 8001648:	683b      	ldr	r3, [r7, #0]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	2280      	movs	r2, #128	; 0x80
 800164e:	4013      	ands	r3, r2
 8001650:	d000      	beq.n	8001654 <HAL_ADC_ConfigChannel+0xfc>
 8001652:	e07d      	b.n	8001750 <HAL_ADC_ConfigChannel+0x1f8>
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	681a      	ldr	r2, [r3, #0]
 8001658:	2380      	movs	r3, #128	; 0x80
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4013      	ands	r3, r2
 800165e:	d000      	beq.n	8001662 <HAL_ADC_ConfigChannel+0x10a>
 8001660:	e074      	b.n	800174c <HAL_ADC_ConfigChannel+0x1f4>
 8001662:	683b      	ldr	r3, [r7, #0]
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	2380      	movs	r3, #128	; 0x80
 8001668:	009b      	lsls	r3, r3, #2
 800166a:	4013      	ands	r3, r2
 800166c:	d000      	beq.n	8001670 <HAL_ADC_ConfigChannel+0x118>
 800166e:	e06b      	b.n	8001748 <HAL_ADC_ConfigChannel+0x1f0>
 8001670:	683b      	ldr	r3, [r7, #0]
 8001672:	681a      	ldr	r2, [r3, #0]
 8001674:	2380      	movs	r3, #128	; 0x80
 8001676:	00db      	lsls	r3, r3, #3
 8001678:	4013      	ands	r3, r2
 800167a:	d000      	beq.n	800167e <HAL_ADC_ConfigChannel+0x126>
 800167c:	e062      	b.n	8001744 <HAL_ADC_ConfigChannel+0x1ec>
 800167e:	683b      	ldr	r3, [r7, #0]
 8001680:	681a      	ldr	r2, [r3, #0]
 8001682:	2380      	movs	r3, #128	; 0x80
 8001684:	011b      	lsls	r3, r3, #4
 8001686:	4013      	ands	r3, r2
 8001688:	d000      	beq.n	800168c <HAL_ADC_ConfigChannel+0x134>
 800168a:	e059      	b.n	8001740 <HAL_ADC_ConfigChannel+0x1e8>
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	2380      	movs	r3, #128	; 0x80
 8001692:	015b      	lsls	r3, r3, #5
 8001694:	4013      	ands	r3, r2
 8001696:	d151      	bne.n	800173c <HAL_ADC_ConfigChannel+0x1e4>
 8001698:	683b      	ldr	r3, [r7, #0]
 800169a:	681a      	ldr	r2, [r3, #0]
 800169c:	2380      	movs	r3, #128	; 0x80
 800169e:	019b      	lsls	r3, r3, #6
 80016a0:	4013      	ands	r3, r2
 80016a2:	d149      	bne.n	8001738 <HAL_ADC_ConfigChannel+0x1e0>
 80016a4:	683b      	ldr	r3, [r7, #0]
 80016a6:	681a      	ldr	r2, [r3, #0]
 80016a8:	2380      	movs	r3, #128	; 0x80
 80016aa:	01db      	lsls	r3, r3, #7
 80016ac:	4013      	ands	r3, r2
 80016ae:	d141      	bne.n	8001734 <HAL_ADC_ConfigChannel+0x1dc>
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681a      	ldr	r2, [r3, #0]
 80016b4:	2380      	movs	r3, #128	; 0x80
 80016b6:	021b      	lsls	r3, r3, #8
 80016b8:	4013      	ands	r3, r2
 80016ba:	d139      	bne.n	8001730 <HAL_ADC_ConfigChannel+0x1d8>
 80016bc:	683b      	ldr	r3, [r7, #0]
 80016be:	681a      	ldr	r2, [r3, #0]
 80016c0:	2380      	movs	r3, #128	; 0x80
 80016c2:	025b      	lsls	r3, r3, #9
 80016c4:	4013      	ands	r3, r2
 80016c6:	d131      	bne.n	800172c <HAL_ADC_ConfigChannel+0x1d4>
 80016c8:	683b      	ldr	r3, [r7, #0]
 80016ca:	681a      	ldr	r2, [r3, #0]
 80016cc:	2380      	movs	r3, #128	; 0x80
 80016ce:	029b      	lsls	r3, r3, #10
 80016d0:	4013      	ands	r3, r2
 80016d2:	d129      	bne.n	8001728 <HAL_ADC_ConfigChannel+0x1d0>
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	681a      	ldr	r2, [r3, #0]
 80016d8:	2380      	movs	r3, #128	; 0x80
 80016da:	02db      	lsls	r3, r3, #11
 80016dc:	4013      	ands	r3, r2
 80016de:	d121      	bne.n	8001724 <HAL_ADC_ConfigChannel+0x1cc>
 80016e0:	683b      	ldr	r3, [r7, #0]
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	2380      	movs	r3, #128	; 0x80
 80016e6:	031b      	lsls	r3, r3, #12
 80016e8:	4013      	ands	r3, r2
 80016ea:	d119      	bne.n	8001720 <HAL_ADC_ConfigChannel+0x1c8>
 80016ec:	683b      	ldr	r3, [r7, #0]
 80016ee:	681a      	ldr	r2, [r3, #0]
 80016f0:	2380      	movs	r3, #128	; 0x80
 80016f2:	035b      	lsls	r3, r3, #13
 80016f4:	4013      	ands	r3, r2
 80016f6:	d111      	bne.n	800171c <HAL_ADC_ConfigChannel+0x1c4>
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681a      	ldr	r2, [r3, #0]
 80016fc:	2380      	movs	r3, #128	; 0x80
 80016fe:	039b      	lsls	r3, r3, #14
 8001700:	4013      	ands	r3, r2
 8001702:	d109      	bne.n	8001718 <HAL_ADC_ConfigChannel+0x1c0>
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	681a      	ldr	r2, [r3, #0]
 8001708:	2380      	movs	r3, #128	; 0x80
 800170a:	03db      	lsls	r3, r3, #15
 800170c:	4013      	ands	r3, r2
 800170e:	d001      	beq.n	8001714 <HAL_ADC_ConfigChannel+0x1bc>
 8001710:	2316      	movs	r3, #22
 8001712:	e02c      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001714:	2300      	movs	r3, #0
 8001716:	e02a      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001718:	2315      	movs	r3, #21
 800171a:	e028      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 800171c:	2314      	movs	r3, #20
 800171e:	e026      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001720:	2313      	movs	r3, #19
 8001722:	e024      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001724:	2312      	movs	r3, #18
 8001726:	e022      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001728:	2311      	movs	r3, #17
 800172a:	e020      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 800172c:	2310      	movs	r3, #16
 800172e:	e01e      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001730:	230f      	movs	r3, #15
 8001732:	e01c      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001734:	230e      	movs	r3, #14
 8001736:	e01a      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001738:	230d      	movs	r3, #13
 800173a:	e018      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 800173c:	230c      	movs	r3, #12
 800173e:	e016      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001740:	230b      	movs	r3, #11
 8001742:	e014      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001744:	230a      	movs	r3, #10
 8001746:	e012      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001748:	2309      	movs	r3, #9
 800174a:	e010      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 800174c:	2308      	movs	r3, #8
 800174e:	e00e      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001750:	2307      	movs	r3, #7
 8001752:	e00c      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001754:	2306      	movs	r3, #6
 8001756:	e00a      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001758:	2305      	movs	r3, #5
 800175a:	e008      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 800175c:	2304      	movs	r3, #4
 800175e:	e006      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001760:	2303      	movs	r3, #3
 8001762:	e004      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001764:	2302      	movs	r3, #2
 8001766:	e002      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 8001768:	2301      	movs	r3, #1
 800176a:	e000      	b.n	800176e <HAL_ADC_ConfigChannel+0x216>
 800176c:	2300      	movs	r3, #0
 800176e:	683a      	ldr	r2, [r7, #0]
 8001770:	6852      	ldr	r2, [r2, #4]
 8001772:	201f      	movs	r0, #31
 8001774:	4002      	ands	r2, r0
 8001776:	4093      	lsls	r3, r2
 8001778:	000a      	movs	r2, r1
 800177a:	431a      	orrs	r2, r3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001780:	683b      	ldr	r3, [r7, #0]
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	089b      	lsrs	r3, r3, #2
 8001786:	1c5a      	adds	r2, r3, #1
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	69db      	ldr	r3, [r3, #28]
 800178c:	429a      	cmp	r2, r3
 800178e:	d808      	bhi.n	80017a2 <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6818      	ldr	r0, [r3, #0]
 8001794:	683b      	ldr	r3, [r7, #0]
 8001796:	6859      	ldr	r1, [r3, #4]
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	001a      	movs	r2, r3
 800179e:	f7ff fb7d 	bl	8000e9c <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	6818      	ldr	r0, [r3, #0]
 80017a6:	683b      	ldr	r3, [r7, #0]
 80017a8:	6819      	ldr	r1, [r3, #0]
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	001a      	movs	r2, r3
 80017b0:	f7ff fbb8 	bl	8000f24 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	db00      	blt.n	80017be <HAL_ADC_ConfigChannel+0x266>
 80017bc:	e096      	b.n	80018ec <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017be:	4b3f      	ldr	r3, [pc, #252]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 80017c0:	0018      	movs	r0, r3
 80017c2:	f7ff fb19 	bl	8000df8 <LL_ADC_GetCommonPathInternalCh>
 80017c6:	0003      	movs	r3, r0
 80017c8:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a3c      	ldr	r2, [pc, #240]	; (80018c0 <HAL_ADC_ConfigChannel+0x368>)
 80017d0:	4293      	cmp	r3, r2
 80017d2:	d123      	bne.n	800181c <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80017d4:	693a      	ldr	r2, [r7, #16]
 80017d6:	2380      	movs	r3, #128	; 0x80
 80017d8:	041b      	lsls	r3, r3, #16
 80017da:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80017dc:	d11e      	bne.n	800181c <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80017de:	693b      	ldr	r3, [r7, #16]
 80017e0:	2280      	movs	r2, #128	; 0x80
 80017e2:	0412      	lsls	r2, r2, #16
 80017e4:	4313      	orrs	r3, r2
 80017e6:	4a35      	ldr	r2, [pc, #212]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 80017e8:	0019      	movs	r1, r3
 80017ea:	0010      	movs	r0, r2
 80017ec:	f7ff faf0 	bl	8000dd0 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 80017f0:	4b34      	ldr	r3, [pc, #208]	; (80018c4 <HAL_ADC_ConfigChannel+0x36c>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	4934      	ldr	r1, [pc, #208]	; (80018c8 <HAL_ADC_ConfigChannel+0x370>)
 80017f6:	0018      	movs	r0, r3
 80017f8:	f7fe fc86 	bl	8000108 <__udivsi3>
 80017fc:	0003      	movs	r3, r0
 80017fe:	001a      	movs	r2, r3
 8001800:	0013      	movs	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	189b      	adds	r3, r3, r2
 8001806:	009b      	lsls	r3, r3, #2
 8001808:	3301      	adds	r3, #1
 800180a:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800180c:	e002      	b.n	8001814 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	3b01      	subs	r3, #1
 8001812:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	2b00      	cmp	r3, #0
 8001818:	d1f9      	bne.n	800180e <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800181a:	e067      	b.n	80018ec <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	4a2a      	ldr	r2, [pc, #168]	; (80018cc <HAL_ADC_ConfigChannel+0x374>)
 8001822:	4293      	cmp	r3, r2
 8001824:	d162      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001826:	693a      	ldr	r2, [r7, #16]
 8001828:	2380      	movs	r3, #128	; 0x80
 800182a:	03db      	lsls	r3, r3, #15
 800182c:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800182e:	d15d      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001830:	693b      	ldr	r3, [r7, #16]
 8001832:	2280      	movs	r2, #128	; 0x80
 8001834:	03d2      	lsls	r2, r2, #15
 8001836:	4313      	orrs	r3, r2
 8001838:	4a20      	ldr	r2, [pc, #128]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 800183a:	0019      	movs	r1, r3
 800183c:	0010      	movs	r0, r2
 800183e:	f7ff fac7 	bl	8000dd0 <LL_ADC_SetCommonPathInternalCh>
 8001842:	e053      	b.n	80018ec <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	2380      	movs	r3, #128	; 0x80
 800184a:	061b      	lsls	r3, r3, #24
 800184c:	429a      	cmp	r2, r3
 800184e:	d004      	beq.n	800185a <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001854:	4a18      	ldr	r2, [pc, #96]	; (80018b8 <HAL_ADC_ConfigChannel+0x360>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d107      	bne.n	800186a <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681a      	ldr	r2, [r3, #0]
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	0019      	movs	r1, r3
 8001864:	0010      	movs	r0, r2
 8001866:	f7ff fb4a 	bl	8000efe <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b00      	cmp	r3, #0
 8001870:	da3c      	bge.n	80018ec <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001872:	4b12      	ldr	r3, [pc, #72]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 8001874:	0018      	movs	r0, r3
 8001876:	f7ff fabf 	bl	8000df8 <LL_ADC_GetCommonPathInternalCh>
 800187a:	0003      	movs	r3, r0
 800187c:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	4a0f      	ldr	r2, [pc, #60]	; (80018c0 <HAL_ADC_ConfigChannel+0x368>)
 8001884:	4293      	cmp	r3, r2
 8001886:	d108      	bne.n	800189a <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001888:	693b      	ldr	r3, [r7, #16]
 800188a:	4a11      	ldr	r2, [pc, #68]	; (80018d0 <HAL_ADC_ConfigChannel+0x378>)
 800188c:	4013      	ands	r3, r2
 800188e:	4a0b      	ldr	r2, [pc, #44]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 8001890:	0019      	movs	r1, r3
 8001892:	0010      	movs	r0, r2
 8001894:	f7ff fa9c 	bl	8000dd0 <LL_ADC_SetCommonPathInternalCh>
 8001898:	e028      	b.n	80018ec <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 800189a:	683b      	ldr	r3, [r7, #0]
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	4a0b      	ldr	r2, [pc, #44]	; (80018cc <HAL_ADC_ConfigChannel+0x374>)
 80018a0:	4293      	cmp	r3, r2
 80018a2:	d123      	bne.n	80018ec <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_ADC_ConfigChannel+0x37c>)
 80018a8:	4013      	ands	r3, r2
 80018aa:	4a04      	ldr	r2, [pc, #16]	; (80018bc <HAL_ADC_ConfigChannel+0x364>)
 80018ac:	0019      	movs	r1, r3
 80018ae:	0010      	movs	r0, r2
 80018b0:	f7ff fa8e 	bl	8000dd0 <LL_ADC_SetCommonPathInternalCh>
 80018b4:	e01a      	b.n	80018ec <HAL_ADC_ConfigChannel+0x394>
 80018b6:	46c0      	nop			; (mov r8, r8)
 80018b8:	80000004 	.word	0x80000004
 80018bc:	40012708 	.word	0x40012708
 80018c0:	a4000200 	.word	0xa4000200
 80018c4:	20000008 	.word	0x20000008
 80018c8:	00030d40 	.word	0x00030d40
 80018cc:	a8000400 	.word	0xa8000400
 80018d0:	ff7fffff 	.word	0xff7fffff
 80018d4:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018dc:	2220      	movs	r2, #32
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80018e4:	2317      	movs	r3, #23
 80018e6:	18fb      	adds	r3, r7, r3
 80018e8:	2201      	movs	r2, #1
 80018ea:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	2254      	movs	r2, #84	; 0x54
 80018f0:	2100      	movs	r1, #0
 80018f2:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 80018f4:	2317      	movs	r3, #23
 80018f6:	18fb      	adds	r3, r7, r3
 80018f8:	781b      	ldrb	r3, [r3, #0]
}
 80018fa:	0018      	movs	r0, r3
 80018fc:	46bd      	mov	sp, r7
 80018fe:	b006      	add	sp, #24
 8001900:	bd80      	pop	{r7, pc}
 8001902:	46c0      	nop			; (mov r8, r8)

08001904 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001904:	b580      	push	{r7, lr}
 8001906:	b084      	sub	sp, #16
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	0018      	movs	r0, r3
 8001916:	f7ff fb5b 	bl	8000fd0 <LL_ADC_IsEnabled>
 800191a:	1e03      	subs	r3, r0, #0
 800191c:	d162      	bne.n	80019e4 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	689b      	ldr	r3, [r3, #8]
 8001924:	4a32      	ldr	r2, [pc, #200]	; (80019f0 <ADC_Enable+0xec>)
 8001926:	4013      	ands	r3, r2
 8001928:	d00d      	beq.n	8001946 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800192e:	2210      	movs	r2, #16
 8001930:	431a      	orrs	r2, r3
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800193a:	2201      	movs	r2, #1
 800193c:	431a      	orrs	r2, r3
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001942:	2301      	movs	r3, #1
 8001944:	e04f      	b.n	80019e6 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0018      	movs	r0, r3
 800194c:	f7ff fb2e 	bl	8000fac <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8001950:	4b28      	ldr	r3, [pc, #160]	; (80019f4 <ADC_Enable+0xf0>)
 8001952:	0018      	movs	r0, r3
 8001954:	f7ff fa50 	bl	8000df8 <LL_ADC_GetCommonPathInternalCh>
 8001958:	0002      	movs	r2, r0
 800195a:	2380      	movs	r3, #128	; 0x80
 800195c:	041b      	lsls	r3, r3, #16
 800195e:	4013      	ands	r3, r2
 8001960:	d00f      	beq.n	8001982 <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 8001962:	4b25      	ldr	r3, [pc, #148]	; (80019f8 <ADC_Enable+0xf4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4925      	ldr	r1, [pc, #148]	; (80019fc <ADC_Enable+0xf8>)
 8001968:	0018      	movs	r0, r3
 800196a:	f7fe fbcd 	bl	8000108 <__udivsi3>
 800196e:	0003      	movs	r3, r0
 8001970:	3301      	adds	r3, #1
 8001972:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001974:	e002      	b.n	800197c <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001976:	68bb      	ldr	r3, [r7, #8]
 8001978:	3b01      	subs	r3, #1
 800197a:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800197c:	68bb      	ldr	r3, [r7, #8]
 800197e:	2b00      	cmp	r3, #0
 8001980:	d1f9      	bne.n	8001976 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	7e5b      	ldrb	r3, [r3, #25]
 8001986:	2b01      	cmp	r3, #1
 8001988:	d02c      	beq.n	80019e4 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 800198a:	f7ff f9f3 	bl	8000d74 <HAL_GetTick>
 800198e:	0003      	movs	r3, r0
 8001990:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001992:	e020      	b.n	80019d6 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	0018      	movs	r0, r3
 800199a:	f7ff fb19 	bl	8000fd0 <LL_ADC_IsEnabled>
 800199e:	1e03      	subs	r3, r0, #0
 80019a0:	d104      	bne.n	80019ac <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	0018      	movs	r0, r3
 80019a8:	f7ff fb00 	bl	8000fac <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80019ac:	f7ff f9e2 	bl	8000d74 <HAL_GetTick>
 80019b0:	0002      	movs	r2, r0
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d90d      	bls.n	80019d6 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019be:	2210      	movs	r2, #16
 80019c0:	431a      	orrs	r2, r3
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2201      	movs	r2, #1
 80019cc:	431a      	orrs	r2, r3
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e007      	b.n	80019e6 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	2201      	movs	r2, #1
 80019de:	4013      	ands	r3, r2
 80019e0:	2b01      	cmp	r3, #1
 80019e2:	d1d7      	bne.n	8001994 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80019e4:	2300      	movs	r3, #0
}
 80019e6:	0018      	movs	r0, r3
 80019e8:	46bd      	mov	sp, r7
 80019ea:	b004      	add	sp, #16
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	46c0      	nop			; (mov r8, r8)
 80019f0:	80000017 	.word	0x80000017
 80019f4:	40012708 	.word	0x40012708
 80019f8:	20000008 	.word	0x20000008
 80019fc:	00030d40 	.word	0x00030d40

08001a00 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a00:	b590      	push	{r4, r7, lr}
 8001a02:	b083      	sub	sp, #12
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	0002      	movs	r2, r0
 8001a08:	6039      	str	r1, [r7, #0]
 8001a0a:	1dfb      	adds	r3, r7, #7
 8001a0c:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001a0e:	1dfb      	adds	r3, r7, #7
 8001a10:	781b      	ldrb	r3, [r3, #0]
 8001a12:	2b7f      	cmp	r3, #127	; 0x7f
 8001a14:	d828      	bhi.n	8001a68 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a16:	4a2f      	ldr	r2, [pc, #188]	; (8001ad4 <__NVIC_SetPriority+0xd4>)
 8001a18:	1dfb      	adds	r3, r7, #7
 8001a1a:	781b      	ldrb	r3, [r3, #0]
 8001a1c:	b25b      	sxtb	r3, r3
 8001a1e:	089b      	lsrs	r3, r3, #2
 8001a20:	33c0      	adds	r3, #192	; 0xc0
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	589b      	ldr	r3, [r3, r2]
 8001a26:	1dfa      	adds	r2, r7, #7
 8001a28:	7812      	ldrb	r2, [r2, #0]
 8001a2a:	0011      	movs	r1, r2
 8001a2c:	2203      	movs	r2, #3
 8001a2e:	400a      	ands	r2, r1
 8001a30:	00d2      	lsls	r2, r2, #3
 8001a32:	21ff      	movs	r1, #255	; 0xff
 8001a34:	4091      	lsls	r1, r2
 8001a36:	000a      	movs	r2, r1
 8001a38:	43d2      	mvns	r2, r2
 8001a3a:	401a      	ands	r2, r3
 8001a3c:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a3e:	683b      	ldr	r3, [r7, #0]
 8001a40:	019b      	lsls	r3, r3, #6
 8001a42:	22ff      	movs	r2, #255	; 0xff
 8001a44:	401a      	ands	r2, r3
 8001a46:	1dfb      	adds	r3, r7, #7
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	0018      	movs	r0, r3
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	4003      	ands	r3, r0
 8001a50:	00db      	lsls	r3, r3, #3
 8001a52:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a54:	481f      	ldr	r0, [pc, #124]	; (8001ad4 <__NVIC_SetPriority+0xd4>)
 8001a56:	1dfb      	adds	r3, r7, #7
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	b25b      	sxtb	r3, r3
 8001a5c:	089b      	lsrs	r3, r3, #2
 8001a5e:	430a      	orrs	r2, r1
 8001a60:	33c0      	adds	r3, #192	; 0xc0
 8001a62:	009b      	lsls	r3, r3, #2
 8001a64:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001a66:	e031      	b.n	8001acc <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001a68:	4a1b      	ldr	r2, [pc, #108]	; (8001ad8 <__NVIC_SetPriority+0xd8>)
 8001a6a:	1dfb      	adds	r3, r7, #7
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	0019      	movs	r1, r3
 8001a70:	230f      	movs	r3, #15
 8001a72:	400b      	ands	r3, r1
 8001a74:	3b08      	subs	r3, #8
 8001a76:	089b      	lsrs	r3, r3, #2
 8001a78:	3306      	adds	r3, #6
 8001a7a:	009b      	lsls	r3, r3, #2
 8001a7c:	18d3      	adds	r3, r2, r3
 8001a7e:	3304      	adds	r3, #4
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	1dfa      	adds	r2, r7, #7
 8001a84:	7812      	ldrb	r2, [r2, #0]
 8001a86:	0011      	movs	r1, r2
 8001a88:	2203      	movs	r2, #3
 8001a8a:	400a      	ands	r2, r1
 8001a8c:	00d2      	lsls	r2, r2, #3
 8001a8e:	21ff      	movs	r1, #255	; 0xff
 8001a90:	4091      	lsls	r1, r2
 8001a92:	000a      	movs	r2, r1
 8001a94:	43d2      	mvns	r2, r2
 8001a96:	401a      	ands	r2, r3
 8001a98:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	019b      	lsls	r3, r3, #6
 8001a9e:	22ff      	movs	r2, #255	; 0xff
 8001aa0:	401a      	ands	r2, r3
 8001aa2:	1dfb      	adds	r3, r7, #7
 8001aa4:	781b      	ldrb	r3, [r3, #0]
 8001aa6:	0018      	movs	r0, r3
 8001aa8:	2303      	movs	r3, #3
 8001aaa:	4003      	ands	r3, r0
 8001aac:	00db      	lsls	r3, r3, #3
 8001aae:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001ab0:	4809      	ldr	r0, [pc, #36]	; (8001ad8 <__NVIC_SetPriority+0xd8>)
 8001ab2:	1dfb      	adds	r3, r7, #7
 8001ab4:	781b      	ldrb	r3, [r3, #0]
 8001ab6:	001c      	movs	r4, r3
 8001ab8:	230f      	movs	r3, #15
 8001aba:	4023      	ands	r3, r4
 8001abc:	3b08      	subs	r3, #8
 8001abe:	089b      	lsrs	r3, r3, #2
 8001ac0:	430a      	orrs	r2, r1
 8001ac2:	3306      	adds	r3, #6
 8001ac4:	009b      	lsls	r3, r3, #2
 8001ac6:	18c3      	adds	r3, r0, r3
 8001ac8:	3304      	adds	r3, #4
 8001aca:	601a      	str	r2, [r3, #0]
}
 8001acc:	46c0      	nop			; (mov r8, r8)
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	b003      	add	sp, #12
 8001ad2:	bd90      	pop	{r4, r7, pc}
 8001ad4:	e000e100 	.word	0xe000e100
 8001ad8:	e000ed00 	.word	0xe000ed00

08001adc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b082      	sub	sp, #8
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	1e5a      	subs	r2, r3, #1
 8001ae8:	2380      	movs	r3, #128	; 0x80
 8001aea:	045b      	lsls	r3, r3, #17
 8001aec:	429a      	cmp	r2, r3
 8001aee:	d301      	bcc.n	8001af4 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001af0:	2301      	movs	r3, #1
 8001af2:	e010      	b.n	8001b16 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001af4:	4b0a      	ldr	r3, [pc, #40]	; (8001b20 <SysTick_Config+0x44>)
 8001af6:	687a      	ldr	r2, [r7, #4]
 8001af8:	3a01      	subs	r2, #1
 8001afa:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001afc:	2301      	movs	r3, #1
 8001afe:	425b      	negs	r3, r3
 8001b00:	2103      	movs	r1, #3
 8001b02:	0018      	movs	r0, r3
 8001b04:	f7ff ff7c 	bl	8001a00 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b08:	4b05      	ldr	r3, [pc, #20]	; (8001b20 <SysTick_Config+0x44>)
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b0e:	4b04      	ldr	r3, [pc, #16]	; (8001b20 <SysTick_Config+0x44>)
 8001b10:	2207      	movs	r2, #7
 8001b12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	0018      	movs	r0, r3
 8001b18:	46bd      	mov	sp, r7
 8001b1a:	b002      	add	sp, #8
 8001b1c:	bd80      	pop	{r7, pc}
 8001b1e:	46c0      	nop			; (mov r8, r8)
 8001b20:	e000e010 	.word	0xe000e010

08001b24 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b084      	sub	sp, #16
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	60b9      	str	r1, [r7, #8]
 8001b2c:	607a      	str	r2, [r7, #4]
 8001b2e:	210f      	movs	r1, #15
 8001b30:	187b      	adds	r3, r7, r1
 8001b32:	1c02      	adds	r2, r0, #0
 8001b34:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001b36:	68ba      	ldr	r2, [r7, #8]
 8001b38:	187b      	adds	r3, r7, r1
 8001b3a:	781b      	ldrb	r3, [r3, #0]
 8001b3c:	b25b      	sxtb	r3, r3
 8001b3e:	0011      	movs	r1, r2
 8001b40:	0018      	movs	r0, r3
 8001b42:	f7ff ff5d 	bl	8001a00 <__NVIC_SetPriority>
}
 8001b46:	46c0      	nop			; (mov r8, r8)
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	b004      	add	sp, #16
 8001b4c:	bd80      	pop	{r7, pc}

08001b4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4e:	b580      	push	{r7, lr}
 8001b50:	b082      	sub	sp, #8
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	0018      	movs	r0, r3
 8001b5a:	f7ff ffbf 	bl	8001adc <SysTick_Config>
 8001b5e:	0003      	movs	r3, r0
}
 8001b60:	0018      	movs	r0, r3
 8001b62:	46bd      	mov	sp, r7
 8001b64:	b002      	add	sp, #8
 8001b66:	bd80      	pop	{r7, pc}

08001b68 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b086      	sub	sp, #24
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 8001b72:	2300      	movs	r3, #0
 8001b74:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001b76:	e14d      	b.n	8001e14 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001b78:	683b      	ldr	r3, [r7, #0]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	2101      	movs	r1, #1
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4091      	lsls	r1, r2
 8001b82:	000a      	movs	r2, r1
 8001b84:	4013      	ands	r3, r2
 8001b86:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 8001b88:	68fb      	ldr	r3, [r7, #12]
 8001b8a:	2b00      	cmp	r3, #0
 8001b8c:	d100      	bne.n	8001b90 <HAL_GPIO_Init+0x28>
 8001b8e:	e13e      	b.n	8001e0e <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	2b02      	cmp	r3, #2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x38>
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	2b12      	cmp	r3, #18
 8001b9e:	d125      	bne.n	8001bec <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 8001ba0:	693b      	ldr	r3, [r7, #16]
 8001ba2:	08da      	lsrs	r2, r3, #3
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	3208      	adds	r2, #8
 8001ba8:	0092      	lsls	r2, r2, #2
 8001baa:	58d3      	ldr	r3, [r2, r3]
 8001bac:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 8001bae:	693b      	ldr	r3, [r7, #16]
 8001bb0:	2207      	movs	r2, #7
 8001bb2:	4013      	ands	r3, r2
 8001bb4:	009b      	lsls	r3, r3, #2
 8001bb6:	220f      	movs	r2, #15
 8001bb8:	409a      	lsls	r2, r3
 8001bba:	0013      	movs	r3, r2
 8001bbc:	43da      	mvns	r2, r3
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	4013      	ands	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 8001bc4:	683b      	ldr	r3, [r7, #0]
 8001bc6:	691b      	ldr	r3, [r3, #16]
 8001bc8:	220f      	movs	r2, #15
 8001bca:	401a      	ands	r2, r3
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	2107      	movs	r1, #7
 8001bd0:	400b      	ands	r3, r1
 8001bd2:	009b      	lsls	r3, r3, #2
 8001bd4:	409a      	lsls	r2, r3
 8001bd6:	0013      	movs	r3, r2
 8001bd8:	697a      	ldr	r2, [r7, #20]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 8001bde:	693b      	ldr	r3, [r7, #16]
 8001be0:	08da      	lsrs	r2, r3, #3
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	3208      	adds	r2, #8
 8001be6:	0092      	lsls	r2, r2, #2
 8001be8:	6979      	ldr	r1, [r7, #20]
 8001bea:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	005b      	lsls	r3, r3, #1
 8001bf6:	2203      	movs	r2, #3
 8001bf8:	409a      	lsls	r2, r3
 8001bfa:	0013      	movs	r3, r2
 8001bfc:	43da      	mvns	r2, r3
 8001bfe:	697b      	ldr	r3, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001c04:	683b      	ldr	r3, [r7, #0]
 8001c06:	685b      	ldr	r3, [r3, #4]
 8001c08:	2203      	movs	r2, #3
 8001c0a:	401a      	ands	r2, r3
 8001c0c:	693b      	ldr	r3, [r7, #16]
 8001c0e:	005b      	lsls	r3, r3, #1
 8001c10:	409a      	lsls	r2, r3
 8001c12:	0013      	movs	r3, r2
 8001c14:	697a      	ldr	r2, [r7, #20]
 8001c16:	4313      	orrs	r3, r2
 8001c18:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	2b01      	cmp	r3, #1
 8001c26:	d00b      	beq.n	8001c40 <HAL_GPIO_Init+0xd8>
 8001c28:	683b      	ldr	r3, [r7, #0]
 8001c2a:	685b      	ldr	r3, [r3, #4]
 8001c2c:	2b02      	cmp	r3, #2
 8001c2e:	d007      	beq.n	8001c40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001c34:	2b11      	cmp	r3, #17
 8001c36:	d003      	beq.n	8001c40 <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	685b      	ldr	r3, [r3, #4]
 8001c3c:	2b12      	cmp	r3, #18
 8001c3e:	d130      	bne.n	8001ca2 <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001c46:	693b      	ldr	r3, [r7, #16]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	409a      	lsls	r2, r3
 8001c4e:	0013      	movs	r3, r2
 8001c50:	43da      	mvns	r2, r3
 8001c52:	697b      	ldr	r3, [r7, #20]
 8001c54:	4013      	ands	r3, r2
 8001c56:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	693b      	ldr	r3, [r7, #16]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	409a      	lsls	r2, r3
 8001c62:	0013      	movs	r3, r2
 8001c64:	697a      	ldr	r2, [r7, #20]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	697a      	ldr	r2, [r7, #20]
 8001c6e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001c76:	2201      	movs	r2, #1
 8001c78:	693b      	ldr	r3, [r7, #16]
 8001c7a:	409a      	lsls	r2, r3
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	43da      	mvns	r2, r3
 8001c80:	697b      	ldr	r3, [r7, #20]
 8001c82:	4013      	ands	r3, r2
 8001c84:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	091b      	lsrs	r3, r3, #4
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	401a      	ands	r2, r3
 8001c90:	693b      	ldr	r3, [r7, #16]
 8001c92:	409a      	lsls	r2, r3
 8001c94:	0013      	movs	r3, r2
 8001c96:	697a      	ldr	r2, [r7, #20]
 8001c98:	4313      	orrs	r3, r2
 8001c9a:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	697a      	ldr	r2, [r7, #20]
 8001ca0:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001ca2:	683b      	ldr	r3, [r7, #0]
 8001ca4:	685b      	ldr	r3, [r3, #4]
 8001ca6:	2b03      	cmp	r3, #3
 8001ca8:	d017      	beq.n	8001cda <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	68db      	ldr	r3, [r3, #12]
 8001cae:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001cb0:	693b      	ldr	r3, [r7, #16]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	2203      	movs	r2, #3
 8001cb6:	409a      	lsls	r2, r3
 8001cb8:	0013      	movs	r3, r2
 8001cba:	43da      	mvns	r2, r3
 8001cbc:	697b      	ldr	r3, [r7, #20]
 8001cbe:	4013      	ands	r3, r2
 8001cc0:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001cc2:	683b      	ldr	r3, [r7, #0]
 8001cc4:	689a      	ldr	r2, [r3, #8]
 8001cc6:	693b      	ldr	r3, [r7, #16]
 8001cc8:	005b      	lsls	r3, r3, #1
 8001cca:	409a      	lsls	r2, r3
 8001ccc:	0013      	movs	r3, r2
 8001cce:	697a      	ldr	r2, [r7, #20]
 8001cd0:	4313      	orrs	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	697a      	ldr	r2, [r7, #20]
 8001cd8:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	2380      	movs	r3, #128	; 0x80
 8001ce0:	055b      	lsls	r3, r3, #21
 8001ce2:	4013      	ands	r3, r2
 8001ce4:	d100      	bne.n	8001ce8 <HAL_GPIO_Init+0x180>
 8001ce6:	e092      	b.n	8001e0e <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001ce8:	4a50      	ldr	r2, [pc, #320]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	089b      	lsrs	r3, r3, #2
 8001cee:	3318      	adds	r3, #24
 8001cf0:	009b      	lsls	r3, r3, #2
 8001cf2:	589b      	ldr	r3, [r3, r2]
 8001cf4:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001cf6:	693b      	ldr	r3, [r7, #16]
 8001cf8:	2203      	movs	r2, #3
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	00db      	lsls	r3, r3, #3
 8001cfe:	220f      	movs	r2, #15
 8001d00:	409a      	lsls	r2, r3
 8001d02:	0013      	movs	r3, r2
 8001d04:	43da      	mvns	r2, r3
 8001d06:	697b      	ldr	r3, [r7, #20]
 8001d08:	4013      	ands	r3, r2
 8001d0a:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001d0c:	687a      	ldr	r2, [r7, #4]
 8001d0e:	23a0      	movs	r3, #160	; 0xa0
 8001d10:	05db      	lsls	r3, r3, #23
 8001d12:	429a      	cmp	r2, r3
 8001d14:	d013      	beq.n	8001d3e <HAL_GPIO_Init+0x1d6>
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	4a45      	ldr	r2, [pc, #276]	; (8001e30 <HAL_GPIO_Init+0x2c8>)
 8001d1a:	4293      	cmp	r3, r2
 8001d1c:	d00d      	beq.n	8001d3a <HAL_GPIO_Init+0x1d2>
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	4a44      	ldr	r2, [pc, #272]	; (8001e34 <HAL_GPIO_Init+0x2cc>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d007      	beq.n	8001d36 <HAL_GPIO_Init+0x1ce>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a43      	ldr	r2, [pc, #268]	; (8001e38 <HAL_GPIO_Init+0x2d0>)
 8001d2a:	4293      	cmp	r3, r2
 8001d2c:	d101      	bne.n	8001d32 <HAL_GPIO_Init+0x1ca>
 8001d2e:	2305      	movs	r3, #5
 8001d30:	e006      	b.n	8001d40 <HAL_GPIO_Init+0x1d8>
 8001d32:	2306      	movs	r3, #6
 8001d34:	e004      	b.n	8001d40 <HAL_GPIO_Init+0x1d8>
 8001d36:	2302      	movs	r3, #2
 8001d38:	e002      	b.n	8001d40 <HAL_GPIO_Init+0x1d8>
 8001d3a:	2301      	movs	r3, #1
 8001d3c:	e000      	b.n	8001d40 <HAL_GPIO_Init+0x1d8>
 8001d3e:	2300      	movs	r3, #0
 8001d40:	693a      	ldr	r2, [r7, #16]
 8001d42:	2103      	movs	r1, #3
 8001d44:	400a      	ands	r2, r1
 8001d46:	00d2      	lsls	r2, r2, #3
 8001d48:	4093      	lsls	r3, r2
 8001d4a:	697a      	ldr	r2, [r7, #20]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001d50:	4936      	ldr	r1, [pc, #216]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	089b      	lsrs	r3, r3, #2
 8001d56:	3318      	adds	r3, #24
 8001d58:	009b      	lsls	r3, r3, #2
 8001d5a:	697a      	ldr	r2, [r7, #20]
 8001d5c:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001d5e:	4a33      	ldr	r2, [pc, #204]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001d60:	2380      	movs	r3, #128	; 0x80
 8001d62:	58d3      	ldr	r3, [r2, r3]
 8001d64:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	43da      	mvns	r2, r3
 8001d6a:	697b      	ldr	r3, [r7, #20]
 8001d6c:	4013      	ands	r3, r2
 8001d6e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d70:	683b      	ldr	r3, [r7, #0]
 8001d72:	685a      	ldr	r2, [r3, #4]
 8001d74:	2380      	movs	r3, #128	; 0x80
 8001d76:	025b      	lsls	r3, r3, #9
 8001d78:	4013      	ands	r3, r2
 8001d7a:	d003      	beq.n	8001d84 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001d7c:	697a      	ldr	r2, [r7, #20]
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	4313      	orrs	r3, r2
 8001d82:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001d84:	4929      	ldr	r1, [pc, #164]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001d86:	2280      	movs	r2, #128	; 0x80
 8001d88:	697b      	ldr	r3, [r7, #20]
 8001d8a:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001d8c:	4a27      	ldr	r2, [pc, #156]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001d8e:	2384      	movs	r3, #132	; 0x84
 8001d90:	58d3      	ldr	r3, [r2, r3]
 8001d92:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	43da      	mvns	r2, r3
 8001d98:	697b      	ldr	r3, [r7, #20]
 8001d9a:	4013      	ands	r3, r2
 8001d9c:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	685a      	ldr	r2, [r3, #4]
 8001da2:	2380      	movs	r3, #128	; 0x80
 8001da4:	029b      	lsls	r3, r3, #10
 8001da6:	4013      	ands	r3, r2
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001daa:	697a      	ldr	r2, [r7, #20]
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	4313      	orrs	r3, r2
 8001db0:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001db2:	491e      	ldr	r1, [pc, #120]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001db4:	2284      	movs	r2, #132	; 0x84
 8001db6:	697b      	ldr	r3, [r7, #20]
 8001db8:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001dba:	4b1c      	ldr	r3, [pc, #112]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	43da      	mvns	r2, r3
 8001dc4:	697b      	ldr	r3, [r7, #20]
 8001dc6:	4013      	ands	r3, r2
 8001dc8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001dca:	683b      	ldr	r3, [r7, #0]
 8001dcc:	685a      	ldr	r2, [r3, #4]
 8001dce:	2380      	movs	r3, #128	; 0x80
 8001dd0:	035b      	lsls	r3, r3, #13
 8001dd2:	4013      	ands	r3, r2
 8001dd4:	d003      	beq.n	8001dde <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001dd6:	697a      	ldr	r2, [r7, #20]
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	4313      	orrs	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001dde:	4b13      	ldr	r3, [pc, #76]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001de4:	4b11      	ldr	r3, [pc, #68]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	43da      	mvns	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	4013      	ands	r3, r2
 8001df2:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001df4:	683b      	ldr	r3, [r7, #0]
 8001df6:	685a      	ldr	r2, [r3, #4]
 8001df8:	2380      	movs	r3, #128	; 0x80
 8001dfa:	039b      	lsls	r3, r3, #14
 8001dfc:	4013      	ands	r3, r2
 8001dfe:	d003      	beq.n	8001e08 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	4313      	orrs	r3, r2
 8001e06:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001e08:	4b08      	ldr	r3, [pc, #32]	; (8001e2c <HAL_GPIO_Init+0x2c4>)
 8001e0a:	697a      	ldr	r2, [r7, #20]
 8001e0c:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	3301      	adds	r3, #1
 8001e12:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681a      	ldr	r2, [r3, #0]
 8001e18:	693b      	ldr	r3, [r7, #16]
 8001e1a:	40da      	lsrs	r2, r3
 8001e1c:	1e13      	subs	r3, r2, #0
 8001e1e:	d000      	beq.n	8001e22 <HAL_GPIO_Init+0x2ba>
 8001e20:	e6aa      	b.n	8001b78 <HAL_GPIO_Init+0x10>
  }
}
 8001e22:	46c0      	nop			; (mov r8, r8)
 8001e24:	46c0      	nop			; (mov r8, r8)
 8001e26:	46bd      	mov	sp, r7
 8001e28:	b006      	add	sp, #24
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	40021800 	.word	0x40021800
 8001e30:	50000400 	.word	0x50000400
 8001e34:	50000800 	.word	0x50000800
 8001e38:	50001400 	.word	0x50001400

08001e3c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b082      	sub	sp, #8
 8001e40:	af00      	add	r7, sp, #0
 8001e42:	6078      	str	r0, [r7, #4]
 8001e44:	0008      	movs	r0, r1
 8001e46:	0011      	movs	r1, r2
 8001e48:	1cbb      	adds	r3, r7, #2
 8001e4a:	1c02      	adds	r2, r0, #0
 8001e4c:	801a      	strh	r2, [r3, #0]
 8001e4e:	1c7b      	adds	r3, r7, #1
 8001e50:	1c0a      	adds	r2, r1, #0
 8001e52:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e54:	1c7b      	adds	r3, r7, #1
 8001e56:	781b      	ldrb	r3, [r3, #0]
 8001e58:	2b00      	cmp	r3, #0
 8001e5a:	d004      	beq.n	8001e66 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001e5c:	1cbb      	adds	r3, r7, #2
 8001e5e:	881a      	ldrh	r2, [r3, #0]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001e64:	e003      	b.n	8001e6e <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001e66:	1cbb      	adds	r3, r7, #2
 8001e68:	881a      	ldrh	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001e6e:	46c0      	nop			; (mov r8, r8)
 8001e70:	46bd      	mov	sp, r7
 8001e72:	b002      	add	sp, #8
 8001e74:	bd80      	pop	{r7, pc}
	...

08001e78 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b086      	sub	sp, #24
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d101      	bne.n	8001e8a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001e86:	2301      	movs	r3, #1
 8001e88:	e1d0      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	4013      	ands	r3, r2
 8001e92:	d100      	bne.n	8001e96 <HAL_RCC_OscConfig+0x1e>
 8001e94:	e069      	b.n	8001f6a <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001e96:	4bc8      	ldr	r3, [pc, #800]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001e98:	689b      	ldr	r3, [r3, #8]
 8001e9a:	2238      	movs	r2, #56	; 0x38
 8001e9c:	4013      	ands	r3, r2
 8001e9e:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	2b08      	cmp	r3, #8
 8001ea4:	d105      	bne.n	8001eb2 <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d15d      	bne.n	8001f6a <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	e1bc      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	2380      	movs	r3, #128	; 0x80
 8001eb8:	025b      	lsls	r3, r3, #9
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d107      	bne.n	8001ece <HAL_RCC_OscConfig+0x56>
 8001ebe:	4bbe      	ldr	r3, [pc, #760]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	4bbd      	ldr	r3, [pc, #756]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001ec4:	2180      	movs	r1, #128	; 0x80
 8001ec6:	0249      	lsls	r1, r1, #9
 8001ec8:	430a      	orrs	r2, r1
 8001eca:	601a      	str	r2, [r3, #0]
 8001ecc:	e020      	b.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	685a      	ldr	r2, [r3, #4]
 8001ed2:	23a0      	movs	r3, #160	; 0xa0
 8001ed4:	02db      	lsls	r3, r3, #11
 8001ed6:	429a      	cmp	r2, r3
 8001ed8:	d10e      	bne.n	8001ef8 <HAL_RCC_OscConfig+0x80>
 8001eda:	4bb7      	ldr	r3, [pc, #732]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001edc:	681a      	ldr	r2, [r3, #0]
 8001ede:	4bb6      	ldr	r3, [pc, #728]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001ee0:	2180      	movs	r1, #128	; 0x80
 8001ee2:	02c9      	lsls	r1, r1, #11
 8001ee4:	430a      	orrs	r2, r1
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	4bb3      	ldr	r3, [pc, #716]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001eea:	681a      	ldr	r2, [r3, #0]
 8001eec:	4bb2      	ldr	r3, [pc, #712]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001eee:	2180      	movs	r1, #128	; 0x80
 8001ef0:	0249      	lsls	r1, r1, #9
 8001ef2:	430a      	orrs	r2, r1
 8001ef4:	601a      	str	r2, [r3, #0]
 8001ef6:	e00b      	b.n	8001f10 <HAL_RCC_OscConfig+0x98>
 8001ef8:	4baf      	ldr	r3, [pc, #700]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001efa:	681a      	ldr	r2, [r3, #0]
 8001efc:	4bae      	ldr	r3, [pc, #696]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001efe:	49af      	ldr	r1, [pc, #700]	; (80021bc <HAL_RCC_OscConfig+0x344>)
 8001f00:	400a      	ands	r2, r1
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	4bac      	ldr	r3, [pc, #688]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	4bab      	ldr	r3, [pc, #684]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001f0a:	49ad      	ldr	r1, [pc, #692]	; (80021c0 <HAL_RCC_OscConfig+0x348>)
 8001f0c:	400a      	ands	r2, r1
 8001f0e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d014      	beq.n	8001f42 <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f18:	f7fe ff2c 	bl	8000d74 <HAL_GetTick>
 8001f1c:	0003      	movs	r3, r0
 8001f1e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f20:	e008      	b.n	8001f34 <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f22:	f7fe ff27 	bl	8000d74 <HAL_GetTick>
 8001f26:	0002      	movs	r2, r0
 8001f28:	693b      	ldr	r3, [r7, #16]
 8001f2a:	1ad3      	subs	r3, r2, r3
 8001f2c:	2b64      	cmp	r3, #100	; 0x64
 8001f2e:	d901      	bls.n	8001f34 <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001f30:	2303      	movs	r3, #3
 8001f32:	e17b      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001f34:	4ba0      	ldr	r3, [pc, #640]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001f36:	681a      	ldr	r2, [r3, #0]
 8001f38:	2380      	movs	r3, #128	; 0x80
 8001f3a:	029b      	lsls	r3, r3, #10
 8001f3c:	4013      	ands	r3, r2
 8001f3e:	d0f0      	beq.n	8001f22 <HAL_RCC_OscConfig+0xaa>
 8001f40:	e013      	b.n	8001f6a <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f42:	f7fe ff17 	bl	8000d74 <HAL_GetTick>
 8001f46:	0003      	movs	r3, r0
 8001f48:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f4a:	e008      	b.n	8001f5e <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001f4c:	f7fe ff12 	bl	8000d74 <HAL_GetTick>
 8001f50:	0002      	movs	r2, r0
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b64      	cmp	r3, #100	; 0x64
 8001f58:	d901      	bls.n	8001f5e <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001f5a:	2303      	movs	r3, #3
 8001f5c:	e166      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001f5e:	4b96      	ldr	r3, [pc, #600]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001f60:	681a      	ldr	r2, [r3, #0]
 8001f62:	2380      	movs	r3, #128	; 0x80
 8001f64:	029b      	lsls	r3, r3, #10
 8001f66:	4013      	ands	r3, r2
 8001f68:	d1f0      	bne.n	8001f4c <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	2202      	movs	r2, #2
 8001f70:	4013      	ands	r3, r2
 8001f72:	d100      	bne.n	8001f76 <HAL_RCC_OscConfig+0xfe>
 8001f74:	e086      	b.n	8002084 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f76:	4b90      	ldr	r3, [pc, #576]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001f78:	689b      	ldr	r3, [r3, #8]
 8001f7a:	2238      	movs	r2, #56	; 0x38
 8001f7c:	4013      	ands	r3, r2
 8001f7e:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d12f      	bne.n	8001fe6 <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	68db      	ldr	r3, [r3, #12]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d101      	bne.n	8001f92 <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e14c      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f92:	4b89      	ldr	r3, [pc, #548]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	4a8b      	ldr	r2, [pc, #556]	; (80021c4 <HAL_RCC_OscConfig+0x34c>)
 8001f98:	4013      	ands	r3, r2
 8001f9a:	0019      	movs	r1, r3
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	695b      	ldr	r3, [r3, #20]
 8001fa0:	021a      	lsls	r2, r3, #8
 8001fa2:	4b85      	ldr	r3, [pc, #532]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001fa4:	430a      	orrs	r2, r1
 8001fa6:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d112      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fae:	4b82      	ldr	r3, [pc, #520]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a85      	ldr	r2, [pc, #532]	; (80021c8 <HAL_RCC_OscConfig+0x350>)
 8001fb4:	4013      	ands	r3, r2
 8001fb6:	0019      	movs	r1, r3
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	691a      	ldr	r2, [r3, #16]
 8001fbc:	4b7e      	ldr	r3, [pc, #504]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001fbe:	430a      	orrs	r2, r1
 8001fc0:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001fc2:	4b7d      	ldr	r3, [pc, #500]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	0adb      	lsrs	r3, r3, #11
 8001fc8:	2207      	movs	r2, #7
 8001fca:	4013      	ands	r3, r2
 8001fcc:	4a7f      	ldr	r2, [pc, #508]	; (80021cc <HAL_RCC_OscConfig+0x354>)
 8001fce:	40da      	lsrs	r2, r3
 8001fd0:	4b7f      	ldr	r3, [pc, #508]	; (80021d0 <HAL_RCC_OscConfig+0x358>)
 8001fd2:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001fd4:	4b7f      	ldr	r3, [pc, #508]	; (80021d4 <HAL_RCC_OscConfig+0x35c>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	0018      	movs	r0, r3
 8001fda:	f7fe fe6f 	bl	8000cbc <HAL_InitTick>
 8001fde:	1e03      	subs	r3, r0, #0
 8001fe0:	d050      	beq.n	8002084 <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	e122      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	68db      	ldr	r3, [r3, #12]
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d030      	beq.n	8002050 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001fee:	4b72      	ldr	r3, [pc, #456]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	4a75      	ldr	r2, [pc, #468]	; (80021c8 <HAL_RCC_OscConfig+0x350>)
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	0019      	movs	r1, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	691a      	ldr	r2, [r3, #16]
 8001ffc:	4b6e      	ldr	r3, [pc, #440]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8001ffe:	430a      	orrs	r2, r1
 8002000:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 8002002:	4b6d      	ldr	r3, [pc, #436]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002004:	681a      	ldr	r2, [r3, #0]
 8002006:	4b6c      	ldr	r3, [pc, #432]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002008:	2180      	movs	r1, #128	; 0x80
 800200a:	0049      	lsls	r1, r1, #1
 800200c:	430a      	orrs	r2, r1
 800200e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002010:	f7fe feb0 	bl	8000d74 <HAL_GetTick>
 8002014:	0003      	movs	r3, r0
 8002016:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002018:	e008      	b.n	800202c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 800201a:	f7fe feab 	bl	8000d74 <HAL_GetTick>
 800201e:	0002      	movs	r2, r0
 8002020:	693b      	ldr	r3, [r7, #16]
 8002022:	1ad3      	subs	r3, r2, r3
 8002024:	2b02      	cmp	r3, #2
 8002026:	d901      	bls.n	800202c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002028:	2303      	movs	r3, #3
 800202a:	e0ff      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800202c:	4b62      	ldr	r3, [pc, #392]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	2380      	movs	r3, #128	; 0x80
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4013      	ands	r3, r2
 8002036:	d0f0      	beq.n	800201a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002038:	4b5f      	ldr	r3, [pc, #380]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	4a61      	ldr	r2, [pc, #388]	; (80021c4 <HAL_RCC_OscConfig+0x34c>)
 800203e:	4013      	ands	r3, r2
 8002040:	0019      	movs	r1, r3
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	695b      	ldr	r3, [r3, #20]
 8002046:	021a      	lsls	r2, r3, #8
 8002048:	4b5b      	ldr	r3, [pc, #364]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800204a:	430a      	orrs	r2, r1
 800204c:	605a      	str	r2, [r3, #4]
 800204e:	e019      	b.n	8002084 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 8002050:	4b59      	ldr	r3, [pc, #356]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002052:	681a      	ldr	r2, [r3, #0]
 8002054:	4b58      	ldr	r3, [pc, #352]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002056:	4960      	ldr	r1, [pc, #384]	; (80021d8 <HAL_RCC_OscConfig+0x360>)
 8002058:	400a      	ands	r2, r1
 800205a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800205c:	f7fe fe8a 	bl	8000d74 <HAL_GetTick>
 8002060:	0003      	movs	r3, r0
 8002062:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002064:	e008      	b.n	8002078 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 8002066:	f7fe fe85 	bl	8000d74 <HAL_GetTick>
 800206a:	0002      	movs	r2, r0
 800206c:	693b      	ldr	r3, [r7, #16]
 800206e:	1ad3      	subs	r3, r2, r3
 8002070:	2b02      	cmp	r3, #2
 8002072:	d901      	bls.n	8002078 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 8002074:	2303      	movs	r3, #3
 8002076:	e0d9      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002078:	4b4f      	ldr	r3, [pc, #316]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800207a:	681a      	ldr	r2, [r3, #0]
 800207c:	2380      	movs	r3, #128	; 0x80
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4013      	ands	r3, r2
 8002082:	d1f0      	bne.n	8002066 <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	2208      	movs	r2, #8
 800208a:	4013      	ands	r3, r2
 800208c:	d042      	beq.n	8002114 <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 800208e:	4b4a      	ldr	r3, [pc, #296]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002090:	689b      	ldr	r3, [r3, #8]
 8002092:	2238      	movs	r2, #56	; 0x38
 8002094:	4013      	ands	r3, r2
 8002096:	2b18      	cmp	r3, #24
 8002098:	d105      	bne.n	80020a6 <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	699b      	ldr	r3, [r3, #24]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d138      	bne.n	8002114 <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 80020a2:	2301      	movs	r3, #1
 80020a4:	e0c2      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	699b      	ldr	r3, [r3, #24]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d019      	beq.n	80020e2 <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 80020ae:	4b42      	ldr	r3, [pc, #264]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 80020b0:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020b2:	4b41      	ldr	r3, [pc, #260]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 80020b4:	2101      	movs	r1, #1
 80020b6:	430a      	orrs	r2, r1
 80020b8:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ba:	f7fe fe5b 	bl	8000d74 <HAL_GetTick>
 80020be:	0003      	movs	r3, r0
 80020c0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020c2:	e008      	b.n	80020d6 <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020c4:	f7fe fe56 	bl	8000d74 <HAL_GetTick>
 80020c8:	0002      	movs	r2, r0
 80020ca:	693b      	ldr	r3, [r7, #16]
 80020cc:	1ad3      	subs	r3, r2, r3
 80020ce:	2b02      	cmp	r3, #2
 80020d0:	d901      	bls.n	80020d6 <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 80020d2:	2303      	movs	r3, #3
 80020d4:	e0aa      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80020d6:	4b38      	ldr	r3, [pc, #224]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 80020d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80020da:	2202      	movs	r2, #2
 80020dc:	4013      	ands	r3, r2
 80020de:	d0f1      	beq.n	80020c4 <HAL_RCC_OscConfig+0x24c>
 80020e0:	e018      	b.n	8002114 <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 80020e2:	4b35      	ldr	r3, [pc, #212]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 80020e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80020e6:	4b34      	ldr	r3, [pc, #208]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 80020e8:	2101      	movs	r1, #1
 80020ea:	438a      	bics	r2, r1
 80020ec:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ee:	f7fe fe41 	bl	8000d74 <HAL_GetTick>
 80020f2:	0003      	movs	r3, r0
 80020f4:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 80020f8:	f7fe fe3c 	bl	8000d74 <HAL_GetTick>
 80020fc:	0002      	movs	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e090      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800210a:	4b2b      	ldr	r3, [pc, #172]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800210c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800210e:	2202      	movs	r2, #2
 8002110:	4013      	ands	r3, r2
 8002112:	d1f1      	bne.n	80020f8 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	2204      	movs	r2, #4
 800211a:	4013      	ands	r3, r2
 800211c:	d100      	bne.n	8002120 <HAL_RCC_OscConfig+0x2a8>
 800211e:	e084      	b.n	800222a <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002120:	230f      	movs	r3, #15
 8002122:	18fb      	adds	r3, r7, r3
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002128:	4b23      	ldr	r3, [pc, #140]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800212a:	689b      	ldr	r3, [r3, #8]
 800212c:	2238      	movs	r2, #56	; 0x38
 800212e:	4013      	ands	r3, r2
 8002130:	2b20      	cmp	r3, #32
 8002132:	d106      	bne.n	8002142 <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	689b      	ldr	r3, [r3, #8]
 8002138:	2b00      	cmp	r3, #0
 800213a:	d000      	beq.n	800213e <HAL_RCC_OscConfig+0x2c6>
 800213c:	e075      	b.n	800222a <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e074      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	2b01      	cmp	r3, #1
 8002148:	d106      	bne.n	8002158 <HAL_RCC_OscConfig+0x2e0>
 800214a:	4b1b      	ldr	r3, [pc, #108]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800214c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800214e:	4b1a      	ldr	r3, [pc, #104]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002150:	2101      	movs	r1, #1
 8002152:	430a      	orrs	r2, r1
 8002154:	65da      	str	r2, [r3, #92]	; 0x5c
 8002156:	e01c      	b.n	8002192 <HAL_RCC_OscConfig+0x31a>
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	2b05      	cmp	r3, #5
 800215e:	d10c      	bne.n	800217a <HAL_RCC_OscConfig+0x302>
 8002160:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002162:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002164:	4b14      	ldr	r3, [pc, #80]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002166:	2104      	movs	r1, #4
 8002168:	430a      	orrs	r2, r1
 800216a:	65da      	str	r2, [r3, #92]	; 0x5c
 800216c:	4b12      	ldr	r3, [pc, #72]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800216e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002172:	2101      	movs	r1, #1
 8002174:	430a      	orrs	r2, r1
 8002176:	65da      	str	r2, [r3, #92]	; 0x5c
 8002178:	e00b      	b.n	8002192 <HAL_RCC_OscConfig+0x31a>
 800217a:	4b0f      	ldr	r3, [pc, #60]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800217c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800217e:	4b0e      	ldr	r3, [pc, #56]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002180:	2101      	movs	r1, #1
 8002182:	438a      	bics	r2, r1
 8002184:	65da      	str	r2, [r3, #92]	; 0x5c
 8002186:	4b0c      	ldr	r3, [pc, #48]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 8002188:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <HAL_RCC_OscConfig+0x340>)
 800218c:	2104      	movs	r1, #4
 800218e:	438a      	bics	r2, r1
 8002190:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	2b00      	cmp	r3, #0
 8002198:	d028      	beq.n	80021ec <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800219a:	f7fe fdeb 	bl	8000d74 <HAL_GetTick>
 800219e:	0003      	movs	r3, r0
 80021a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021a2:	e01d      	b.n	80021e0 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021a4:	f7fe fde6 	bl	8000d74 <HAL_GetTick>
 80021a8:	0002      	movs	r2, r0
 80021aa:	693b      	ldr	r3, [r7, #16]
 80021ac:	1ad3      	subs	r3, r2, r3
 80021ae:	4a0b      	ldr	r2, [pc, #44]	; (80021dc <HAL_RCC_OscConfig+0x364>)
 80021b0:	4293      	cmp	r3, r2
 80021b2:	d915      	bls.n	80021e0 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 80021b4:	2303      	movs	r3, #3
 80021b6:	e039      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
 80021b8:	40021000 	.word	0x40021000
 80021bc:	fffeffff 	.word	0xfffeffff
 80021c0:	fffbffff 	.word	0xfffbffff
 80021c4:	ffff80ff 	.word	0xffff80ff
 80021c8:	ffffc7ff 	.word	0xffffc7ff
 80021cc:	02dc6c00 	.word	0x02dc6c00
 80021d0:	20000008 	.word	0x20000008
 80021d4:	2000000c 	.word	0x2000000c
 80021d8:	fffffeff 	.word	0xfffffeff
 80021dc:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80021e0:	4b14      	ldr	r3, [pc, #80]	; (8002234 <HAL_RCC_OscConfig+0x3bc>)
 80021e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e4:	2202      	movs	r2, #2
 80021e6:	4013      	ands	r3, r2
 80021e8:	d0dc      	beq.n	80021a4 <HAL_RCC_OscConfig+0x32c>
 80021ea:	e013      	b.n	8002214 <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021ec:	f7fe fdc2 	bl	8000d74 <HAL_GetTick>
 80021f0:	0003      	movs	r3, r0
 80021f2:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80021f4:	e009      	b.n	800220a <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021f6:	f7fe fdbd 	bl	8000d74 <HAL_GetTick>
 80021fa:	0002      	movs	r2, r0
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	1ad3      	subs	r3, r2, r3
 8002200:	4a0d      	ldr	r2, [pc, #52]	; (8002238 <HAL_RCC_OscConfig+0x3c0>)
 8002202:	4293      	cmp	r3, r2
 8002204:	d901      	bls.n	800220a <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 8002206:	2303      	movs	r3, #3
 8002208:	e010      	b.n	800222c <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800220a:	4b0a      	ldr	r3, [pc, #40]	; (8002234 <HAL_RCC_OscConfig+0x3bc>)
 800220c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800220e:	2202      	movs	r2, #2
 8002210:	4013      	ands	r3, r2
 8002212:	d1f0      	bne.n	80021f6 <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002214:	230f      	movs	r3, #15
 8002216:	18fb      	adds	r3, r7, r3
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b01      	cmp	r3, #1
 800221c:	d105      	bne.n	800222a <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 800221e:	4b05      	ldr	r3, [pc, #20]	; (8002234 <HAL_RCC_OscConfig+0x3bc>)
 8002220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <HAL_RCC_OscConfig+0x3bc>)
 8002224:	4905      	ldr	r1, [pc, #20]	; (800223c <HAL_RCC_OscConfig+0x3c4>)
 8002226:	400a      	ands	r2, r1
 8002228:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	0018      	movs	r0, r3
 800222e:	46bd      	mov	sp, r7
 8002230:	b006      	add	sp, #24
 8002232:	bd80      	pop	{r7, pc}
 8002234:	40021000 	.word	0x40021000
 8002238:	00001388 	.word	0x00001388
 800223c:	efffffff 	.word	0xefffffff

08002240 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002240:	b580      	push	{r7, lr}
 8002242:	b084      	sub	sp, #16
 8002244:	af00      	add	r7, sp, #0
 8002246:	6078      	str	r0, [r7, #4]
 8002248:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b00      	cmp	r3, #0
 800224e:	d101      	bne.n	8002254 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e0e9      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002254:	4b76      	ldr	r3, [pc, #472]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	2207      	movs	r2, #7
 800225a:	4013      	ands	r3, r2
 800225c:	683a      	ldr	r2, [r7, #0]
 800225e:	429a      	cmp	r2, r3
 8002260:	d91e      	bls.n	80022a0 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002262:	4b73      	ldr	r3, [pc, #460]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	2207      	movs	r2, #7
 8002268:	4393      	bics	r3, r2
 800226a:	0019      	movs	r1, r3
 800226c:	4b70      	ldr	r3, [pc, #448]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 800226e:	683a      	ldr	r2, [r7, #0]
 8002270:	430a      	orrs	r2, r1
 8002272:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002274:	f7fe fd7e 	bl	8000d74 <HAL_GetTick>
 8002278:	0003      	movs	r3, r0
 800227a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800227c:	e009      	b.n	8002292 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800227e:	f7fe fd79 	bl	8000d74 <HAL_GetTick>
 8002282:	0002      	movs	r2, r0
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	1ad3      	subs	r3, r2, r3
 8002288:	4a6a      	ldr	r2, [pc, #424]	; (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 800228a:	4293      	cmp	r3, r2
 800228c:	d901      	bls.n	8002292 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 800228e:	2303      	movs	r3, #3
 8002290:	e0ca      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002292:	4b67      	ldr	r3, [pc, #412]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	2207      	movs	r2, #7
 8002298:	4013      	ands	r3, r2
 800229a:	683a      	ldr	r2, [r7, #0]
 800229c:	429a      	cmp	r2, r3
 800229e:	d1ee      	bne.n	800227e <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	2202      	movs	r2, #2
 80022a6:	4013      	ands	r3, r2
 80022a8:	d017      	beq.n	80022da <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	2204      	movs	r2, #4
 80022b0:	4013      	ands	r3, r2
 80022b2:	d008      	beq.n	80022c6 <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80022b4:	4b60      	ldr	r3, [pc, #384]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a60      	ldr	r2, [pc, #384]	; (800243c <HAL_RCC_ClockConfig+0x1fc>)
 80022ba:	401a      	ands	r2, r3
 80022bc:	4b5e      	ldr	r3, [pc, #376]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80022be:	21b0      	movs	r1, #176	; 0xb0
 80022c0:	0109      	lsls	r1, r1, #4
 80022c2:	430a      	orrs	r2, r1
 80022c4:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022c6:	4b5c      	ldr	r3, [pc, #368]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80022c8:	689b      	ldr	r3, [r3, #8]
 80022ca:	4a5d      	ldr	r2, [pc, #372]	; (8002440 <HAL_RCC_ClockConfig+0x200>)
 80022cc:	4013      	ands	r3, r2
 80022ce:	0019      	movs	r1, r3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	68da      	ldr	r2, [r3, #12]
 80022d4:	4b58      	ldr	r3, [pc, #352]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80022d6:	430a      	orrs	r2, r1
 80022d8:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	2201      	movs	r2, #1
 80022e0:	4013      	ands	r3, r2
 80022e2:	d055      	beq.n	8002390 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 80022e4:	4b54      	ldr	r3, [pc, #336]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	221c      	movs	r2, #28
 80022ea:	4393      	bics	r3, r2
 80022ec:	0019      	movs	r1, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	689a      	ldr	r2, [r3, #8]
 80022f2:	4b51      	ldr	r3, [pc, #324]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80022f4:	430a      	orrs	r2, r1
 80022f6:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	2b01      	cmp	r3, #1
 80022fe:	d107      	bne.n	8002310 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002300:	4b4d      	ldr	r3, [pc, #308]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	2380      	movs	r3, #128	; 0x80
 8002306:	029b      	lsls	r3, r3, #10
 8002308:	4013      	ands	r3, r2
 800230a:	d11f      	bne.n	800234c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800230c:	2301      	movs	r3, #1
 800230e:	e08b      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d107      	bne.n	8002328 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002318:	4b47      	ldr	r3, [pc, #284]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	2380      	movs	r3, #128	; 0x80
 800231e:	00db      	lsls	r3, r3, #3
 8002320:	4013      	ands	r3, r2
 8002322:	d113      	bne.n	800234c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002324:	2301      	movs	r3, #1
 8002326:	e07f      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	2b03      	cmp	r3, #3
 800232e:	d106      	bne.n	800233e <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 8002330:	4b41      	ldr	r3, [pc, #260]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002332:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002334:	2202      	movs	r2, #2
 8002336:	4013      	ands	r3, r2
 8002338:	d108      	bne.n	800234c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e074      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800233e:	4b3e      	ldr	r3, [pc, #248]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002340:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002342:	2202      	movs	r2, #2
 8002344:	4013      	ands	r3, r2
 8002346:	d101      	bne.n	800234c <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002348:	2301      	movs	r3, #1
 800234a:	e06d      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800234c:	4b3a      	ldr	r3, [pc, #232]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	2207      	movs	r2, #7
 8002352:	4393      	bics	r3, r2
 8002354:	0019      	movs	r1, r3
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	685a      	ldr	r2, [r3, #4]
 800235a:	4b37      	ldr	r3, [pc, #220]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 800235c:	430a      	orrs	r2, r1
 800235e:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002360:	f7fe fd08 	bl	8000d74 <HAL_GetTick>
 8002364:	0003      	movs	r3, r0
 8002366:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002368:	e009      	b.n	800237e <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 800236a:	f7fe fd03 	bl	8000d74 <HAL_GetTick>
 800236e:	0002      	movs	r2, r0
 8002370:	68fb      	ldr	r3, [r7, #12]
 8002372:	1ad3      	subs	r3, r2, r3
 8002374:	4a2f      	ldr	r2, [pc, #188]	; (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 8002376:	4293      	cmp	r3, r2
 8002378:	d901      	bls.n	800237e <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 800237a:	2303      	movs	r3, #3
 800237c:	e054      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800237e:	4b2e      	ldr	r3, [pc, #184]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2238      	movs	r2, #56	; 0x38
 8002384:	401a      	ands	r2, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	685b      	ldr	r3, [r3, #4]
 800238a:	00db      	lsls	r3, r3, #3
 800238c:	429a      	cmp	r2, r3
 800238e:	d1ec      	bne.n	800236a <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002390:	4b27      	ldr	r3, [pc, #156]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	2207      	movs	r2, #7
 8002396:	4013      	ands	r3, r2
 8002398:	683a      	ldr	r2, [r7, #0]
 800239a:	429a      	cmp	r2, r3
 800239c:	d21e      	bcs.n	80023dc <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800239e:	4b24      	ldr	r3, [pc, #144]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	2207      	movs	r2, #7
 80023a4:	4393      	bics	r3, r2
 80023a6:	0019      	movs	r1, r3
 80023a8:	4b21      	ldr	r3, [pc, #132]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	683a      	ldr	r2, [r7, #0]
 80023ac:	430a      	orrs	r2, r1
 80023ae:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fce0 	bl	8000d74 <HAL_GetTick>
 80023b4:	0003      	movs	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023b8:	e009      	b.n	80023ce <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 80023ba:	f7fe fcdb 	bl	8000d74 <HAL_GetTick>
 80023be:	0002      	movs	r2, r0
 80023c0:	68fb      	ldr	r3, [r7, #12]
 80023c2:	1ad3      	subs	r3, r2, r3
 80023c4:	4a1b      	ldr	r2, [pc, #108]	; (8002434 <HAL_RCC_ClockConfig+0x1f4>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e02c      	b.n	8002428 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023ce:	4b18      	ldr	r3, [pc, #96]	; (8002430 <HAL_RCC_ClockConfig+0x1f0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	2207      	movs	r2, #7
 80023d4:	4013      	ands	r3, r2
 80023d6:	683a      	ldr	r2, [r7, #0]
 80023d8:	429a      	cmp	r2, r3
 80023da:	d1ee      	bne.n	80023ba <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2204      	movs	r2, #4
 80023e2:	4013      	ands	r3, r2
 80023e4:	d009      	beq.n	80023fa <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80023e6:	4b14      	ldr	r3, [pc, #80]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	4a16      	ldr	r2, [pc, #88]	; (8002444 <HAL_RCC_ClockConfig+0x204>)
 80023ec:	4013      	ands	r3, r2
 80023ee:	0019      	movs	r1, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	691a      	ldr	r2, [r3, #16]
 80023f4:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 80023f6:	430a      	orrs	r2, r1
 80023f8:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80023fa:	f000 f82b 	bl	8002454 <HAL_RCC_GetSysClockFreq>
 80023fe:	0001      	movs	r1, r0
 8002400:	4b0d      	ldr	r3, [pc, #52]	; (8002438 <HAL_RCC_ClockConfig+0x1f8>)
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	0a1b      	lsrs	r3, r3, #8
 8002406:	220f      	movs	r2, #15
 8002408:	401a      	ands	r2, r3
 800240a:	4b0f      	ldr	r3, [pc, #60]	; (8002448 <HAL_RCC_ClockConfig+0x208>)
 800240c:	0092      	lsls	r2, r2, #2
 800240e:	58d3      	ldr	r3, [r2, r3]
 8002410:	221f      	movs	r2, #31
 8002412:	4013      	ands	r3, r2
 8002414:	000a      	movs	r2, r1
 8002416:	40da      	lsrs	r2, r3
 8002418:	4b0c      	ldr	r3, [pc, #48]	; (800244c <HAL_RCC_ClockConfig+0x20c>)
 800241a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800241c:	4b0c      	ldr	r3, [pc, #48]	; (8002450 <HAL_RCC_ClockConfig+0x210>)
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	0018      	movs	r0, r3
 8002422:	f7fe fc4b 	bl	8000cbc <HAL_InitTick>
 8002426:	0003      	movs	r3, r0
}
 8002428:	0018      	movs	r0, r3
 800242a:	46bd      	mov	sp, r7
 800242c:	b004      	add	sp, #16
 800242e:	bd80      	pop	{r7, pc}
 8002430:	40022000 	.word	0x40022000
 8002434:	00001388 	.word	0x00001388
 8002438:	40021000 	.word	0x40021000
 800243c:	ffff84ff 	.word	0xffff84ff
 8002440:	fffff0ff 	.word	0xfffff0ff
 8002444:	ffff8fff 	.word	0xffff8fff
 8002448:	080036fc 	.word	0x080036fc
 800244c:	20000008 	.word	0x20000008
 8002450:	2000000c 	.word	0x2000000c

08002454 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002454:	b580      	push	{r7, lr}
 8002456:	b082      	sub	sp, #8
 8002458:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800245a:	4b1c      	ldr	r3, [pc, #112]	; (80024cc <HAL_RCC_GetSysClockFreq+0x78>)
 800245c:	689b      	ldr	r3, [r3, #8]
 800245e:	2238      	movs	r2, #56	; 0x38
 8002460:	4013      	ands	r3, r2
 8002462:	d10f      	bne.n	8002484 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002464:	4b19      	ldr	r3, [pc, #100]	; (80024cc <HAL_RCC_GetSysClockFreq+0x78>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	0adb      	lsrs	r3, r3, #11
 800246a:	2207      	movs	r2, #7
 800246c:	4013      	ands	r3, r2
 800246e:	2201      	movs	r2, #1
 8002470:	409a      	lsls	r2, r3
 8002472:	0013      	movs	r3, r2
 8002474:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002476:	6839      	ldr	r1, [r7, #0]
 8002478:	4815      	ldr	r0, [pc, #84]	; (80024d0 <HAL_RCC_GetSysClockFreq+0x7c>)
 800247a:	f7fd fe45 	bl	8000108 <__udivsi3>
 800247e:	0003      	movs	r3, r0
 8002480:	607b      	str	r3, [r7, #4]
 8002482:	e01e      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002484:	4b11      	ldr	r3, [pc, #68]	; (80024cc <HAL_RCC_GetSysClockFreq+0x78>)
 8002486:	689b      	ldr	r3, [r3, #8]
 8002488:	2238      	movs	r2, #56	; 0x38
 800248a:	4013      	ands	r3, r2
 800248c:	2b08      	cmp	r3, #8
 800248e:	d102      	bne.n	8002496 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002490:	4b10      	ldr	r3, [pc, #64]	; (80024d4 <HAL_RCC_GetSysClockFreq+0x80>)
 8002492:	607b      	str	r3, [r7, #4]
 8002494:	e015      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 8002496:	4b0d      	ldr	r3, [pc, #52]	; (80024cc <HAL_RCC_GetSysClockFreq+0x78>)
 8002498:	689b      	ldr	r3, [r3, #8]
 800249a:	2238      	movs	r2, #56	; 0x38
 800249c:	4013      	ands	r3, r2
 800249e:	2b20      	cmp	r3, #32
 80024a0:	d103      	bne.n	80024aa <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 80024a2:	2380      	movs	r3, #128	; 0x80
 80024a4:	021b      	lsls	r3, r3, #8
 80024a6:	607b      	str	r3, [r7, #4]
 80024a8:	e00b      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 80024aa:	4b08      	ldr	r3, [pc, #32]	; (80024cc <HAL_RCC_GetSysClockFreq+0x78>)
 80024ac:	689b      	ldr	r3, [r3, #8]
 80024ae:	2238      	movs	r2, #56	; 0x38
 80024b0:	4013      	ands	r3, r2
 80024b2:	2b18      	cmp	r3, #24
 80024b4:	d103      	bne.n	80024be <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 80024b6:	23fa      	movs	r3, #250	; 0xfa
 80024b8:	01db      	lsls	r3, r3, #7
 80024ba:	607b      	str	r3, [r7, #4]
 80024bc:	e001      	b.n	80024c2 <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 80024be:	2300      	movs	r3, #0
 80024c0:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 80024c2:	687b      	ldr	r3, [r7, #4]
}
 80024c4:	0018      	movs	r0, r3
 80024c6:	46bd      	mov	sp, r7
 80024c8:	b002      	add	sp, #8
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000
 80024d0:	02dc6c00 	.word	0x02dc6c00
 80024d4:	007a1200 	.word	0x007a1200

080024d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	b086      	sub	sp, #24
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80024e0:	2313      	movs	r3, #19
 80024e2:	18fb      	adds	r3, r7, r3
 80024e4:	2200      	movs	r2, #0
 80024e6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80024e8:	2312      	movs	r3, #18
 80024ea:	18fb      	adds	r3, r7, r3
 80024ec:	2200      	movs	r2, #0
 80024ee:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	681a      	ldr	r2, [r3, #0]
 80024f4:	2380      	movs	r3, #128	; 0x80
 80024f6:	029b      	lsls	r3, r3, #10
 80024f8:	4013      	ands	r3, r2
 80024fa:	d100      	bne.n	80024fe <HAL_RCCEx_PeriphCLKConfig+0x26>
 80024fc:	e079      	b.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024fe:	2011      	movs	r0, #17
 8002500:	183b      	adds	r3, r7, r0
 8002502:	2200      	movs	r2, #0
 8002504:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002506:	4b64      	ldr	r3, [pc, #400]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002508:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800250a:	2380      	movs	r3, #128	; 0x80
 800250c:	055b      	lsls	r3, r3, #21
 800250e:	4013      	ands	r3, r2
 8002510:	d110      	bne.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002512:	4b61      	ldr	r3, [pc, #388]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002514:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002516:	4b60      	ldr	r3, [pc, #384]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002518:	2180      	movs	r1, #128	; 0x80
 800251a:	0549      	lsls	r1, r1, #21
 800251c:	430a      	orrs	r2, r1
 800251e:	63da      	str	r2, [r3, #60]	; 0x3c
 8002520:	4b5d      	ldr	r3, [pc, #372]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002522:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002524:	2380      	movs	r3, #128	; 0x80
 8002526:	055b      	lsls	r3, r3, #21
 8002528:	4013      	ands	r3, r2
 800252a:	60bb      	str	r3, [r7, #8]
 800252c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800252e:	183b      	adds	r3, r7, r0
 8002530:	2201      	movs	r2, #1
 8002532:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 8002534:	4b58      	ldr	r3, [pc, #352]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002536:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002538:	23c0      	movs	r3, #192	; 0xc0
 800253a:	009b      	lsls	r3, r3, #2
 800253c:	4013      	ands	r3, r2
 800253e:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	2b00      	cmp	r3, #0
 8002544:	d019      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xa2>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	699b      	ldr	r3, [r3, #24]
 800254a:	697a      	ldr	r2, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	d014      	beq.n	800257a <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 8002550:	4b51      	ldr	r3, [pc, #324]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002552:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002554:	4a51      	ldr	r2, [pc, #324]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002556:	4013      	ands	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800255a:	4b4f      	ldr	r3, [pc, #316]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800255c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800255e:	4b4e      	ldr	r3, [pc, #312]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002560:	2180      	movs	r1, #128	; 0x80
 8002562:	0249      	lsls	r1, r1, #9
 8002564:	430a      	orrs	r2, r1
 8002566:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002568:	4b4b      	ldr	r3, [pc, #300]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800256a:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800256c:	4b4a      	ldr	r3, [pc, #296]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800256e:	494c      	ldr	r1, [pc, #304]	; (80026a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002570:	400a      	ands	r2, r1
 8002572:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 8002574:	4b48      	ldr	r3, [pc, #288]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002576:	697a      	ldr	r2, [r7, #20]
 8002578:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	2201      	movs	r2, #1
 800257e:	4013      	ands	r3, r2
 8002580:	d016      	beq.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002582:	f7fe fbf7 	bl	8000d74 <HAL_GetTick>
 8002586:	0003      	movs	r3, r0
 8002588:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800258a:	e00c      	b.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800258c:	f7fe fbf2 	bl	8000d74 <HAL_GetTick>
 8002590:	0002      	movs	r2, r0
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	1ad3      	subs	r3, r2, r3
 8002596:	4a43      	ldr	r2, [pc, #268]	; (80026a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002598:	4293      	cmp	r3, r2
 800259a:	d904      	bls.n	80025a6 <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 800259c:	2313      	movs	r3, #19
 800259e:	18fb      	adds	r3, r7, r3
 80025a0:	2203      	movs	r2, #3
 80025a2:	701a      	strb	r2, [r3, #0]
          break;
 80025a4:	e004      	b.n	80025b0 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80025a6:	4b3c      	ldr	r3, [pc, #240]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025aa:	2202      	movs	r2, #2
 80025ac:	4013      	ands	r3, r2
 80025ae:	d0ed      	beq.n	800258c <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 80025b0:	2313      	movs	r3, #19
 80025b2:	18fb      	adds	r3, r7, r3
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d10a      	bne.n	80025d0 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025ba:	4b37      	ldr	r3, [pc, #220]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025be:	4a37      	ldr	r2, [pc, #220]	; (800269c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025c0:	4013      	ands	r3, r2
 80025c2:	0019      	movs	r1, r3
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	699a      	ldr	r2, [r3, #24]
 80025c8:	4b33      	ldr	r3, [pc, #204]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ca:	430a      	orrs	r2, r1
 80025cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80025ce:	e005      	b.n	80025dc <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80025d0:	2312      	movs	r3, #18
 80025d2:	18fb      	adds	r3, r7, r3
 80025d4:	2213      	movs	r2, #19
 80025d6:	18ba      	adds	r2, r7, r2
 80025d8:	7812      	ldrb	r2, [r2, #0]
 80025da:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80025dc:	2311      	movs	r3, #17
 80025de:	18fb      	adds	r3, r7, r3
 80025e0:	781b      	ldrb	r3, [r3, #0]
 80025e2:	2b01      	cmp	r3, #1
 80025e4:	d105      	bne.n	80025f2 <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025e6:	4b2c      	ldr	r3, [pc, #176]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ea:	4b2b      	ldr	r3, [pc, #172]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ec:	492e      	ldr	r1, [pc, #184]	; (80026a8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80025ee:	400a      	ands	r2, r1
 80025f0:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	2201      	movs	r2, #1
 80025f8:	4013      	ands	r3, r2
 80025fa:	d009      	beq.n	8002610 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80025fc:	4b26      	ldr	r3, [pc, #152]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025fe:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002600:	2203      	movs	r2, #3
 8002602:	4393      	bics	r3, r2
 8002604:	0019      	movs	r1, r3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	689a      	ldr	r2, [r3, #8]
 800260a:	4b23      	ldr	r3, [pc, #140]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800260c:	430a      	orrs	r2, r1
 800260e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	2240      	movs	r2, #64	; 0x40
 8002616:	4013      	ands	r3, r2
 8002618:	d009      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800261a:	4b1f      	ldr	r3, [pc, #124]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800261c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800261e:	4a23      	ldr	r2, [pc, #140]	; (80026ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002620:	4013      	ands	r3, r2
 8002622:	0019      	movs	r1, r3
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68da      	ldr	r2, [r3, #12]
 8002628:	4b1b      	ldr	r3, [pc, #108]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800262a:	430a      	orrs	r2, r1
 800262c:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681a      	ldr	r2, [r3, #0]
 8002632:	2380      	movs	r3, #128	; 0x80
 8002634:	01db      	lsls	r3, r3, #7
 8002636:	4013      	ands	r3, r2
 8002638:	d008      	beq.n	800264c <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800263a:	4b17      	ldr	r3, [pc, #92]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800263c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	0899      	lsrs	r1, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	695a      	ldr	r2, [r3, #20]
 8002646:	4b14      	ldr	r3, [pc, #80]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002648:	430a      	orrs	r2, r1
 800264a:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	2380      	movs	r3, #128	; 0x80
 8002652:	011b      	lsls	r3, r3, #4
 8002654:	4013      	ands	r3, r2
 8002656:	d009      	beq.n	800266c <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002658:	4b0f      	ldr	r3, [pc, #60]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800265a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800265c:	4a14      	ldr	r2, [pc, #80]	; (80026b0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800265e:	4013      	ands	r3, r2
 8002660:	0019      	movs	r1, r3
 8002662:	687b      	ldr	r3, [r7, #4]
 8002664:	691a      	ldr	r2, [r3, #16]
 8002666:	4b0c      	ldr	r3, [pc, #48]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002668:	430a      	orrs	r2, r1
 800266a:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	da09      	bge.n	8002688 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	22e0      	movs	r2, #224	; 0xe0
 800267a:	4393      	bics	r3, r2
 800267c:	0019      	movs	r1, r3
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4b05      	ldr	r3, [pc, #20]	; (8002698 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002684:	430a      	orrs	r2, r1
 8002686:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002688:	2312      	movs	r3, #18
 800268a:	18fb      	adds	r3, r7, r3
 800268c:	781b      	ldrb	r3, [r3, #0]
}
 800268e:	0018      	movs	r0, r3
 8002690:	46bd      	mov	sp, r7
 8002692:	b006      	add	sp, #24
 8002694:	bd80      	pop	{r7, pc}
 8002696:	46c0      	nop			; (mov r8, r8)
 8002698:	40021000 	.word	0x40021000
 800269c:	fffffcff 	.word	0xfffffcff
 80026a0:	fffeffff 	.word	0xfffeffff
 80026a4:	00001388 	.word	0x00001388
 80026a8:	efffffff 	.word	0xefffffff
 80026ac:	ffffcfff 	.word	0xffffcfff
 80026b0:	ffff3fff 	.word	0xffff3fff

080026b4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80026b4:	b5b0      	push	{r4, r5, r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
 80026ba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80026bc:	230f      	movs	r3, #15
 80026be:	18fb      	adds	r3, r7, r3
 80026c0:	2201      	movs	r2, #1
 80026c2:	701a      	strb	r2, [r3, #0]

  /* Check the RTC peripheral state */
  if (hrtc != NULL)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d100      	bne.n	80026cc <HAL_RTC_Init+0x18>
 80026ca:	e088      	b.n	80027de <HAL_RTC_Init+0x12a>
    assert_param(IS_RTC_OUTPUT_REMAP(hrtc->Init.OutPutRemap));
    assert_param(IS_RTC_OUTPUT_POL(hrtc->Init.OutPutPolarity));
    assert_param(IS_RTC_OUTPUT_TYPE(hrtc->Init.OutPutType));
    assert_param(IS_RTC_OUTPUT_PULLUP(hrtc->Init.OutPutPullUp));

    if (hrtc->State == HAL_RTC_STATE_RESET)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	2225      	movs	r2, #37	; 0x25
 80026d0:	5c9b      	ldrb	r3, [r3, r2]
 80026d2:	b2db      	uxtb	r3, r3
 80026d4:	2b00      	cmp	r3, #0
 80026d6:	d107      	bne.n	80026e8 <HAL_RTC_Init+0x34>
    {
      /* Allocate lock resource and initialize it */
      hrtc->Lock = HAL_UNLOCKED;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2224      	movs	r2, #36	; 0x24
 80026dc:	2100      	movs	r1, #0
 80026de:	5499      	strb	r1, [r3, r2]
      {
        hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
      }
#else
      /* Initialize RTC MSP */
      HAL_RTC_MspInit(hrtc);
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	0018      	movs	r0, r3
 80026e4:	f7fe f9e6 	bl	8000ab4 <HAL_RTC_MspInit>
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */
    }

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_BUSY;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2225      	movs	r2, #37	; 0x25
 80026ec:	2102      	movs	r1, #2
 80026ee:	5499      	strb	r1, [r3, r2]

    /* Check whether the calendar needs to be initialized */
    if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	68db      	ldr	r3, [r3, #12]
 80026f6:	2210      	movs	r2, #16
 80026f8:	4013      	ands	r3, r2
 80026fa:	2b10      	cmp	r3, #16
 80026fc:	d062      	beq.n	80027c4 <HAL_RTC_Init+0x110>
    {
      /* Disable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	22ca      	movs	r2, #202	; 0xca
 8002704:	625a      	str	r2, [r3, #36]	; 0x24
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2253      	movs	r2, #83	; 0x53
 800270c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Enter Initialization mode */
      status = RTC_EnterInitMode(hrtc);
 800270e:	250f      	movs	r5, #15
 8002710:	197c      	adds	r4, r7, r5
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	0018      	movs	r0, r3
 8002716:	f000 fa82 	bl	8002c1e <RTC_EnterInitMode>
 800271a:	0003      	movs	r3, r0
 800271c:	7023      	strb	r3, [r4, #0]
      if (status == HAL_OK)
 800271e:	0028      	movs	r0, r5
 8002720:	183b      	adds	r3, r7, r0
 8002722:	781b      	ldrb	r3, [r3, #0]
 8002724:	2b00      	cmp	r3, #0
 8002726:	d12c      	bne.n	8002782 <HAL_RTC_Init+0xce>
      {
        /* Clear RTC_CR FMT, OSEL and POL Bits */
        hrtc->Instance->CR &= ~(RTC_CR_FMT | RTC_CR_POL | RTC_CR_OSEL);
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	699a      	ldr	r2, [r3, #24]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	492e      	ldr	r1, [pc, #184]	; (80027ec <HAL_RTC_Init+0x138>)
 8002734:	400a      	ands	r2, r1
 8002736:	619a      	str	r2, [r3, #24]
        /* Set RTC_CR register */
        hrtc->Instance->CR |= (hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	6999      	ldr	r1, [r3, #24]
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	685a      	ldr	r2, [r3, #4]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	691b      	ldr	r3, [r3, #16]
 8002746:	431a      	orrs	r2, r3
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	699b      	ldr	r3, [r3, #24]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	430a      	orrs	r2, r1
 8002754:	619a      	str	r2, [r3, #24]

        /* Configure the RTC PRER */
        hrtc->Instance->PRER = (hrtc->Init.SynchPrediv);
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	687a      	ldr	r2, [r7, #4]
 800275c:	68d2      	ldr	r2, [r2, #12]
 800275e:	611a      	str	r2, [r3, #16]
        hrtc->Instance->PRER |= (hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	6919      	ldr	r1, [r3, #16]
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	689b      	ldr	r3, [r3, #8]
 800276a:	041a      	lsls	r2, r3, #16
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	430a      	orrs	r2, r1
 8002772:	611a      	str	r2, [r3, #16]

        /* Exit Initialization mode */
        status = RTC_ExitInitMode(hrtc);
 8002774:	183c      	adds	r4, r7, r0
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	0018      	movs	r0, r3
 800277a:	f000 fa9b 	bl	8002cb4 <RTC_ExitInitMode>
 800277e:	0003      	movs	r3, r0
 8002780:	7023      	strb	r3, [r4, #0]
      }

      if (status == HAL_OK)
 8002782:	230f      	movs	r3, #15
 8002784:	18fb      	adds	r3, r7, r3
 8002786:	781b      	ldrb	r3, [r3, #0]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d116      	bne.n	80027ba <HAL_RTC_Init+0x106>
      {
        hrtc->Instance->CR &= ~(RTC_CR_TAMPALRM_PU | RTC_CR_TAMPALRM_TYPE | RTC_CR_OUT2EN);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	699a      	ldr	r2, [r3, #24]
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	00d2      	lsls	r2, r2, #3
 8002798:	08d2      	lsrs	r2, r2, #3
 800279a:	619a      	str	r2, [r3, #24]
        hrtc->Instance->CR |= (hrtc->Init.OutPutPullUp | hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 800279c:	687b      	ldr	r3, [r7, #4]
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	6999      	ldr	r1, [r3, #24]
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6a1a      	ldr	r2, [r3, #32]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	69db      	ldr	r3, [r3, #28]
 80027aa:	431a      	orrs	r2, r3
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	431a      	orrs	r2, r3
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	430a      	orrs	r2, r1
 80027b8:	619a      	str	r2, [r3, #24]
      }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	22ff      	movs	r2, #255	; 0xff
 80027c0:	625a      	str	r2, [r3, #36]	; 0x24
 80027c2:	e003      	b.n	80027cc <HAL_RTC_Init+0x118>
    }
    else
    {
      /* The calendar is already initialized */
      status = HAL_OK;
 80027c4:	230f      	movs	r3, #15
 80027c6:	18fb      	adds	r3, r7, r3
 80027c8:	2200      	movs	r2, #0
 80027ca:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 80027cc:	230f      	movs	r3, #15
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d103      	bne.n	80027de <HAL_RTC_Init+0x12a>
    {
      hrtc->State = HAL_RTC_STATE_READY;
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2225      	movs	r2, #37	; 0x25
 80027da:	2101      	movs	r1, #1
 80027dc:	5499      	strb	r1, [r3, r2]
    }
  }

  return status;
 80027de:	230f      	movs	r3, #15
 80027e0:	18fb      	adds	r3, r7, r3
 80027e2:	781b      	ldrb	r3, [r3, #0]
}
 80027e4:	0018      	movs	r0, r3
 80027e6:	46bd      	mov	sp, r7
 80027e8:	b004      	add	sp, #16
 80027ea:	bdb0      	pop	{r4, r5, r7, pc}
 80027ec:	ff8fffbf 	.word	0xff8fffbf

080027f0 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80027f0:	b5b0      	push	{r4, r5, r7, lr}
 80027f2:	b086      	sub	sp, #24
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	60f8      	str	r0, [r7, #12]
 80027f8:	60b9      	str	r1, [r7, #8]
 80027fa:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	2224      	movs	r2, #36	; 0x24
 8002800:	5c9b      	ldrb	r3, [r3, r2]
 8002802:	2b01      	cmp	r3, #1
 8002804:	d101      	bne.n	800280a <HAL_RTC_SetTime+0x1a>
 8002806:	2302      	movs	r3, #2
 8002808:	e092      	b.n	8002930 <HAL_RTC_SetTime+0x140>
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	2224      	movs	r2, #36	; 0x24
 800280e:	2101      	movs	r1, #1
 8002810:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	2225      	movs	r2, #37	; 0x25
 8002816:	2102      	movs	r1, #2
 8002818:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800281a:	68fb      	ldr	r3, [r7, #12]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	22ca      	movs	r2, #202	; 0xca
 8002820:	625a      	str	r2, [r3, #36]	; 0x24
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2253      	movs	r2, #83	; 0x53
 8002828:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800282a:	2513      	movs	r5, #19
 800282c:	197c      	adds	r4, r7, r5
 800282e:	68fb      	ldr	r3, [r7, #12]
 8002830:	0018      	movs	r0, r3
 8002832:	f000 f9f4 	bl	8002c1e <RTC_EnterInitMode>
 8002836:	0003      	movs	r3, r0
 8002838:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 800283a:	197b      	adds	r3, r7, r5
 800283c:	781b      	ldrb	r3, [r3, #0]
 800283e:	2b00      	cmp	r3, #0
 8002840:	d162      	bne.n	8002908 <HAL_RTC_SetTime+0x118>
  {
    if (Format == RTC_FORMAT_BIN)
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	2b00      	cmp	r3, #0
 8002846:	d125      	bne.n	8002894 <HAL_RTC_SetTime+0xa4>
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002848:	68fb      	ldr	r3, [r7, #12]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	699b      	ldr	r3, [r3, #24]
 800284e:	2240      	movs	r2, #64	; 0x40
 8002850:	4013      	ands	r3, r2
 8002852:	d102      	bne.n	800285a <HAL_RTC_SetTime+0x6a>
        assert_param(IS_RTC_HOUR12(sTime->Hours));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	2200      	movs	r2, #0
 8002858:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(sTime->Hours));
      }
      assert_param(IS_RTC_MINUTES(sTime->Minutes));
      assert_param(IS_RTC_SECONDS(sTime->Seconds));

      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800285a:	68bb      	ldr	r3, [r7, #8]
 800285c:	781b      	ldrb	r3, [r3, #0]
 800285e:	0018      	movs	r0, r3
 8002860:	f000 fa6c 	bl	8002d3c <RTC_ByteToBcd2>
 8002864:	0003      	movs	r3, r0
 8002866:	041c      	lsls	r4, r3, #16
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002868:	68bb      	ldr	r3, [r7, #8]
 800286a:	785b      	ldrb	r3, [r3, #1]
 800286c:	0018      	movs	r0, r3
 800286e:	f000 fa65 	bl	8002d3c <RTC_ByteToBcd2>
 8002872:	0003      	movs	r3, r0
 8002874:	021b      	lsls	r3, r3, #8
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 8002876:	431c      	orrs	r4, r3
                          ((uint32_t)RTC_ByteToBcd2(sTime->Seconds) << RTC_TR_SU_Pos) | \
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	789b      	ldrb	r3, [r3, #2]
 800287c:	0018      	movs	r0, r3
 800287e:	f000 fa5d 	bl	8002d3c <RTC_ByteToBcd2>
 8002882:	0003      	movs	r3, r0
                          ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8002884:	0022      	movs	r2, r4
 8002886:	431a      	orrs	r2, r3
                          (((uint32_t)sTime->TimeFormat) << RTC_TR_PM_Pos));
 8002888:	68bb      	ldr	r3, [r7, #8]
 800288a:	78db      	ldrb	r3, [r3, #3]
 800288c:	059b      	lsls	r3, r3, #22
      tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << RTC_TR_HU_Pos) | \
 800288e:	4313      	orrs	r3, r2
 8002890:	617b      	str	r3, [r7, #20]
 8002892:	e017      	b.n	80028c4 <HAL_RTC_SetTime+0xd4>
    }
    else
    {
      if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	699b      	ldr	r3, [r3, #24]
 800289a:	2240      	movs	r2, #64	; 0x40
 800289c:	4013      	ands	r3, r2
 800289e:	d102      	bne.n	80028a6 <HAL_RTC_SetTime+0xb6>
        assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
        assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
      }
      else
      {
        sTime->TimeFormat = 0x00U;
 80028a0:	68bb      	ldr	r3, [r7, #8]
 80028a2:	2200      	movs	r2, #0
 80028a4:	70da      	strb	r2, [r3, #3]
        assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
      }
      assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
      assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028a6:	68bb      	ldr	r3, [r7, #8]
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	041a      	lsls	r2, r3, #16
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028ac:	68bb      	ldr	r3, [r7, #8]
 80028ae:	785b      	ldrb	r3, [r3, #1]
 80028b0:	021b      	lsls	r3, r3, #8
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028b2:	4313      	orrs	r3, r2
                ((uint32_t)(sTime->Seconds) << RTC_TR_SU_Pos) | \
 80028b4:	68ba      	ldr	r2, [r7, #8]
 80028b6:	7892      	ldrb	r2, [r2, #2]
                ((uint32_t)(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80028b8:	431a      	orrs	r2, r3
                ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80028ba:	68bb      	ldr	r3, [r7, #8]
 80028bc:	78db      	ldrb	r3, [r3, #3]
 80028be:	059b      	lsls	r3, r3, #22
      tmpreg = (((uint32_t)(sTime->Hours) << RTC_TR_HU_Pos) | \
 80028c0:	4313      	orrs	r3, r2
 80028c2:	617b      	str	r3, [r7, #20]
    }

    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	697a      	ldr	r2, [r7, #20]
 80028ca:	491b      	ldr	r1, [pc, #108]	; (8002938 <HAL_RTC_SetTime+0x148>)
 80028cc:	400a      	ands	r2, r1
 80028ce:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	699a      	ldr	r2, [r3, #24]
 80028d6:	68fb      	ldr	r3, [r7, #12]
 80028d8:	681b      	ldr	r3, [r3, #0]
 80028da:	4918      	ldr	r1, [pc, #96]	; (800293c <HAL_RTC_SetTime+0x14c>)
 80028dc:	400a      	ands	r2, r1
 80028de:	619a      	str	r2, [r3, #24]

    /* Configure the RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	6999      	ldr	r1, [r3, #24]
 80028e6:	68bb      	ldr	r3, [r7, #8]
 80028e8:	68da      	ldr	r2, [r3, #12]
 80028ea:	68bb      	ldr	r3, [r7, #8]
 80028ec:	691b      	ldr	r3, [r3, #16]
 80028ee:	431a      	orrs	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	430a      	orrs	r2, r1
 80028f6:	619a      	str	r2, [r3, #24]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80028f8:	2313      	movs	r3, #19
 80028fa:	18fc      	adds	r4, r7, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	0018      	movs	r0, r3
 8002900:	f000 f9d8 	bl	8002cb4 <RTC_ExitInitMode>
 8002904:	0003      	movs	r3, r0
 8002906:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002908:	68fb      	ldr	r3, [r7, #12]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	22ff      	movs	r2, #255	; 0xff
 800290e:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002910:	2313      	movs	r3, #19
 8002912:	18fb      	adds	r3, r7, r3
 8002914:	781b      	ldrb	r3, [r3, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	d103      	bne.n	8002922 <HAL_RTC_SetTime+0x132>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	2225      	movs	r2, #37	; 0x25
 800291e:	2101      	movs	r1, #1
 8002920:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	2224      	movs	r2, #36	; 0x24
 8002926:	2100      	movs	r1, #0
 8002928:	5499      	strb	r1, [r3, r2]

  return status;
 800292a:	2313      	movs	r3, #19
 800292c:	18fb      	adds	r3, r7, r3
 800292e:	781b      	ldrb	r3, [r3, #0]
}
 8002930:	0018      	movs	r0, r3
 8002932:	46bd      	mov	sp, r7
 8002934:	b006      	add	sp, #24
 8002936:	bdb0      	pop	{r4, r5, r7, pc}
 8002938:	007f7f7f 	.word	0x007f7f7f
 800293c:	fffbffff 	.word	0xfffbffff

08002940 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002940:	b580      	push	{r7, lr}
 8002942:	b086      	sub	sp, #24
 8002944:	af00      	add	r7, sp, #0
 8002946:	60f8      	str	r0, [r7, #12]
 8002948:	60b9      	str	r1, [r7, #8]
 800294a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds structure field from the corresponding register*/
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	689a      	ldr	r2, [r3, #8]
 8002952:	68bb      	ldr	r3, [r7, #8]
 8002954:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8002956:	68fb      	ldr	r3, [r7, #12]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	691b      	ldr	r3, [r3, #16]
 800295c:	045b      	lsls	r3, r3, #17
 800295e:	0c5a      	lsrs	r2, r3, #17
 8002960:	68bb      	ldr	r3, [r7, #8]
 8002962:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	4a22      	ldr	r2, [pc, #136]	; (80029f4 <HAL_RTC_GetTime+0xb4>)
 800296c:	4013      	ands	r3, r2
 800296e:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours = (uint8_t)((tmpreg & (RTC_TR_HT | RTC_TR_HU)) >> RTC_TR_HU_Pos);
 8002970:	697b      	ldr	r3, [r7, #20]
 8002972:	0c1b      	lsrs	r3, r3, #16
 8002974:	b2db      	uxtb	r3, r3
 8002976:	223f      	movs	r2, #63	; 0x3f
 8002978:	4013      	ands	r3, r2
 800297a:	b2da      	uxtb	r2, r3
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	701a      	strb	r2, [r3, #0]
  sTime->Minutes = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8002980:	697b      	ldr	r3, [r7, #20]
 8002982:	0a1b      	lsrs	r3, r3, #8
 8002984:	b2db      	uxtb	r3, r3
 8002986:	227f      	movs	r2, #127	; 0x7f
 8002988:	4013      	ands	r3, r2
 800298a:	b2da      	uxtb	r2, r3
 800298c:	68bb      	ldr	r3, [r7, #8]
 800298e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds = (uint8_t)((tmpreg & (RTC_TR_ST | RTC_TR_SU)) >> RTC_TR_SU_Pos);
 8002990:	697b      	ldr	r3, [r7, #20]
 8002992:	b2db      	uxtb	r3, r3
 8002994:	227f      	movs	r2, #127	; 0x7f
 8002996:	4013      	ands	r3, r2
 8002998:	b2da      	uxtb	r2, r3
 800299a:	68bb      	ldr	r3, [r7, #8]
 800299c:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM)) >> RTC_TR_PM_Pos);
 800299e:	697b      	ldr	r3, [r7, #20]
 80029a0:	0d9b      	lsrs	r3, r3, #22
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	2201      	movs	r2, #1
 80029a6:	4013      	ands	r3, r2
 80029a8:	b2da      	uxtb	r2, r3
 80029aa:	68bb      	ldr	r3, [r7, #8]
 80029ac:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d11a      	bne.n	80029ea <HAL_RTC_GetTime+0xaa>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80029b4:	68bb      	ldr	r3, [r7, #8]
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	0018      	movs	r0, r3
 80029ba:	f000 f9e7 	bl	8002d8c <RTC_Bcd2ToByte>
 80029be:	0003      	movs	r3, r0
 80029c0:	001a      	movs	r2, r3
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	785b      	ldrb	r3, [r3, #1]
 80029ca:	0018      	movs	r0, r3
 80029cc:	f000 f9de 	bl	8002d8c <RTC_Bcd2ToByte>
 80029d0:	0003      	movs	r3, r0
 80029d2:	001a      	movs	r2, r3
 80029d4:	68bb      	ldr	r3, [r7, #8]
 80029d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80029d8:	68bb      	ldr	r3, [r7, #8]
 80029da:	789b      	ldrb	r3, [r3, #2]
 80029dc:	0018      	movs	r0, r3
 80029de:	f000 f9d5 	bl	8002d8c <RTC_Bcd2ToByte>
 80029e2:	0003      	movs	r3, r0
 80029e4:	001a      	movs	r2, r3
 80029e6:	68bb      	ldr	r3, [r7, #8]
 80029e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
}
 80029ec:	0018      	movs	r0, r3
 80029ee:	46bd      	mov	sp, r7
 80029f0:	b006      	add	sp, #24
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	007f7f7f 	.word	0x007f7f7f

080029f8 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80029f8:	b5b0      	push	{r4, r5, r7, lr}
 80029fa:	b086      	sub	sp, #24
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	60f8      	str	r0, [r7, #12]
 8002a00:	60b9      	str	r1, [r7, #8]
 8002a02:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	2224      	movs	r2, #36	; 0x24
 8002a08:	5c9b      	ldrb	r3, [r3, r2]
 8002a0a:	2b01      	cmp	r3, #1
 8002a0c:	d101      	bne.n	8002a12 <HAL_RTC_SetDate+0x1a>
 8002a0e:	2302      	movs	r3, #2
 8002a10:	e07e      	b.n	8002b10 <HAL_RTC_SetDate+0x118>
 8002a12:	68fb      	ldr	r3, [r7, #12]
 8002a14:	2224      	movs	r2, #36	; 0x24
 8002a16:	2101      	movs	r1, #1
 8002a18:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2225      	movs	r2, #37	; 0x25
 8002a1e:	2102      	movs	r1, #2
 8002a20:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d10e      	bne.n	8002a46 <HAL_RTC_SetDate+0x4e>
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	785b      	ldrb	r3, [r3, #1]
 8002a2c:	001a      	movs	r2, r3
 8002a2e:	2310      	movs	r3, #16
 8002a30:	4013      	ands	r3, r2
 8002a32:	d008      	beq.n	8002a46 <HAL_RTC_SetDate+0x4e>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	785b      	ldrb	r3, [r3, #1]
 8002a38:	2210      	movs	r2, #16
 8002a3a:	4393      	bics	r3, r2
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	330a      	adds	r3, #10
 8002a40:	b2da      	uxtb	r2, r3
 8002a42:	68bb      	ldr	r3, [r7, #8]
 8002a44:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d11c      	bne.n	8002a86 <HAL_RTC_SetDate+0x8e>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a4c:	68bb      	ldr	r3, [r7, #8]
 8002a4e:	78db      	ldrb	r3, [r3, #3]
 8002a50:	0018      	movs	r0, r3
 8002a52:	f000 f973 	bl	8002d3c <RTC_ByteToBcd2>
 8002a56:	0003      	movs	r3, r0
 8002a58:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a5a:	68bb      	ldr	r3, [r7, #8]
 8002a5c:	785b      	ldrb	r3, [r3, #1]
 8002a5e:	0018      	movs	r0, r3
 8002a60:	f000 f96c 	bl	8002d3c <RTC_ByteToBcd2>
 8002a64:	0003      	movs	r3, r0
 8002a66:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a68:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)  << RTC_DR_DU_Pos) | \
 8002a6a:	68bb      	ldr	r3, [r7, #8]
 8002a6c:	789b      	ldrb	r3, [r3, #2]
 8002a6e:	0018      	movs	r0, r3
 8002a70:	f000 f964 	bl	8002d3c <RTC_ByteToBcd2>
 8002a74:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002a76:	0022      	movs	r2, r4
 8002a78:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay << RTC_DR_WDU_Pos));
 8002a7a:	68bb      	ldr	r3, [r7, #8]
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002a80:	4313      	orrs	r3, r2
 8002a82:	617b      	str	r3, [r7, #20]
 8002a84:	e00e      	b.n	8002aa4 <HAL_RTC_SetDate+0xac>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a86:	68bb      	ldr	r3, [r7, #8]
 8002a88:	78db      	ldrb	r3, [r3, #3]
 8002a8a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	785b      	ldrb	r3, [r3, #1]
 8002a90:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002a92:	4313      	orrs	r3, r2
                  (((uint32_t)sDate->Date) << RTC_DR_DU_Pos) | \
 8002a94:	68ba      	ldr	r2, [r7, #8]
 8002a96:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << RTC_DR_MU_Pos) | \
 8002a98:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	781b      	ldrb	r3, [r3, #0]
 8002a9e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << RTC_DR_YU_Pos) | \
 8002aa0:	4313      	orrs	r3, r2
 8002aa2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	22ca      	movs	r2, #202	; 0xca
 8002aaa:	625a      	str	r2, [r3, #36]	; 0x24
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	2253      	movs	r2, #83	; 0x53
 8002ab2:	625a      	str	r2, [r3, #36]	; 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8002ab4:	2513      	movs	r5, #19
 8002ab6:	197c      	adds	r4, r7, r5
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	0018      	movs	r0, r3
 8002abc:	f000 f8af 	bl	8002c1e <RTC_EnterInitMode>
 8002ac0:	0003      	movs	r3, r0
 8002ac2:	7023      	strb	r3, [r4, #0]
  if (status == HAL_OK)
 8002ac4:	0028      	movs	r0, r5
 8002ac6:	183b      	adds	r3, r7, r0
 8002ac8:	781b      	ldrb	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d10c      	bne.n	8002ae8 <HAL_RTC_SetDate+0xf0>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	697a      	ldr	r2, [r7, #20]
 8002ad4:	4910      	ldr	r1, [pc, #64]	; (8002b18 <HAL_RTC_SetDate+0x120>)
 8002ad6:	400a      	ands	r2, r1
 8002ad8:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002ada:	183c      	adds	r4, r7, r0
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	0018      	movs	r0, r3
 8002ae0:	f000 f8e8 	bl	8002cb4 <RTC_ExitInitMode>
 8002ae4:	0003      	movs	r3, r0
 8002ae6:	7023      	strb	r3, [r4, #0]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	22ff      	movs	r2, #255	; 0xff
 8002aee:	625a      	str	r2, [r3, #36]	; 0x24

  if (status == HAL_OK)
 8002af0:	2313      	movs	r3, #19
 8002af2:	18fb      	adds	r3, r7, r3
 8002af4:	781b      	ldrb	r3, [r3, #0]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d103      	bne.n	8002b02 <HAL_RTC_SetDate+0x10a>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	2225      	movs	r2, #37	; 0x25
 8002afe:	2101      	movs	r1, #1
 8002b00:	5499      	strb	r1, [r3, r2]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002b02:	68fb      	ldr	r3, [r7, #12]
 8002b04:	2224      	movs	r2, #36	; 0x24
 8002b06:	2100      	movs	r1, #0
 8002b08:	5499      	strb	r1, [r3, r2]

  return status;
 8002b0a:	2313      	movs	r3, #19
 8002b0c:	18fb      	adds	r3, r7, r3
 8002b0e:	781b      	ldrb	r3, [r3, #0]
}
 8002b10:	0018      	movs	r0, r3
 8002b12:	46bd      	mov	sp, r7
 8002b14:	b006      	add	sp, #24
 8002b16:	bdb0      	pop	{r4, r5, r7, pc}
 8002b18:	00ffff3f 	.word	0x00ffff3f

08002b1c <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002b1c:	b580      	push	{r7, lr}
 8002b1e:	b086      	sub	sp, #24
 8002b20:	af00      	add	r7, sp, #0
 8002b22:	60f8      	str	r0, [r7, #12]
 8002b24:	60b9      	str	r1, [r7, #8]
 8002b26:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	685b      	ldr	r3, [r3, #4]
 8002b2e:	4a21      	ldr	r2, [pc, #132]	; (8002bb4 <HAL_RTC_GetDate+0x98>)
 8002b30:	4013      	ands	r3, r2
 8002b32:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	0c1b      	lsrs	r3, r3, #16
 8002b38:	b2da      	uxtb	r2, r3
 8002b3a:	68bb      	ldr	r3, [r7, #8]
 8002b3c:	70da      	strb	r2, [r3, #3]
  sDate->Month = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002b3e:	697b      	ldr	r3, [r7, #20]
 8002b40:	0a1b      	lsrs	r3, r3, #8
 8002b42:	b2db      	uxtb	r3, r3
 8002b44:	221f      	movs	r2, #31
 8002b46:	4013      	ands	r3, r2
 8002b48:	b2da      	uxtb	r2, r3
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	705a      	strb	r2, [r3, #1]
  sDate->Date = (uint8_t)((datetmpreg & (RTC_DR_DT | RTC_DR_DU)) >> RTC_DR_DU_Pos);
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	223f      	movs	r2, #63	; 0x3f
 8002b54:	4013      	ands	r3, r2
 8002b56:	b2da      	uxtb	r2, r3
 8002b58:	68bb      	ldr	r3, [r7, #8]
 8002b5a:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU)) >> RTC_DR_WDU_Pos);
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	0b5b      	lsrs	r3, r3, #13
 8002b60:	b2db      	uxtb	r3, r3
 8002b62:	2207      	movs	r2, #7
 8002b64:	4013      	ands	r3, r2
 8002b66:	b2da      	uxtb	r2, r3
 8002b68:	68bb      	ldr	r3, [r7, #8]
 8002b6a:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d11a      	bne.n	8002ba8 <HAL_RTC_GetDate+0x8c>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8002b72:	68bb      	ldr	r3, [r7, #8]
 8002b74:	78db      	ldrb	r3, [r3, #3]
 8002b76:	0018      	movs	r0, r3
 8002b78:	f000 f908 	bl	8002d8c <RTC_Bcd2ToByte>
 8002b7c:	0003      	movs	r3, r0
 8002b7e:	001a      	movs	r2, r3
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8002b84:	68bb      	ldr	r3, [r7, #8]
 8002b86:	785b      	ldrb	r3, [r3, #1]
 8002b88:	0018      	movs	r0, r3
 8002b8a:	f000 f8ff 	bl	8002d8c <RTC_Bcd2ToByte>
 8002b8e:	0003      	movs	r3, r0
 8002b90:	001a      	movs	r2, r3
 8002b92:	68bb      	ldr	r3, [r7, #8]
 8002b94:	705a      	strb	r2, [r3, #1]
    sDate->Date = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	789b      	ldrb	r3, [r3, #2]
 8002b9a:	0018      	movs	r0, r3
 8002b9c:	f000 f8f6 	bl	8002d8c <RTC_Bcd2ToByte>
 8002ba0:	0003      	movs	r3, r0
 8002ba2:	001a      	movs	r2, r3
 8002ba4:	68bb      	ldr	r3, [r7, #8]
 8002ba6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	0018      	movs	r0, r3
 8002bac:	46bd      	mov	sp, r7
 8002bae:	b006      	add	sp, #24
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	46c0      	nop			; (mov r8, r8)
 8002bb4:	00ffff3f 	.word	0x00ffff3f

08002bb8 <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	b084      	sub	sp, #16
 8002bbc:	af00      	add	r7, sp, #0
 8002bbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Clear RSF flag */
  hrtc->Instance->ICSR &= (uint32_t)RTC_RSF_MASK;
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	68da      	ldr	r2, [r3, #12]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	21a0      	movs	r1, #160	; 0xa0
 8002bcc:	438a      	bics	r2, r1
 8002bce:	60da      	str	r2, [r3, #12]

  tickstart = HAL_GetTick();
 8002bd0:	f7fe f8d0 	bl	8000d74 <HAL_GetTick>
 8002bd4:	0003      	movs	r3, r0
 8002bd6:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002bd8:	e014      	b.n	8002c04 <HAL_RTC_WaitForSynchro+0x4c>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8002bda:	f7fe f8cb 	bl	8000d74 <HAL_GetTick>
 8002bde:	0002      	movs	r2, r0
 8002be0:	68fb      	ldr	r3, [r7, #12]
 8002be2:	1ad2      	subs	r2, r2, r3
 8002be4:	23fa      	movs	r3, #250	; 0xfa
 8002be6:	009b      	lsls	r3, r3, #2
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d90b      	bls.n	8002c04 <HAL_RTC_WaitForSynchro+0x4c>
    {
      /* New check to avoid false timeout detection in case of preemption */
      if ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	68db      	ldr	r3, [r3, #12]
 8002bf2:	2220      	movs	r2, #32
 8002bf4:	4013      	ands	r3, r2
 8002bf6:	d10c      	bne.n	8002c12 <HAL_RTC_WaitForSynchro+0x5a>
      {
        /* Change RTC state */
        hrtc->State = HAL_RTC_STATE_TIMEOUT;  
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	2225      	movs	r2, #37	; 0x25
 8002bfc:	2103      	movs	r1, #3
 8002bfe:	5499      	strb	r1, [r3, r2]
        return HAL_TIMEOUT;
 8002c00:	2303      	movs	r3, #3
 8002c02:	e008      	b.n	8002c16 <HAL_RTC_WaitForSynchro+0x5e>
  while ((hrtc->Instance->ICSR & RTC_ICSR_RSF) == 0U)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	68db      	ldr	r3, [r3, #12]
 8002c0a:	2220      	movs	r2, #32
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	d0e4      	beq.n	8002bda <HAL_RTC_WaitForSynchro+0x22>
 8002c10:	e000      	b.n	8002c14 <HAL_RTC_WaitForSynchro+0x5c>
      }
      else
      {
        break;
 8002c12:	46c0      	nop			; (mov r8, r8)
      }
    }
  }

  return HAL_OK;
 8002c14:	2300      	movs	r3, #0
}
 8002c16:	0018      	movs	r0, r3
 8002c18:	46bd      	mov	sp, r7
 8002c1a:	b004      	add	sp, #16
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b084      	sub	sp, #16
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002c26:	230f      	movs	r3, #15
 8002c28:	18fb      	adds	r3, r7, r3
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	701a      	strb	r2, [r3, #0]

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	2240      	movs	r2, #64	; 0x40
 8002c36:	4013      	ands	r3, r2
 8002c38:	d134      	bne.n	8002ca4 <RTC_EnterInitMode+0x86>
  {
    /* Set the Initialization mode */
    SET_BIT(hrtc->Instance->ICSR, RTC_ICSR_INIT);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	68da      	ldr	r2, [r3, #12]
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	2180      	movs	r1, #128	; 0x80
 8002c46:	430a      	orrs	r2, r1
 8002c48:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8002c4a:	f7fe f893 	bl	8000d74 <HAL_GetTick>
 8002c4e:	0003      	movs	r3, r0
 8002c50:	60bb      	str	r3, [r7, #8]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c52:	e01a      	b.n	8002c8a <RTC_EnterInitMode+0x6c>
    {
      if ((HAL_GetTick()  - tickstart) > RTC_TIMEOUT_VALUE)
 8002c54:	f7fe f88e 	bl	8000d74 <HAL_GetTick>
 8002c58:	0002      	movs	r2, r0
 8002c5a:	68bb      	ldr	r3, [r7, #8]
 8002c5c:	1ad2      	subs	r2, r2, r3
 8002c5e:	200f      	movs	r0, #15
 8002c60:	183b      	adds	r3, r7, r0
 8002c62:	1839      	adds	r1, r7, r0
 8002c64:	7809      	ldrb	r1, [r1, #0]
 8002c66:	7019      	strb	r1, [r3, #0]
 8002c68:	23fa      	movs	r3, #250	; 0xfa
 8002c6a:	009b      	lsls	r3, r3, #2
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d90c      	bls.n	8002c8a <RTC_EnterInitMode+0x6c>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2240      	movs	r2, #64	; 0x40
 8002c78:	4013      	ands	r3, r2
 8002c7a:	d112      	bne.n	8002ca2 <RTC_EnterInitMode+0x84>
        {
          status = HAL_TIMEOUT;
 8002c7c:	183b      	adds	r3, r7, r0
 8002c7e:	2203      	movs	r2, #3
 8002c80:	701a      	strb	r2, [r3, #0]

          /* Change RTC state */
          hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	2225      	movs	r2, #37	; 0x25
 8002c86:	2103      	movs	r1, #3
 8002c88:	5499      	strb	r1, [r3, r2]
    while (((hrtc->Instance->ICSR & RTC_ICSR_INITF) == 0U) && (status != HAL_TIMEOUT))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	2240      	movs	r2, #64	; 0x40
 8002c92:	4013      	ands	r3, r2
 8002c94:	d106      	bne.n	8002ca4 <RTC_EnterInitMode+0x86>
 8002c96:	230f      	movs	r3, #15
 8002c98:	18fb      	adds	r3, r7, r3
 8002c9a:	781b      	ldrb	r3, [r3, #0]
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d1d9      	bne.n	8002c54 <RTC_EnterInitMode+0x36>
 8002ca0:	e000      	b.n	8002ca4 <RTC_EnterInitMode+0x86>
        }
        else
        {
          break;
 8002ca2:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }

  return status;
 8002ca4:	230f      	movs	r3, #15
 8002ca6:	18fb      	adds	r3, r7, r3
 8002ca8:	781b      	ldrb	r3, [r3, #0]
}
 8002caa:	0018      	movs	r0, r3
 8002cac:	46bd      	mov	sp, r7
 8002cae:	b004      	add	sp, #16
 8002cb0:	bd80      	pop	{r7, pc}
	...

08002cb4 <RTC_ExitInitMode>:
  * @brief  Exit the RTC Initialization mode.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002cb4:	b590      	push	{r4, r7, lr}
 8002cb6:	b085      	sub	sp, #20
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cbc:	240f      	movs	r4, #15
 8002cbe:	193b      	adds	r3, r7, r4
 8002cc0:	2200      	movs	r2, #0
 8002cc2:	701a      	strb	r2, [r3, #0]

  /* Exit Initialization mode */
  CLEAR_BIT(RTC->ICSR, RTC_ICSR_INIT);
 8002cc4:	4b1c      	ldr	r3, [pc, #112]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002cc6:	68da      	ldr	r2, [r3, #12]
 8002cc8:	4b1b      	ldr	r3, [pc, #108]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002cca:	2180      	movs	r1, #128	; 0x80
 8002ccc:	438a      	bics	r2, r1
 8002cce:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(RTC->CR, RTC_CR_BYPSHAD) == 0U)
 8002cd0:	4b19      	ldr	r3, [pc, #100]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002cd2:	699b      	ldr	r3, [r3, #24]
 8002cd4:	2220      	movs	r2, #32
 8002cd6:	4013      	ands	r3, r2
 8002cd8:	d10d      	bne.n	8002cf6 <RTC_ExitInitMode+0x42>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	0018      	movs	r0, r3
 8002cde:	f7ff ff6b 	bl	8002bb8 <HAL_RTC_WaitForSynchro>
 8002ce2:	1e03      	subs	r3, r0, #0
 8002ce4:	d021      	beq.n	8002d2a <RTC_ExitInitMode+0x76>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	2225      	movs	r2, #37	; 0x25
 8002cea:	2103      	movs	r1, #3
 8002cec:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002cee:	193b      	adds	r3, r7, r4
 8002cf0:	2203      	movs	r2, #3
 8002cf2:	701a      	strb	r2, [r3, #0]
 8002cf4:	e019      	b.n	8002d2a <RTC_ExitInitMode+0x76>
    }
  }
  else
  {
    /* Clear BYPSHAD bit */
    CLEAR_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002cf6:	4b10      	ldr	r3, [pc, #64]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002cf8:	699a      	ldr	r2, [r3, #24]
 8002cfa:	4b0f      	ldr	r3, [pc, #60]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002cfc:	2120      	movs	r1, #32
 8002cfe:	438a      	bics	r2, r1
 8002d00:	619a      	str	r2, [r3, #24]
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	0018      	movs	r0, r3
 8002d06:	f7ff ff57 	bl	8002bb8 <HAL_RTC_WaitForSynchro>
 8002d0a:	1e03      	subs	r3, r0, #0
 8002d0c:	d007      	beq.n	8002d1e <RTC_ExitInitMode+0x6a>
    {
      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	2225      	movs	r2, #37	; 0x25
 8002d12:	2103      	movs	r1, #3
 8002d14:	5499      	strb	r1, [r3, r2]
      status = HAL_TIMEOUT;
 8002d16:	230f      	movs	r3, #15
 8002d18:	18fb      	adds	r3, r7, r3
 8002d1a:	2203      	movs	r2, #3
 8002d1c:	701a      	strb	r2, [r3, #0]
    }
    /* Restore BYPSHAD bit */
    SET_BIT(RTC->CR, RTC_CR_BYPSHAD);
 8002d1e:	4b06      	ldr	r3, [pc, #24]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002d20:	699a      	ldr	r2, [r3, #24]
 8002d22:	4b05      	ldr	r3, [pc, #20]	; (8002d38 <RTC_ExitInitMode+0x84>)
 8002d24:	2120      	movs	r1, #32
 8002d26:	430a      	orrs	r2, r1
 8002d28:	619a      	str	r2, [r3, #24]
  }

  return status;
 8002d2a:	230f      	movs	r3, #15
 8002d2c:	18fb      	adds	r3, r7, r3
 8002d2e:	781b      	ldrb	r3, [r3, #0]
}
 8002d30:	0018      	movs	r0, r3
 8002d32:	46bd      	mov	sp, r7
 8002d34:	b005      	add	sp, #20
 8002d36:	bd90      	pop	{r4, r7, pc}
 8002d38:	40002800 	.word	0x40002800

08002d3c <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8002d3c:	b580      	push	{r7, lr}
 8002d3e:	b084      	sub	sp, #16
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	0002      	movs	r2, r0
 8002d44:	1dfb      	adds	r3, r7, #7
 8002d46:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8002d48:	2300      	movs	r3, #0
 8002d4a:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8002d4c:	230b      	movs	r3, #11
 8002d4e:	18fb      	adds	r3, r7, r3
 8002d50:	1dfa      	adds	r2, r7, #7
 8002d52:	7812      	ldrb	r2, [r2, #0]
 8002d54:	701a      	strb	r2, [r3, #0]

  while (Param >= 10U)
 8002d56:	e008      	b.n	8002d6a <RTC_ByteToBcd2+0x2e>
  {
    bcdhigh++;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	3301      	adds	r3, #1
 8002d5c:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8002d5e:	220b      	movs	r2, #11
 8002d60:	18bb      	adds	r3, r7, r2
 8002d62:	18ba      	adds	r2, r7, r2
 8002d64:	7812      	ldrb	r2, [r2, #0]
 8002d66:	3a0a      	subs	r2, #10
 8002d68:	701a      	strb	r2, [r3, #0]
  while (Param >= 10U)
 8002d6a:	210b      	movs	r1, #11
 8002d6c:	187b      	adds	r3, r7, r1
 8002d6e:	781b      	ldrb	r3, [r3, #0]
 8002d70:	2b09      	cmp	r3, #9
 8002d72:	d8f1      	bhi.n	8002d58 <RTC_ByteToBcd2+0x1c>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 8002d74:	68fb      	ldr	r3, [r7, #12]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	011b      	lsls	r3, r3, #4
 8002d7a:	b2da      	uxtb	r2, r3
 8002d7c:	187b      	adds	r3, r7, r1
 8002d7e:	781b      	ldrb	r3, [r3, #0]
 8002d80:	4313      	orrs	r3, r2
 8002d82:	b2db      	uxtb	r3, r3
}
 8002d84:	0018      	movs	r0, r3
 8002d86:	46bd      	mov	sp, r7
 8002d88:	b004      	add	sp, #16
 8002d8a:	bd80      	pop	{r7, pc}

08002d8c <RTC_Bcd2ToByte>:
  * @brief  Convert from 2 digit BCD to Binary.
  * @param  Value BCD value to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8002d8c:	b580      	push	{r7, lr}
 8002d8e:	b084      	sub	sp, #16
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	0002      	movs	r2, r0
 8002d94:	1dfb      	adds	r3, r7, #7
 8002d96:	701a      	strb	r2, [r3, #0]
  uint32_t tmp;
  tmp = (((uint32_t)Value & 0xF0U) >> 4U) * 10U;
 8002d98:	1dfb      	adds	r3, r7, #7
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	091b      	lsrs	r3, r3, #4
 8002d9e:	b2db      	uxtb	r3, r3
 8002da0:	001a      	movs	r2, r3
 8002da2:	0013      	movs	r3, r2
 8002da4:	009b      	lsls	r3, r3, #2
 8002da6:	189b      	adds	r3, r3, r2
 8002da8:	005b      	lsls	r3, r3, #1
 8002daa:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tmp + ((uint32_t)Value & 0x0FU));
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	1dfb      	adds	r3, r7, #7
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	210f      	movs	r1, #15
 8002db6:	400b      	ands	r3, r1
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	18d3      	adds	r3, r2, r3
 8002dbc:	b2db      	uxtb	r3, r3
}
 8002dbe:	0018      	movs	r0, r3
 8002dc0:	46bd      	mov	sp, r7
 8002dc2:	b004      	add	sp, #16
 8002dc4:	bd80      	pop	{r7, pc}
	...

08002dc8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002dc8:	b580      	push	{r7, lr}
 8002dca:	b084      	sub	sp, #16
 8002dcc:	af00      	add	r7, sp, #0
 8002dce:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	2b00      	cmp	r3, #0
 8002dd4:	d101      	bne.n	8002dda <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e0a8      	b.n	8002f2c <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d109      	bne.n	8002df6 <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	685a      	ldr	r2, [r3, #4]
 8002de6:	2382      	movs	r3, #130	; 0x82
 8002de8:	005b      	lsls	r3, r3, #1
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d009      	beq.n	8002e02 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	2200      	movs	r2, #0
 8002df2:	61da      	str	r2, [r3, #28]
 8002df4:	e005      	b.n	8002e02 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	2200      	movs	r2, #0
 8002dfa:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	2200      	movs	r2, #0
 8002e00:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	2200      	movs	r2, #0
 8002e06:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	225d      	movs	r2, #93	; 0x5d
 8002e0c:	5c9b      	ldrb	r3, [r3, r2]
 8002e0e:	b2db      	uxtb	r3, r3
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d107      	bne.n	8002e24 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	225c      	movs	r2, #92	; 0x5c
 8002e18:	2100      	movs	r1, #0
 8002e1a:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	0018      	movs	r0, r3
 8002e20:	f7fd fe86 	bl	8000b30 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	225d      	movs	r2, #93	; 0x5d
 8002e28:	2102      	movs	r1, #2
 8002e2a:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	681b      	ldr	r3, [r3, #0]
 8002e30:	681a      	ldr	r2, [r3, #0]
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	2140      	movs	r1, #64	; 0x40
 8002e38:	438a      	bics	r2, r1
 8002e3a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	68da      	ldr	r2, [r3, #12]
 8002e40:	23e0      	movs	r3, #224	; 0xe0
 8002e42:	00db      	lsls	r3, r3, #3
 8002e44:	429a      	cmp	r2, r3
 8002e46:	d902      	bls.n	8002e4e <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	60fb      	str	r3, [r7, #12]
 8002e4c:	e002      	b.n	8002e54 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002e4e:	2380      	movs	r3, #128	; 0x80
 8002e50:	015b      	lsls	r3, r3, #5
 8002e52:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	68da      	ldr	r2, [r3, #12]
 8002e58:	23f0      	movs	r3, #240	; 0xf0
 8002e5a:	011b      	lsls	r3, r3, #4
 8002e5c:	429a      	cmp	r2, r3
 8002e5e:	d008      	beq.n	8002e72 <HAL_SPI_Init+0xaa>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	68da      	ldr	r2, [r3, #12]
 8002e64:	23e0      	movs	r3, #224	; 0xe0
 8002e66:	00db      	lsls	r3, r3, #3
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d002      	beq.n	8002e72 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	2200      	movs	r2, #0
 8002e70:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	685a      	ldr	r2, [r3, #4]
 8002e76:	2382      	movs	r3, #130	; 0x82
 8002e78:	005b      	lsls	r3, r3, #1
 8002e7a:	401a      	ands	r2, r3
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	6899      	ldr	r1, [r3, #8]
 8002e80:	2384      	movs	r3, #132	; 0x84
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	400b      	ands	r3, r1
 8002e86:	431a      	orrs	r2, r3
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	2102      	movs	r1, #2
 8002e8e:	400b      	ands	r3, r1
 8002e90:	431a      	orrs	r2, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	695b      	ldr	r3, [r3, #20]
 8002e96:	2101      	movs	r1, #1
 8002e98:	400b      	ands	r3, r1
 8002e9a:	431a      	orrs	r2, r3
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	6999      	ldr	r1, [r3, #24]
 8002ea0:	2380      	movs	r3, #128	; 0x80
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	400b      	ands	r3, r1
 8002ea6:	431a      	orrs	r2, r3
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	69db      	ldr	r3, [r3, #28]
 8002eac:	2138      	movs	r1, #56	; 0x38
 8002eae:	400b      	ands	r3, r1
 8002eb0:	431a      	orrs	r2, r3
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
 8002eb6:	2180      	movs	r1, #128	; 0x80
 8002eb8:	400b      	ands	r3, r1
 8002eba:	431a      	orrs	r2, r3
 8002ebc:	0011      	movs	r1, r2
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002ec2:	2380      	movs	r3, #128	; 0x80
 8002ec4:	019b      	lsls	r3, r3, #6
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	430a      	orrs	r2, r1
 8002ece:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	699b      	ldr	r3, [r3, #24]
 8002ed4:	0c1b      	lsrs	r3, r3, #16
 8002ed6:	2204      	movs	r2, #4
 8002ed8:	401a      	ands	r2, r3
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ede:	2110      	movs	r1, #16
 8002ee0:	400b      	ands	r3, r1
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002ee8:	2108      	movs	r1, #8
 8002eea:	400b      	ands	r3, r1
 8002eec:	431a      	orrs	r2, r3
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	68d9      	ldr	r1, [r3, #12]
 8002ef2:	23f0      	movs	r3, #240	; 0xf0
 8002ef4:	011b      	lsls	r3, r3, #4
 8002ef6:	400b      	ands	r3, r1
 8002ef8:	431a      	orrs	r2, r3
 8002efa:	0011      	movs	r1, r2
 8002efc:	68fa      	ldr	r2, [r7, #12]
 8002efe:	2380      	movs	r3, #128	; 0x80
 8002f00:	015b      	lsls	r3, r3, #5
 8002f02:	401a      	ands	r2, r3
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	69da      	ldr	r2, [r3, #28]
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4907      	ldr	r1, [pc, #28]	; (8002f34 <HAL_SPI_Init+0x16c>)
 8002f18:	400a      	ands	r2, r1
 8002f1a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2200      	movs	r2, #0
 8002f20:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	225d      	movs	r2, #93	; 0x5d
 8002f26:	2101      	movs	r1, #1
 8002f28:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002f2a:	2300      	movs	r3, #0
}
 8002f2c:	0018      	movs	r0, r3
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	b004      	add	sp, #16
 8002f32:	bd80      	pop	{r7, pc}
 8002f34:	fffff7ff 	.word	0xfffff7ff

08002f38 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b088      	sub	sp, #32
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	60f8      	str	r0, [r7, #12]
 8002f40:	60b9      	str	r1, [r7, #8]
 8002f42:	603b      	str	r3, [r7, #0]
 8002f44:	1dbb      	adds	r3, r7, #6
 8002f46:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002f48:	231f      	movs	r3, #31
 8002f4a:	18fb      	adds	r3, r7, r3
 8002f4c:	2200      	movs	r2, #0
 8002f4e:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	225c      	movs	r2, #92	; 0x5c
 8002f54:	5c9b      	ldrb	r3, [r3, r2]
 8002f56:	2b01      	cmp	r3, #1
 8002f58:	d101      	bne.n	8002f5e <HAL_SPI_Transmit+0x26>
 8002f5a:	2302      	movs	r3, #2
 8002f5c:	e171      	b.n	8003242 <HAL_SPI_Transmit+0x30a>
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	225c      	movs	r2, #92	; 0x5c
 8002f62:	2101      	movs	r1, #1
 8002f64:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002f66:	f7fd ff05 	bl	8000d74 <HAL_GetTick>
 8002f6a:	0003      	movs	r3, r0
 8002f6c:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002f6e:	2316      	movs	r3, #22
 8002f70:	18fb      	adds	r3, r7, r3
 8002f72:	1dba      	adds	r2, r7, #6
 8002f74:	8812      	ldrh	r2, [r2, #0]
 8002f76:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	225d      	movs	r2, #93	; 0x5d
 8002f7c:	5c9b      	ldrb	r3, [r3, r2]
 8002f7e:	b2db      	uxtb	r3, r3
 8002f80:	2b01      	cmp	r3, #1
 8002f82:	d004      	beq.n	8002f8e <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002f84:	231f      	movs	r3, #31
 8002f86:	18fb      	adds	r3, r7, r3
 8002f88:	2202      	movs	r2, #2
 8002f8a:	701a      	strb	r2, [r3, #0]
    goto error;
 8002f8c:	e14e      	b.n	800322c <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002f8e:	68bb      	ldr	r3, [r7, #8]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d003      	beq.n	8002f9c <HAL_SPI_Transmit+0x64>
 8002f94:	1dbb      	adds	r3, r7, #6
 8002f96:	881b      	ldrh	r3, [r3, #0]
 8002f98:	2b00      	cmp	r3, #0
 8002f9a:	d104      	bne.n	8002fa6 <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002f9c:	231f      	movs	r3, #31
 8002f9e:	18fb      	adds	r3, r7, r3
 8002fa0:	2201      	movs	r2, #1
 8002fa2:	701a      	strb	r2, [r3, #0]
    goto error;
 8002fa4:	e142      	b.n	800322c <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	225d      	movs	r2, #93	; 0x5d
 8002faa:	2103      	movs	r1, #3
 8002fac:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002fae:	68fb      	ldr	r3, [r7, #12]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	68ba      	ldr	r2, [r7, #8]
 8002fb8:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	1dba      	adds	r2, r7, #6
 8002fbe:	8812      	ldrh	r2, [r2, #0]
 8002fc0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	1dba      	adds	r2, r7, #6
 8002fc6:	8812      	ldrh	r2, [r2, #0]
 8002fc8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	2244      	movs	r2, #68	; 0x44
 8002fd4:	2100      	movs	r1, #0
 8002fd6:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 8002fd8:	68fb      	ldr	r3, [r7, #12]
 8002fda:	2246      	movs	r2, #70	; 0x46
 8002fdc:	2100      	movs	r1, #0
 8002fde:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
 8002fe8:	2200      	movs	r2, #0
 8002fea:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	689a      	ldr	r2, [r3, #8]
 8002ff0:	2380      	movs	r3, #128	; 0x80
 8002ff2:	021b      	lsls	r3, r3, #8
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	d110      	bne.n	800301a <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	681a      	ldr	r2, [r3, #0]
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	2140      	movs	r1, #64	; 0x40
 8003004:	438a      	bics	r2, r1
 8003006:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	681a      	ldr	r2, [r3, #0]
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	2180      	movs	r1, #128	; 0x80
 8003014:	01c9      	lsls	r1, r1, #7
 8003016:	430a      	orrs	r2, r1
 8003018:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	2240      	movs	r2, #64	; 0x40
 8003022:	4013      	ands	r3, r2
 8003024:	2b40      	cmp	r3, #64	; 0x40
 8003026:	d007      	beq.n	8003038 <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	681a      	ldr	r2, [r3, #0]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2140      	movs	r1, #64	; 0x40
 8003034:	430a      	orrs	r2, r1
 8003036:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	68da      	ldr	r2, [r3, #12]
 800303c:	23e0      	movs	r3, #224	; 0xe0
 800303e:	00db      	lsls	r3, r3, #3
 8003040:	429a      	cmp	r2, r3
 8003042:	d94e      	bls.n	80030e2 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	685b      	ldr	r3, [r3, #4]
 8003048:	2b00      	cmp	r3, #0
 800304a:	d004      	beq.n	8003056 <HAL_SPI_Transmit+0x11e>
 800304c:	2316      	movs	r3, #22
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	881b      	ldrh	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d13f      	bne.n	80030d6 <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800305a:	881a      	ldrh	r2, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003066:	1c9a      	adds	r2, r3, #2
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003070:	b29b      	uxth	r3, r3
 8003072:	3b01      	subs	r3, #1
 8003074:	b29a      	uxth	r2, r3
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800307a:	e02c      	b.n	80030d6 <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689b      	ldr	r3, [r3, #8]
 8003082:	2202      	movs	r2, #2
 8003084:	4013      	ands	r3, r2
 8003086:	2b02      	cmp	r3, #2
 8003088:	d112      	bne.n	80030b0 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800308e:	881a      	ldrh	r2, [r3, #0]
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800309a:	1c9a      	adds	r2, r3, #2
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030a4:	b29b      	uxth	r3, r3
 80030a6:	3b01      	subs	r3, #1
 80030a8:	b29a      	uxth	r2, r3
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	87da      	strh	r2, [r3, #62]	; 0x3e
 80030ae:	e012      	b.n	80030d6 <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80030b0:	f7fd fe60 	bl	8000d74 <HAL_GetTick>
 80030b4:	0002      	movs	r2, r0
 80030b6:	69bb      	ldr	r3, [r7, #24]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	683a      	ldr	r2, [r7, #0]
 80030bc:	429a      	cmp	r2, r3
 80030be:	d802      	bhi.n	80030c6 <HAL_SPI_Transmit+0x18e>
 80030c0:	683b      	ldr	r3, [r7, #0]
 80030c2:	3301      	adds	r3, #1
 80030c4:	d102      	bne.n	80030cc <HAL_SPI_Transmit+0x194>
 80030c6:	683b      	ldr	r3, [r7, #0]
 80030c8:	2b00      	cmp	r3, #0
 80030ca:	d104      	bne.n	80030d6 <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 80030cc:	231f      	movs	r3, #31
 80030ce:	18fb      	adds	r3, r7, r3
 80030d0:	2203      	movs	r2, #3
 80030d2:	701a      	strb	r2, [r3, #0]
          goto error;
 80030d4:	e0aa      	b.n	800322c <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d1cd      	bne.n	800307c <HAL_SPI_Transmit+0x144>
 80030e0:	e080      	b.n	80031e4 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d005      	beq.n	80030f6 <HAL_SPI_Transmit+0x1be>
 80030ea:	2316      	movs	r3, #22
 80030ec:	18fb      	adds	r3, r7, r3
 80030ee:	881b      	ldrh	r3, [r3, #0]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d000      	beq.n	80030f6 <HAL_SPI_Transmit+0x1be>
 80030f4:	e071      	b.n	80031da <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80030fa:	b29b      	uxth	r3, r3
 80030fc:	2b01      	cmp	r3, #1
 80030fe:	d912      	bls.n	8003126 <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003104:	881a      	ldrh	r2, [r3, #0]
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003110:	1c9a      	adds	r2, r3, #2
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800311a:	b29b      	uxth	r3, r3
 800311c:	3b02      	subs	r3, #2
 800311e:	b29a      	uxth	r2, r3
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003124:	e059      	b.n	80031da <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800312a:	68fb      	ldr	r3, [r7, #12]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	330c      	adds	r3, #12
 8003130:	7812      	ldrb	r2, [r2, #0]
 8003132:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003138:	1c5a      	adds	r2, r3, #1
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003142:	b29b      	uxth	r3, r3
 8003144:	3b01      	subs	r3, #1
 8003146:	b29a      	uxth	r2, r3
 8003148:	68fb      	ldr	r3, [r7, #12]
 800314a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 800314c:	e045      	b.n	80031da <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	689b      	ldr	r3, [r3, #8]
 8003154:	2202      	movs	r2, #2
 8003156:	4013      	ands	r3, r2
 8003158:	2b02      	cmp	r3, #2
 800315a:	d12b      	bne.n	80031b4 <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003160:	b29b      	uxth	r3, r3
 8003162:	2b01      	cmp	r3, #1
 8003164:	d912      	bls.n	800318c <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800316a:	881a      	ldrh	r2, [r3, #0]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003176:	1c9a      	adds	r2, r3, #2
 8003178:	68fb      	ldr	r3, [r7, #12]
 800317a:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003180:	b29b      	uxth	r3, r3
 8003182:	3b02      	subs	r3, #2
 8003184:	b29a      	uxth	r2, r3
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	87da      	strh	r2, [r3, #62]	; 0x3e
 800318a:	e026      	b.n	80031da <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	330c      	adds	r3, #12
 8003196:	7812      	ldrb	r2, [r2, #0]
 8003198:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800319e:	1c5a      	adds	r2, r3, #1
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031a8:	b29b      	uxth	r3, r3
 80031aa:	3b01      	subs	r3, #1
 80031ac:	b29a      	uxth	r2, r3
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	87da      	strh	r2, [r3, #62]	; 0x3e
 80031b2:	e012      	b.n	80031da <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031b4:	f7fd fdde 	bl	8000d74 <HAL_GetTick>
 80031b8:	0002      	movs	r2, r0
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	1ad3      	subs	r3, r2, r3
 80031be:	683a      	ldr	r2, [r7, #0]
 80031c0:	429a      	cmp	r2, r3
 80031c2:	d802      	bhi.n	80031ca <HAL_SPI_Transmit+0x292>
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	3301      	adds	r3, #1
 80031c8:	d102      	bne.n	80031d0 <HAL_SPI_Transmit+0x298>
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d104      	bne.n	80031da <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 80031d0:	231f      	movs	r3, #31
 80031d2:	18fb      	adds	r3, r7, r3
 80031d4:	2203      	movs	r2, #3
 80031d6:	701a      	strb	r2, [r3, #0]
          goto error;
 80031d8:	e028      	b.n	800322c <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80031de:	b29b      	uxth	r3, r3
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d1b4      	bne.n	800314e <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	6839      	ldr	r1, [r7, #0]
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	0018      	movs	r0, r3
 80031ec:	f000 f95e 	bl	80034ac <SPI_EndRxTxTransaction>
 80031f0:	1e03      	subs	r3, r0, #0
 80031f2:	d002      	beq.n	80031fa <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	2220      	movs	r2, #32
 80031f8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10a      	bne.n	8003218 <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003202:	2300      	movs	r3, #0
 8003204:	613b      	str	r3, [r7, #16]
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	68db      	ldr	r3, [r3, #12]
 800320c:	613b      	str	r3, [r7, #16]
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	689b      	ldr	r3, [r3, #8]
 8003214:	613b      	str	r3, [r7, #16]
 8003216:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800321c:	2b00      	cmp	r3, #0
 800321e:	d004      	beq.n	800322a <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 8003220:	231f      	movs	r3, #31
 8003222:	18fb      	adds	r3, r7, r3
 8003224:	2201      	movs	r2, #1
 8003226:	701a      	strb	r2, [r3, #0]
 8003228:	e000      	b.n	800322c <HAL_SPI_Transmit+0x2f4>
  }

error:
 800322a:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	225d      	movs	r2, #93	; 0x5d
 8003230:	2101      	movs	r1, #1
 8003232:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	225c      	movs	r2, #92	; 0x5c
 8003238:	2100      	movs	r1, #0
 800323a:	5499      	strb	r1, [r3, r2]
  return errorcode;
 800323c:	231f      	movs	r3, #31
 800323e:	18fb      	adds	r3, r7, r3
 8003240:	781b      	ldrb	r3, [r3, #0]
}
 8003242:	0018      	movs	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	b008      	add	sp, #32
 8003248:	bd80      	pop	{r7, pc}
	...

0800324c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b088      	sub	sp, #32
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	603b      	str	r3, [r7, #0]
 8003258:	1dfb      	adds	r3, r7, #7
 800325a:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800325c:	f7fd fd8a 	bl	8000d74 <HAL_GetTick>
 8003260:	0002      	movs	r2, r0
 8003262:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003264:	1a9b      	subs	r3, r3, r2
 8003266:	683a      	ldr	r2, [r7, #0]
 8003268:	18d3      	adds	r3, r2, r3
 800326a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800326c:	f7fd fd82 	bl	8000d74 <HAL_GetTick>
 8003270:	0003      	movs	r3, r0
 8003272:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003274:	4b3a      	ldr	r3, [pc, #232]	; (8003360 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	015b      	lsls	r3, r3, #5
 800327a:	0d1b      	lsrs	r3, r3, #20
 800327c:	69fa      	ldr	r2, [r7, #28]
 800327e:	4353      	muls	r3, r2
 8003280:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003282:	e058      	b.n	8003336 <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	3301      	adds	r3, #1
 8003288:	d055      	beq.n	8003336 <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800328a:	f7fd fd73 	bl	8000d74 <HAL_GetTick>
 800328e:	0002      	movs	r2, r0
 8003290:	69bb      	ldr	r3, [r7, #24]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	69fa      	ldr	r2, [r7, #28]
 8003296:	429a      	cmp	r2, r3
 8003298:	d902      	bls.n	80032a0 <SPI_WaitFlagStateUntilTimeout+0x54>
 800329a:	69fb      	ldr	r3, [r7, #28]
 800329c:	2b00      	cmp	r3, #0
 800329e:	d142      	bne.n	8003326 <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685a      	ldr	r2, [r3, #4]
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	21e0      	movs	r1, #224	; 0xe0
 80032ac:	438a      	bics	r2, r1
 80032ae:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	685a      	ldr	r2, [r3, #4]
 80032b4:	2382      	movs	r3, #130	; 0x82
 80032b6:	005b      	lsls	r3, r3, #1
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d113      	bne.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0x98>
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	2380      	movs	r3, #128	; 0x80
 80032c2:	021b      	lsls	r3, r3, #8
 80032c4:	429a      	cmp	r2, r3
 80032c6:	d005      	beq.n	80032d4 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	689a      	ldr	r2, [r3, #8]
 80032cc:	2380      	movs	r3, #128	; 0x80
 80032ce:	00db      	lsls	r3, r3, #3
 80032d0:	429a      	cmp	r2, r3
 80032d2:	d107      	bne.n	80032e4 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	681a      	ldr	r2, [r3, #0]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	2140      	movs	r1, #64	; 0x40
 80032e0:	438a      	bics	r2, r1
 80032e2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80032e8:	2380      	movs	r3, #128	; 0x80
 80032ea:	019b      	lsls	r3, r3, #6
 80032ec:	429a      	cmp	r2, r3
 80032ee:	d110      	bne.n	8003312 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	681a      	ldr	r2, [r3, #0]
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	491a      	ldr	r1, [pc, #104]	; (8003364 <SPI_WaitFlagStateUntilTimeout+0x118>)
 80032fc:	400a      	ands	r2, r1
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	681a      	ldr	r2, [r3, #0]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	2180      	movs	r1, #128	; 0x80
 800330c:	0189      	lsls	r1, r1, #6
 800330e:	430a      	orrs	r2, r1
 8003310:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	225d      	movs	r2, #93	; 0x5d
 8003316:	2101      	movs	r1, #1
 8003318:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	225c      	movs	r2, #92	; 0x5c
 800331e:	2100      	movs	r1, #0
 8003320:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e017      	b.n	8003356 <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003326:	697b      	ldr	r3, [r7, #20]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d101      	bne.n	8003330 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 800332c:	2300      	movs	r3, #0
 800332e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003330:	697b      	ldr	r3, [r7, #20]
 8003332:	3b01      	subs	r3, #1
 8003334:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	4013      	ands	r3, r2
 8003340:	68ba      	ldr	r2, [r7, #8]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	425a      	negs	r2, r3
 8003346:	4153      	adcs	r3, r2
 8003348:	b2db      	uxtb	r3, r3
 800334a:	001a      	movs	r2, r3
 800334c:	1dfb      	adds	r3, r7, #7
 800334e:	781b      	ldrb	r3, [r3, #0]
 8003350:	429a      	cmp	r2, r3
 8003352:	d197      	bne.n	8003284 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003354:	2300      	movs	r3, #0
}
 8003356:	0018      	movs	r0, r3
 8003358:	46bd      	mov	sp, r7
 800335a:	b008      	add	sp, #32
 800335c:	bd80      	pop	{r7, pc}
 800335e:	46c0      	nop			; (mov r8, r8)
 8003360:	20000008 	.word	0x20000008
 8003364:	ffffdfff 	.word	0xffffdfff

08003368 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b08a      	sub	sp, #40	; 0x28
 800336c:	af00      	add	r7, sp, #0
 800336e:	60f8      	str	r0, [r7, #12]
 8003370:	60b9      	str	r1, [r7, #8]
 8003372:	607a      	str	r2, [r7, #4]
 8003374:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003376:	2317      	movs	r3, #23
 8003378:	18fb      	adds	r3, r7, r3
 800337a:	2200      	movs	r2, #0
 800337c:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800337e:	f7fd fcf9 	bl	8000d74 <HAL_GetTick>
 8003382:	0002      	movs	r2, r0
 8003384:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003386:	1a9b      	subs	r3, r3, r2
 8003388:	683a      	ldr	r2, [r7, #0]
 800338a:	18d3      	adds	r3, r2, r3
 800338c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800338e:	f7fd fcf1 	bl	8000d74 <HAL_GetTick>
 8003392:	0003      	movs	r3, r0
 8003394:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	330c      	adds	r3, #12
 800339c:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800339e:	4b41      	ldr	r3, [pc, #260]	; (80034a4 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	0013      	movs	r3, r2
 80033a4:	009b      	lsls	r3, r3, #2
 80033a6:	189b      	adds	r3, r3, r2
 80033a8:	00da      	lsls	r2, r3, #3
 80033aa:	1ad3      	subs	r3, r2, r3
 80033ac:	0d1b      	lsrs	r3, r3, #20
 80033ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033b0:	4353      	muls	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 80033b4:	e068      	b.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 80033b6:	68ba      	ldr	r2, [r7, #8]
 80033b8:	23c0      	movs	r3, #192	; 0xc0
 80033ba:	00db      	lsls	r3, r3, #3
 80033bc:	429a      	cmp	r2, r3
 80033be:	d10a      	bne.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2b00      	cmp	r3, #0
 80033c4:	d107      	bne.n	80033d6 <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80033c6:	69fb      	ldr	r3, [r7, #28]
 80033c8:	781b      	ldrb	r3, [r3, #0]
 80033ca:	b2da      	uxtb	r2, r3
 80033cc:	2117      	movs	r1, #23
 80033ce:	187b      	adds	r3, r7, r1
 80033d0:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80033d2:	187b      	adds	r3, r7, r1
 80033d4:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 80033d6:	683b      	ldr	r3, [r7, #0]
 80033d8:	3301      	adds	r3, #1
 80033da:	d055      	beq.n	8003488 <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80033dc:	f7fd fcca 	bl	8000d74 <HAL_GetTick>
 80033e0:	0002      	movs	r2, r0
 80033e2:	6a3b      	ldr	r3, [r7, #32]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033e8:	429a      	cmp	r2, r3
 80033ea:	d902      	bls.n	80033f2 <SPI_WaitFifoStateUntilTimeout+0x8a>
 80033ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d142      	bne.n	8003478 <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	685a      	ldr	r2, [r3, #4]
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	21e0      	movs	r1, #224	; 0xe0
 80033fe:	438a      	bics	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	685a      	ldr	r2, [r3, #4]
 8003406:	2382      	movs	r3, #130	; 0x82
 8003408:	005b      	lsls	r3, r3, #1
 800340a:	429a      	cmp	r2, r3
 800340c:	d113      	bne.n	8003436 <SPI_WaitFifoStateUntilTimeout+0xce>
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	689a      	ldr	r2, [r3, #8]
 8003412:	2380      	movs	r3, #128	; 0x80
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	429a      	cmp	r2, r3
 8003418:	d005      	beq.n	8003426 <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	2380      	movs	r3, #128	; 0x80
 8003420:	00db      	lsls	r3, r3, #3
 8003422:	429a      	cmp	r2, r3
 8003424:	d107      	bne.n	8003436 <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	681a      	ldr	r2, [r3, #0]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	2140      	movs	r1, #64	; 0x40
 8003432:	438a      	bics	r2, r1
 8003434:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003436:	68fb      	ldr	r3, [r7, #12]
 8003438:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800343a:	2380      	movs	r3, #128	; 0x80
 800343c:	019b      	lsls	r3, r3, #6
 800343e:	429a      	cmp	r2, r3
 8003440:	d110      	bne.n	8003464 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	4916      	ldr	r1, [pc, #88]	; (80034a8 <SPI_WaitFifoStateUntilTimeout+0x140>)
 800344e:	400a      	ands	r2, r1
 8003450:	601a      	str	r2, [r3, #0]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	681a      	ldr	r2, [r3, #0]
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2180      	movs	r1, #128	; 0x80
 800345e:	0189      	lsls	r1, r1, #6
 8003460:	430a      	orrs	r2, r1
 8003462:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	225d      	movs	r2, #93	; 0x5d
 8003468:	2101      	movs	r1, #1
 800346a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	225c      	movs	r2, #92	; 0x5c
 8003470:	2100      	movs	r1, #0
 8003472:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8003474:	2303      	movs	r3, #3
 8003476:	e010      	b.n	800349a <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003478:	69bb      	ldr	r3, [r7, #24]
 800347a:	2b00      	cmp	r3, #0
 800347c:	d101      	bne.n	8003482 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 800347e:	2300      	movs	r3, #0
 8003480:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	3b01      	subs	r3, #1
 8003486:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	68ba      	ldr	r2, [r7, #8]
 8003490:	4013      	ands	r3, r2
 8003492:	687a      	ldr	r2, [r7, #4]
 8003494:	429a      	cmp	r2, r3
 8003496:	d18e      	bne.n	80033b6 <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8003498:	2300      	movs	r3, #0
}
 800349a:	0018      	movs	r0, r3
 800349c:	46bd      	mov	sp, r7
 800349e:	b00a      	add	sp, #40	; 0x28
 80034a0:	bd80      	pop	{r7, pc}
 80034a2:	46c0      	nop			; (mov r8, r8)
 80034a4:	20000008 	.word	0x20000008
 80034a8:	ffffdfff 	.word	0xffffdfff

080034ac <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b086      	sub	sp, #24
 80034b0:	af02      	add	r7, sp, #8
 80034b2:	60f8      	str	r0, [r7, #12]
 80034b4:	60b9      	str	r1, [r7, #8]
 80034b6:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80034b8:	68ba      	ldr	r2, [r7, #8]
 80034ba:	23c0      	movs	r3, #192	; 0xc0
 80034bc:	0159      	lsls	r1, r3, #5
 80034be:	68f8      	ldr	r0, [r7, #12]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	9300      	str	r3, [sp, #0]
 80034c4:	0013      	movs	r3, r2
 80034c6:	2200      	movs	r2, #0
 80034c8:	f7ff ff4e 	bl	8003368 <SPI_WaitFifoStateUntilTimeout>
 80034cc:	1e03      	subs	r3, r0, #0
 80034ce:	d007      	beq.n	80034e0 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034d4:	2220      	movs	r2, #32
 80034d6:	431a      	orrs	r2, r3
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 80034dc:	2303      	movs	r3, #3
 80034de:	e027      	b.n	8003530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80034e0:	68ba      	ldr	r2, [r7, #8]
 80034e2:	68f8      	ldr	r0, [r7, #12]
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	9300      	str	r3, [sp, #0]
 80034e8:	0013      	movs	r3, r2
 80034ea:	2200      	movs	r2, #0
 80034ec:	2180      	movs	r1, #128	; 0x80
 80034ee:	f7ff fead 	bl	800324c <SPI_WaitFlagStateUntilTimeout>
 80034f2:	1e03      	subs	r3, r0, #0
 80034f4:	d007      	beq.n	8003506 <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80034fa:	2220      	movs	r2, #32
 80034fc:	431a      	orrs	r2, r3
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e014      	b.n	8003530 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8003506:	68ba      	ldr	r2, [r7, #8]
 8003508:	23c0      	movs	r3, #192	; 0xc0
 800350a:	00d9      	lsls	r1, r3, #3
 800350c:	68f8      	ldr	r0, [r7, #12]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	9300      	str	r3, [sp, #0]
 8003512:	0013      	movs	r3, r2
 8003514:	2200      	movs	r2, #0
 8003516:	f7ff ff27 	bl	8003368 <SPI_WaitFifoStateUntilTimeout>
 800351a:	1e03      	subs	r3, r0, #0
 800351c:	d007      	beq.n	800352e <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003522:	2220      	movs	r2, #32
 8003524:	431a      	orrs	r2, r3
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800352a:	2303      	movs	r3, #3
 800352c:	e000      	b.n	8003530 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	0018      	movs	r0, r3
 8003532:	46bd      	mov	sp, r7
 8003534:	b004      	add	sp, #16
 8003536:	bd80      	pop	{r7, pc}

08003538 <atoi>:
 8003538:	b510      	push	{r4, lr}
 800353a:	220a      	movs	r2, #10
 800353c:	2100      	movs	r1, #0
 800353e:	f000 f887 	bl	8003650 <strtol>
 8003542:	bd10      	pop	{r4, pc}

08003544 <_strtol_l.constprop.0>:
 8003544:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003546:	b087      	sub	sp, #28
 8003548:	001e      	movs	r6, r3
 800354a:	9005      	str	r0, [sp, #20]
 800354c:	9101      	str	r1, [sp, #4]
 800354e:	9202      	str	r2, [sp, #8]
 8003550:	2b01      	cmp	r3, #1
 8003552:	d048      	beq.n	80035e6 <_strtol_l.constprop.0+0xa2>
 8003554:	000b      	movs	r3, r1
 8003556:	2e24      	cmp	r6, #36	; 0x24
 8003558:	d845      	bhi.n	80035e6 <_strtol_l.constprop.0+0xa2>
 800355a:	4a3b      	ldr	r2, [pc, #236]	; (8003648 <_strtol_l.constprop.0+0x104>)
 800355c:	2108      	movs	r1, #8
 800355e:	4694      	mov	ip, r2
 8003560:	001a      	movs	r2, r3
 8003562:	4660      	mov	r0, ip
 8003564:	7814      	ldrb	r4, [r2, #0]
 8003566:	3301      	adds	r3, #1
 8003568:	5d00      	ldrb	r0, [r0, r4]
 800356a:	001d      	movs	r5, r3
 800356c:	0007      	movs	r7, r0
 800356e:	400f      	ands	r7, r1
 8003570:	4208      	tst	r0, r1
 8003572:	d1f5      	bne.n	8003560 <_strtol_l.constprop.0+0x1c>
 8003574:	2c2d      	cmp	r4, #45	; 0x2d
 8003576:	d13d      	bne.n	80035f4 <_strtol_l.constprop.0+0xb0>
 8003578:	2701      	movs	r7, #1
 800357a:	781c      	ldrb	r4, [r3, #0]
 800357c:	1c95      	adds	r5, r2, #2
 800357e:	2e00      	cmp	r6, #0
 8003580:	d05e      	beq.n	8003640 <_strtol_l.constprop.0+0xfc>
 8003582:	2e10      	cmp	r6, #16
 8003584:	d109      	bne.n	800359a <_strtol_l.constprop.0+0x56>
 8003586:	2c30      	cmp	r4, #48	; 0x30
 8003588:	d107      	bne.n	800359a <_strtol_l.constprop.0+0x56>
 800358a:	2220      	movs	r2, #32
 800358c:	782b      	ldrb	r3, [r5, #0]
 800358e:	4393      	bics	r3, r2
 8003590:	2b58      	cmp	r3, #88	; 0x58
 8003592:	d150      	bne.n	8003636 <_strtol_l.constprop.0+0xf2>
 8003594:	2610      	movs	r6, #16
 8003596:	786c      	ldrb	r4, [r5, #1]
 8003598:	3502      	adds	r5, #2
 800359a:	4b2c      	ldr	r3, [pc, #176]	; (800364c <_strtol_l.constprop.0+0x108>)
 800359c:	0031      	movs	r1, r6
 800359e:	18fb      	adds	r3, r7, r3
 80035a0:	0018      	movs	r0, r3
 80035a2:	9303      	str	r3, [sp, #12]
 80035a4:	f7fc fe36 	bl	8000214 <__aeabi_uidivmod>
 80035a8:	2200      	movs	r2, #0
 80035aa:	9104      	str	r1, [sp, #16]
 80035ac:	2101      	movs	r1, #1
 80035ae:	4684      	mov	ip, r0
 80035b0:	0010      	movs	r0, r2
 80035b2:	4249      	negs	r1, r1
 80035b4:	0023      	movs	r3, r4
 80035b6:	3b30      	subs	r3, #48	; 0x30
 80035b8:	2b09      	cmp	r3, #9
 80035ba:	d903      	bls.n	80035c4 <_strtol_l.constprop.0+0x80>
 80035bc:	3b11      	subs	r3, #17
 80035be:	2b19      	cmp	r3, #25
 80035c0:	d81d      	bhi.n	80035fe <_strtol_l.constprop.0+0xba>
 80035c2:	330a      	adds	r3, #10
 80035c4:	429e      	cmp	r6, r3
 80035c6:	dd1e      	ble.n	8003606 <_strtol_l.constprop.0+0xc2>
 80035c8:	1c54      	adds	r4, r2, #1
 80035ca:	d009      	beq.n	80035e0 <_strtol_l.constprop.0+0x9c>
 80035cc:	000a      	movs	r2, r1
 80035ce:	4584      	cmp	ip, r0
 80035d0:	d306      	bcc.n	80035e0 <_strtol_l.constprop.0+0x9c>
 80035d2:	d102      	bne.n	80035da <_strtol_l.constprop.0+0x96>
 80035d4:	9c04      	ldr	r4, [sp, #16]
 80035d6:	429c      	cmp	r4, r3
 80035d8:	db02      	blt.n	80035e0 <_strtol_l.constprop.0+0x9c>
 80035da:	2201      	movs	r2, #1
 80035dc:	4370      	muls	r0, r6
 80035de:	1818      	adds	r0, r3, r0
 80035e0:	782c      	ldrb	r4, [r5, #0]
 80035e2:	3501      	adds	r5, #1
 80035e4:	e7e6      	b.n	80035b4 <_strtol_l.constprop.0+0x70>
 80035e6:	f000 f847 	bl	8003678 <__errno>
 80035ea:	2316      	movs	r3, #22
 80035ec:	6003      	str	r3, [r0, #0]
 80035ee:	2000      	movs	r0, #0
 80035f0:	b007      	add	sp, #28
 80035f2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80035f4:	2c2b      	cmp	r4, #43	; 0x2b
 80035f6:	d1c2      	bne.n	800357e <_strtol_l.constprop.0+0x3a>
 80035f8:	781c      	ldrb	r4, [r3, #0]
 80035fa:	1c95      	adds	r5, r2, #2
 80035fc:	e7bf      	b.n	800357e <_strtol_l.constprop.0+0x3a>
 80035fe:	0023      	movs	r3, r4
 8003600:	3b61      	subs	r3, #97	; 0x61
 8003602:	2b19      	cmp	r3, #25
 8003604:	d9dd      	bls.n	80035c2 <_strtol_l.constprop.0+0x7e>
 8003606:	1c53      	adds	r3, r2, #1
 8003608:	d109      	bne.n	800361e <_strtol_l.constprop.0+0xda>
 800360a:	2322      	movs	r3, #34	; 0x22
 800360c:	9a05      	ldr	r2, [sp, #20]
 800360e:	9803      	ldr	r0, [sp, #12]
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	9b02      	ldr	r3, [sp, #8]
 8003614:	2b00      	cmp	r3, #0
 8003616:	d0eb      	beq.n	80035f0 <_strtol_l.constprop.0+0xac>
 8003618:	1e6b      	subs	r3, r5, #1
 800361a:	9301      	str	r3, [sp, #4]
 800361c:	e007      	b.n	800362e <_strtol_l.constprop.0+0xea>
 800361e:	2f00      	cmp	r7, #0
 8003620:	d000      	beq.n	8003624 <_strtol_l.constprop.0+0xe0>
 8003622:	4240      	negs	r0, r0
 8003624:	9b02      	ldr	r3, [sp, #8]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d0e2      	beq.n	80035f0 <_strtol_l.constprop.0+0xac>
 800362a:	2a00      	cmp	r2, #0
 800362c:	d1f4      	bne.n	8003618 <_strtol_l.constprop.0+0xd4>
 800362e:	9b02      	ldr	r3, [sp, #8]
 8003630:	9a01      	ldr	r2, [sp, #4]
 8003632:	601a      	str	r2, [r3, #0]
 8003634:	e7dc      	b.n	80035f0 <_strtol_l.constprop.0+0xac>
 8003636:	2430      	movs	r4, #48	; 0x30
 8003638:	2e00      	cmp	r6, #0
 800363a:	d1ae      	bne.n	800359a <_strtol_l.constprop.0+0x56>
 800363c:	3608      	adds	r6, #8
 800363e:	e7ac      	b.n	800359a <_strtol_l.constprop.0+0x56>
 8003640:	2c30      	cmp	r4, #48	; 0x30
 8003642:	d0a2      	beq.n	800358a <_strtol_l.constprop.0+0x46>
 8003644:	260a      	movs	r6, #10
 8003646:	e7a8      	b.n	800359a <_strtol_l.constprop.0+0x56>
 8003648:	0800373d 	.word	0x0800373d
 800364c:	7fffffff 	.word	0x7fffffff

08003650 <strtol>:
 8003650:	b510      	push	{r4, lr}
 8003652:	4c04      	ldr	r4, [pc, #16]	; (8003664 <strtol+0x14>)
 8003654:	0013      	movs	r3, r2
 8003656:	000a      	movs	r2, r1
 8003658:	0001      	movs	r1, r0
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	f7ff ff72 	bl	8003544 <_strtol_l.constprop.0>
 8003660:	bd10      	pop	{r4, pc}
 8003662:	46c0      	nop			; (mov r8, r8)
 8003664:	20000060 	.word	0x20000060

08003668 <memset>:
 8003668:	0003      	movs	r3, r0
 800366a:	1882      	adds	r2, r0, r2
 800366c:	4293      	cmp	r3, r2
 800366e:	d100      	bne.n	8003672 <memset+0xa>
 8003670:	4770      	bx	lr
 8003672:	7019      	strb	r1, [r3, #0]
 8003674:	3301      	adds	r3, #1
 8003676:	e7f9      	b.n	800366c <memset+0x4>

08003678 <__errno>:
 8003678:	4b01      	ldr	r3, [pc, #4]	; (8003680 <__errno+0x8>)
 800367a:	6818      	ldr	r0, [r3, #0]
 800367c:	4770      	bx	lr
 800367e:	46c0      	nop			; (mov r8, r8)
 8003680:	20000060 	.word	0x20000060

08003684 <__libc_init_array>:
 8003684:	b570      	push	{r4, r5, r6, lr}
 8003686:	2600      	movs	r6, #0
 8003688:	4c0c      	ldr	r4, [pc, #48]	; (80036bc <__libc_init_array+0x38>)
 800368a:	4d0d      	ldr	r5, [pc, #52]	; (80036c0 <__libc_init_array+0x3c>)
 800368c:	1b64      	subs	r4, r4, r5
 800368e:	10a4      	asrs	r4, r4, #2
 8003690:	42a6      	cmp	r6, r4
 8003692:	d109      	bne.n	80036a8 <__libc_init_array+0x24>
 8003694:	2600      	movs	r6, #0
 8003696:	f000 f819 	bl	80036cc <_init>
 800369a:	4c0a      	ldr	r4, [pc, #40]	; (80036c4 <__libc_init_array+0x40>)
 800369c:	4d0a      	ldr	r5, [pc, #40]	; (80036c8 <__libc_init_array+0x44>)
 800369e:	1b64      	subs	r4, r4, r5
 80036a0:	10a4      	asrs	r4, r4, #2
 80036a2:	42a6      	cmp	r6, r4
 80036a4:	d105      	bne.n	80036b2 <__libc_init_array+0x2e>
 80036a6:	bd70      	pop	{r4, r5, r6, pc}
 80036a8:	00b3      	lsls	r3, r6, #2
 80036aa:	58eb      	ldr	r3, [r5, r3]
 80036ac:	4798      	blx	r3
 80036ae:	3601      	adds	r6, #1
 80036b0:	e7ee      	b.n	8003690 <__libc_init_array+0xc>
 80036b2:	00b3      	lsls	r3, r6, #2
 80036b4:	58eb      	ldr	r3, [r5, r3]
 80036b6:	4798      	blx	r3
 80036b8:	3601      	adds	r6, #1
 80036ba:	e7f2      	b.n	80036a2 <__libc_init_array+0x1e>
 80036bc:	08003840 	.word	0x08003840
 80036c0:	08003840 	.word	0x08003840
 80036c4:	08003844 	.word	0x08003844
 80036c8:	08003840 	.word	0x08003840

080036cc <_init>:
 80036cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036ce:	46c0      	nop			; (mov r8, r8)
 80036d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d2:	bc08      	pop	{r3}
 80036d4:	469e      	mov	lr, r3
 80036d6:	4770      	bx	lr

080036d8 <_fini>:
 80036d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036da:	46c0      	nop			; (mov r8, r8)
 80036dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036de:	bc08      	pop	{r3}
 80036e0:	469e      	mov	lr, r3
 80036e2:	4770      	bx	lr
