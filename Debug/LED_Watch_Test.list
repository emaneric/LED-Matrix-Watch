
LED_Watch_Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002e6c  080000c0  080000c0  000100c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000044  08002f2c  08002f2c  00012f2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002f70  08002f70  00020018  2**0
                  CONTENTS
  4 .ARM          00000000  08002f70  08002f70  00020018  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002f70  08002f70  00020018  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002f70  08002f70  00012f70  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002f74  08002f74  00012f74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000018  20000000  08002f78  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000140  20000018  08002f90  00020018  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000158  08002f90  00020158  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00020018  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a5f6  00000000  00000000  00020083  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001bee  00000000  00000000  0002a679  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000b30  00000000  00000000  0002c268  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000899  00000000  00000000  0002cd98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00013585  00000000  00000000  0002d631  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d232  00000000  00000000  00040bb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00079f23  00000000  00000000  0004dde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00002820  00000000  00000000  000c7d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000066  00000000  00000000  000ca52c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	; (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	; (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	; (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000018 	.word	0x20000018
 80000e0:	00000000 	.word	0x00000000
 80000e4:	08002f14 	.word	0x08002f14

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	; (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	; (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	; (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			; (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	2000001c 	.word	0x2000001c
 8000104:	08002f14 	.word	0x08002f14

08000108 <__udivsi3>:
 8000108:	2200      	movs	r2, #0
 800010a:	0843      	lsrs	r3, r0, #1
 800010c:	428b      	cmp	r3, r1
 800010e:	d374      	bcc.n	80001fa <__udivsi3+0xf2>
 8000110:	0903      	lsrs	r3, r0, #4
 8000112:	428b      	cmp	r3, r1
 8000114:	d35f      	bcc.n	80001d6 <__udivsi3+0xce>
 8000116:	0a03      	lsrs	r3, r0, #8
 8000118:	428b      	cmp	r3, r1
 800011a:	d344      	bcc.n	80001a6 <__udivsi3+0x9e>
 800011c:	0b03      	lsrs	r3, r0, #12
 800011e:	428b      	cmp	r3, r1
 8000120:	d328      	bcc.n	8000174 <__udivsi3+0x6c>
 8000122:	0c03      	lsrs	r3, r0, #16
 8000124:	428b      	cmp	r3, r1
 8000126:	d30d      	bcc.n	8000144 <__udivsi3+0x3c>
 8000128:	22ff      	movs	r2, #255	; 0xff
 800012a:	0209      	lsls	r1, r1, #8
 800012c:	ba12      	rev	r2, r2
 800012e:	0c03      	lsrs	r3, r0, #16
 8000130:	428b      	cmp	r3, r1
 8000132:	d302      	bcc.n	800013a <__udivsi3+0x32>
 8000134:	1212      	asrs	r2, r2, #8
 8000136:	0209      	lsls	r1, r1, #8
 8000138:	d065      	beq.n	8000206 <__udivsi3+0xfe>
 800013a:	0b03      	lsrs	r3, r0, #12
 800013c:	428b      	cmp	r3, r1
 800013e:	d319      	bcc.n	8000174 <__udivsi3+0x6c>
 8000140:	e000      	b.n	8000144 <__udivsi3+0x3c>
 8000142:	0a09      	lsrs	r1, r1, #8
 8000144:	0bc3      	lsrs	r3, r0, #15
 8000146:	428b      	cmp	r3, r1
 8000148:	d301      	bcc.n	800014e <__udivsi3+0x46>
 800014a:	03cb      	lsls	r3, r1, #15
 800014c:	1ac0      	subs	r0, r0, r3
 800014e:	4152      	adcs	r2, r2
 8000150:	0b83      	lsrs	r3, r0, #14
 8000152:	428b      	cmp	r3, r1
 8000154:	d301      	bcc.n	800015a <__udivsi3+0x52>
 8000156:	038b      	lsls	r3, r1, #14
 8000158:	1ac0      	subs	r0, r0, r3
 800015a:	4152      	adcs	r2, r2
 800015c:	0b43      	lsrs	r3, r0, #13
 800015e:	428b      	cmp	r3, r1
 8000160:	d301      	bcc.n	8000166 <__udivsi3+0x5e>
 8000162:	034b      	lsls	r3, r1, #13
 8000164:	1ac0      	subs	r0, r0, r3
 8000166:	4152      	adcs	r2, r2
 8000168:	0b03      	lsrs	r3, r0, #12
 800016a:	428b      	cmp	r3, r1
 800016c:	d301      	bcc.n	8000172 <__udivsi3+0x6a>
 800016e:	030b      	lsls	r3, r1, #12
 8000170:	1ac0      	subs	r0, r0, r3
 8000172:	4152      	adcs	r2, r2
 8000174:	0ac3      	lsrs	r3, r0, #11
 8000176:	428b      	cmp	r3, r1
 8000178:	d301      	bcc.n	800017e <__udivsi3+0x76>
 800017a:	02cb      	lsls	r3, r1, #11
 800017c:	1ac0      	subs	r0, r0, r3
 800017e:	4152      	adcs	r2, r2
 8000180:	0a83      	lsrs	r3, r0, #10
 8000182:	428b      	cmp	r3, r1
 8000184:	d301      	bcc.n	800018a <__udivsi3+0x82>
 8000186:	028b      	lsls	r3, r1, #10
 8000188:	1ac0      	subs	r0, r0, r3
 800018a:	4152      	adcs	r2, r2
 800018c:	0a43      	lsrs	r3, r0, #9
 800018e:	428b      	cmp	r3, r1
 8000190:	d301      	bcc.n	8000196 <__udivsi3+0x8e>
 8000192:	024b      	lsls	r3, r1, #9
 8000194:	1ac0      	subs	r0, r0, r3
 8000196:	4152      	adcs	r2, r2
 8000198:	0a03      	lsrs	r3, r0, #8
 800019a:	428b      	cmp	r3, r1
 800019c:	d301      	bcc.n	80001a2 <__udivsi3+0x9a>
 800019e:	020b      	lsls	r3, r1, #8
 80001a0:	1ac0      	subs	r0, r0, r3
 80001a2:	4152      	adcs	r2, r2
 80001a4:	d2cd      	bcs.n	8000142 <__udivsi3+0x3a>
 80001a6:	09c3      	lsrs	r3, r0, #7
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d301      	bcc.n	80001b0 <__udivsi3+0xa8>
 80001ac:	01cb      	lsls	r3, r1, #7
 80001ae:	1ac0      	subs	r0, r0, r3
 80001b0:	4152      	adcs	r2, r2
 80001b2:	0983      	lsrs	r3, r0, #6
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d301      	bcc.n	80001bc <__udivsi3+0xb4>
 80001b8:	018b      	lsls	r3, r1, #6
 80001ba:	1ac0      	subs	r0, r0, r3
 80001bc:	4152      	adcs	r2, r2
 80001be:	0943      	lsrs	r3, r0, #5
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d301      	bcc.n	80001c8 <__udivsi3+0xc0>
 80001c4:	014b      	lsls	r3, r1, #5
 80001c6:	1ac0      	subs	r0, r0, r3
 80001c8:	4152      	adcs	r2, r2
 80001ca:	0903      	lsrs	r3, r0, #4
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d301      	bcc.n	80001d4 <__udivsi3+0xcc>
 80001d0:	010b      	lsls	r3, r1, #4
 80001d2:	1ac0      	subs	r0, r0, r3
 80001d4:	4152      	adcs	r2, r2
 80001d6:	08c3      	lsrs	r3, r0, #3
 80001d8:	428b      	cmp	r3, r1
 80001da:	d301      	bcc.n	80001e0 <__udivsi3+0xd8>
 80001dc:	00cb      	lsls	r3, r1, #3
 80001de:	1ac0      	subs	r0, r0, r3
 80001e0:	4152      	adcs	r2, r2
 80001e2:	0883      	lsrs	r3, r0, #2
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d301      	bcc.n	80001ec <__udivsi3+0xe4>
 80001e8:	008b      	lsls	r3, r1, #2
 80001ea:	1ac0      	subs	r0, r0, r3
 80001ec:	4152      	adcs	r2, r2
 80001ee:	0843      	lsrs	r3, r0, #1
 80001f0:	428b      	cmp	r3, r1
 80001f2:	d301      	bcc.n	80001f8 <__udivsi3+0xf0>
 80001f4:	004b      	lsls	r3, r1, #1
 80001f6:	1ac0      	subs	r0, r0, r3
 80001f8:	4152      	adcs	r2, r2
 80001fa:	1a41      	subs	r1, r0, r1
 80001fc:	d200      	bcs.n	8000200 <__udivsi3+0xf8>
 80001fe:	4601      	mov	r1, r0
 8000200:	4152      	adcs	r2, r2
 8000202:	4610      	mov	r0, r2
 8000204:	4770      	bx	lr
 8000206:	e7ff      	b.n	8000208 <__udivsi3+0x100>
 8000208:	b501      	push	{r0, lr}
 800020a:	2000      	movs	r0, #0
 800020c:	f000 f806 	bl	800021c <__aeabi_idiv0>
 8000210:	bd02      	pop	{r1, pc}
 8000212:	46c0      	nop			; (mov r8, r8)

08000214 <__aeabi_uidivmod>:
 8000214:	2900      	cmp	r1, #0
 8000216:	d0f7      	beq.n	8000208 <__udivsi3+0x100>
 8000218:	e776      	b.n	8000108 <__udivsi3>
 800021a:	4770      	bx	lr

0800021c <__aeabi_idiv0>:
 800021c:	4770      	bx	lr
 800021e:	46c0      	nop			; (mov r8, r8)

08000220 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000220:	b580      	push	{r7, lr}
 8000222:	b082      	sub	sp, #8
 8000224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000226:	f000 fc40 	bl	8000aaa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800022a:	f000 f885 	bl	8000338 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800022e:	f000 f9af 	bl	8000590 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000232:	f000 f8c5 	bl	80003c0 <MX_ADC1_Init>
  MX_I2C1_Init();
 8000236:	f000 f92d 	bl	8000494 <MX_I2C1_Init>
  MX_SPI1_Init();
 800023a:	f000 f96b 	bl	8000514 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  HAL_GPIO_WritePin(DIV_EN_GPIO_Port, DIV_EN_Pin, 0);
 800023e:	2380      	movs	r3, #128	; 0x80
 8000240:	021b      	lsls	r3, r3, #8
 8000242:	4835      	ldr	r0, [pc, #212]	; (8000318 <main+0xf8>)
 8000244:	2200      	movs	r2, #0
 8000246:	0019      	movs	r1, r3
 8000248:	f001 fd06 	bl	8001c58 <HAL_GPIO_WritePin>
  HAL_Delay(1);
 800024c:	2001      	movs	r0, #1
 800024e:	f000 fca9 	bl	8000ba4 <HAL_Delay>

  //power on and clear LEDs
  LED_init();
 8000252:	f000 fa2d 	bl	80006b0 <LED_init>





	  HAL_ADC_Start(&hadc1);
 8000256:	4b31      	ldr	r3, [pc, #196]	; (800031c <main+0xfc>)
 8000258:	0018      	movs	r0, r3
 800025a:	f000 ffa3 	bl	80011a4 <HAL_ADC_Start>
	  HAL_Delay(10);
 800025e:	200a      	movs	r0, #10
 8000260:	f000 fca0 	bl	8000ba4 <HAL_Delay>
	  HAL_ADC_PollForConversion(&hadc1, 1000);
 8000264:	23fa      	movs	r3, #250	; 0xfa
 8000266:	009a      	lsls	r2, r3, #2
 8000268:	4b2c      	ldr	r3, [pc, #176]	; (800031c <main+0xfc>)
 800026a:	0011      	movs	r1, r2
 800026c:	0018      	movs	r0, r3
 800026e:	f000 ffe7 	bl	8001240 <HAL_ADC_PollForConversion>
	  ADC_raw = HAL_ADC_GetValue(&hadc1);
 8000272:	4b2a      	ldr	r3, [pc, #168]	; (800031c <main+0xfc>)
 8000274:	0018      	movs	r0, r3
 8000276:	f001 f871 	bl	800135c <HAL_ADC_GetValue>
 800027a:	0003      	movs	r3, r0
 800027c:	b29a      	uxth	r2, r3
 800027e:	4b28      	ldr	r3, [pc, #160]	; (8000320 <main+0x100>)
 8000280:	801a      	strh	r2, [r3, #0]

	  if (ADC_raw < 2975){
 8000282:	4b27      	ldr	r3, [pc, #156]	; (8000320 <main+0x100>)
 8000284:	881b      	ldrh	r3, [r3, #0]
 8000286:	4a27      	ldr	r2, [pc, #156]	; (8000324 <main+0x104>)
 8000288:	4293      	cmp	r3, r2
 800028a:	d806      	bhi.n	800029a <main+0x7a>
		  //tx_buffer[] = {0b1110010, 0, 1, 0};
		  tx_buffer[2] = 0;
 800028c:	4b26      	ldr	r3, [pc, #152]	; (8000328 <main+0x108>)
 800028e:	2200      	movs	r2, #0
 8000290:	709a      	strb	r2, [r3, #2]
		  tx_buffer[3] = 1;
 8000292:	4b25      	ldr	r3, [pc, #148]	; (8000328 <main+0x108>)
 8000294:	2201      	movs	r2, #1
 8000296:	70da      	strb	r2, [r3, #3]
 8000298:	e005      	b.n	80002a6 <main+0x86>
	  }
	  else{
		  tx_buffer[2] = 1;
 800029a:	4b23      	ldr	r3, [pc, #140]	; (8000328 <main+0x108>)
 800029c:	2201      	movs	r2, #1
 800029e:	709a      	strb	r2, [r3, #2]
		  tx_buffer[3] = 0;
 80002a0:	4b21      	ldr	r3, [pc, #132]	; (8000328 <main+0x108>)
 80002a2:	2200      	movs	r2, #0
 80002a4:	70da      	strb	r2, [r3, #3]





	  tx_start_frame();
 80002a6:	f000 fa39 	bl	800071c <tx_start_frame>

	  for (uint8_t i = 0; i <= numLED; i++) {
 80002aa:	1dfb      	adds	r3, r7, #7
 80002ac:	2200      	movs	r2, #0
 80002ae:	701a      	strb	r2, [r3, #0]
 80002b0:	e017      	b.n	80002e2 <main+0xc2>

		  if (i == LED_index){
 80002b2:	4b1e      	ldr	r3, [pc, #120]	; (800032c <main+0x10c>)
 80002b4:	781b      	ldrb	r3, [r3, #0]
 80002b6:	1dfa      	adds	r2, r7, #7
 80002b8:	7812      	ldrb	r2, [r2, #0]
 80002ba:	429a      	cmp	r2, r3
 80002bc:	d106      	bne.n	80002cc <main+0xac>
			  HAL_SPI_Transmit(&hspi1, tx_buffer2, 4, 100);
 80002be:	491c      	ldr	r1, [pc, #112]	; (8000330 <main+0x110>)
 80002c0:	481c      	ldr	r0, [pc, #112]	; (8000334 <main+0x114>)
 80002c2:	2364      	movs	r3, #100	; 0x64
 80002c4:	2204      	movs	r2, #4
 80002c6:	f002 faf9 	bl	80028bc <HAL_SPI_Transmit>
 80002ca:	e005      	b.n	80002d8 <main+0xb8>
		  }

		  else{
			  HAL_SPI_Transmit(&hspi1, tx_buffer, 4, 100);
 80002cc:	4916      	ldr	r1, [pc, #88]	; (8000328 <main+0x108>)
 80002ce:	4819      	ldr	r0, [pc, #100]	; (8000334 <main+0x114>)
 80002d0:	2364      	movs	r3, #100	; 0x64
 80002d2:	2204      	movs	r2, #4
 80002d4:	f002 faf2 	bl	80028bc <HAL_SPI_Transmit>
	  for (uint8_t i = 0; i <= numLED; i++) {
 80002d8:	1dfb      	adds	r3, r7, #7
 80002da:	781a      	ldrb	r2, [r3, #0]
 80002dc:	1dfb      	adds	r3, r7, #7
 80002de:	3201      	adds	r2, #1
 80002e0:	701a      	strb	r2, [r3, #0]
 80002e2:	2254      	movs	r2, #84	; 0x54
 80002e4:	1dfb      	adds	r3, r7, #7
 80002e6:	781b      	ldrb	r3, [r3, #0]
 80002e8:	4293      	cmp	r3, r2
 80002ea:	d9e2      	bls.n	80002b2 <main+0x92>
		  }
	  }

	  tx_end_frame();
 80002ec:	f000 fa26 	bl	800073c <tx_end_frame>
	  HAL_Delay(50);
 80002f0:	2032      	movs	r0, #50	; 0x32
 80002f2:	f000 fc57 	bl	8000ba4 <HAL_Delay>

	  if (LED_index >= numLED){
 80002f6:	4b0d      	ldr	r3, [pc, #52]	; (800032c <main+0x10c>)
 80002f8:	781b      	ldrb	r3, [r3, #0]
 80002fa:	2254      	movs	r2, #84	; 0x54
 80002fc:	4293      	cmp	r3, r2
 80002fe:	d303      	bcc.n	8000308 <main+0xe8>
		  LED_index = 0;
 8000300:	4b0a      	ldr	r3, [pc, #40]	; (800032c <main+0x10c>)
 8000302:	2200      	movs	r2, #0
 8000304:	701a      	strb	r2, [r3, #0]
 8000306:	e7a6      	b.n	8000256 <main+0x36>
	  }
	  else{
		  LED_index++;
 8000308:	4b08      	ldr	r3, [pc, #32]	; (800032c <main+0x10c>)
 800030a:	781b      	ldrb	r3, [r3, #0]
 800030c:	3301      	adds	r3, #1
 800030e:	b2da      	uxtb	r2, r3
 8000310:	4b06      	ldr	r3, [pc, #24]	; (800032c <main+0x10c>)
 8000312:	701a      	strb	r2, [r3, #0]
	  HAL_ADC_Start(&hadc1);
 8000314:	e79f      	b.n	8000256 <main+0x36>
 8000316:	46c0      	nop			; (mov r8, r8)
 8000318:	50000800 	.word	0x50000800
 800031c:	20000034 	.word	0x20000034
 8000320:	20000152 	.word	0x20000152
 8000324:	00000b9e 	.word	0x00000b9e
 8000328:	20000004 	.word	0x20000004
 800032c:	20000150 	.word	0x20000150
 8000330:	20000008 	.word	0x20000008
 8000334:	200000ec 	.word	0x200000ec

08000338 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000338:	b590      	push	{r4, r7, lr}
 800033a:	b08d      	sub	sp, #52	; 0x34
 800033c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800033e:	2414      	movs	r4, #20
 8000340:	193b      	adds	r3, r7, r4
 8000342:	0018      	movs	r0, r3
 8000344:	231c      	movs	r3, #28
 8000346:	001a      	movs	r2, r3
 8000348:	2100      	movs	r1, #0
 800034a:	f002 fdb7 	bl	8002ebc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800034e:	003b      	movs	r3, r7
 8000350:	0018      	movs	r0, r3
 8000352:	2314      	movs	r3, #20
 8000354:	001a      	movs	r2, r3
 8000356:	2100      	movs	r1, #0
 8000358:	f002 fdb0 	bl	8002ebc <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800035c:	193b      	adds	r3, r7, r4
 800035e:	2202      	movs	r2, #2
 8000360:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000362:	193b      	adds	r3, r7, r4
 8000364:	2280      	movs	r2, #128	; 0x80
 8000366:	0052      	lsls	r2, r2, #1
 8000368:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV8;
 800036a:	193b      	adds	r3, r7, r4
 800036c:	22c0      	movs	r2, #192	; 0xc0
 800036e:	0152      	lsls	r2, r2, #5
 8000370:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000372:	193b      	adds	r3, r7, r4
 8000374:	2240      	movs	r2, #64	; 0x40
 8000376:	615a      	str	r2, [r3, #20]
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000378:	193b      	adds	r3, r7, r4
 800037a:	0018      	movs	r0, r3
 800037c:	f001 fdc8 	bl	8001f10 <HAL_RCC_OscConfig>
 8000380:	1e03      	subs	r3, r0, #0
 8000382:	d001      	beq.n	8000388 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000384:	f000 f9fa 	bl	800077c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000388:	003b      	movs	r3, r7
 800038a:	2207      	movs	r2, #7
 800038c:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800038e:	003b      	movs	r3, r7
 8000390:	2200      	movs	r2, #0
 8000392:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000394:	003b      	movs	r3, r7
 8000396:	2200      	movs	r2, #0
 8000398:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800039a:	003b      	movs	r3, r7
 800039c:	2200      	movs	r2, #0
 800039e:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80003a0:	003b      	movs	r3, r7
 80003a2:	2200      	movs	r2, #0
 80003a4:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 80003a6:	003b      	movs	r3, r7
 80003a8:	2100      	movs	r1, #0
 80003aa:	0018      	movs	r0, r3
 80003ac:	f001 ff94 	bl	80022d8 <HAL_RCC_ClockConfig>
 80003b0:	1e03      	subs	r3, r0, #0
 80003b2:	d001      	beq.n	80003b8 <SystemClock_Config+0x80>
  {
    Error_Handler();
 80003b4:	f000 f9e2 	bl	800077c <Error_Handler>
  }
}
 80003b8:	46c0      	nop			; (mov r8, r8)
 80003ba:	46bd      	mov	sp, r7
 80003bc:	b00d      	add	sp, #52	; 0x34
 80003be:	bd90      	pop	{r4, r7, pc}

080003c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80003c0:	b580      	push	{r7, lr}
 80003c2:	b084      	sub	sp, #16
 80003c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80003c6:	1d3b      	adds	r3, r7, #4
 80003c8:	0018      	movs	r0, r3
 80003ca:	230c      	movs	r3, #12
 80003cc:	001a      	movs	r2, r3
 80003ce:	2100      	movs	r1, #0
 80003d0:	f002 fd74 	bl	8002ebc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80003d4:	4b2d      	ldr	r3, [pc, #180]	; (800048c <MX_ADC1_Init+0xcc>)
 80003d6:	4a2e      	ldr	r2, [pc, #184]	; (8000490 <MX_ADC1_Init+0xd0>)
 80003d8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 80003da:	4b2c      	ldr	r3, [pc, #176]	; (800048c <MX_ADC1_Init+0xcc>)
 80003dc:	22c0      	movs	r2, #192	; 0xc0
 80003de:	0612      	lsls	r2, r2, #24
 80003e0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80003e2:	4b2a      	ldr	r3, [pc, #168]	; (800048c <MX_ADC1_Init+0xcc>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80003e8:	4b28      	ldr	r3, [pc, #160]	; (800048c <MX_ADC1_Init+0xcc>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80003ee:	4b27      	ldr	r3, [pc, #156]	; (800048c <MX_ADC1_Init+0xcc>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80003f4:	4b25      	ldr	r3, [pc, #148]	; (800048c <MX_ADC1_Init+0xcc>)
 80003f6:	2204      	movs	r2, #4
 80003f8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = ENABLE;
 80003fa:	4b24      	ldr	r3, [pc, #144]	; (800048c <MX_ADC1_Init+0xcc>)
 80003fc:	2201      	movs	r2, #1
 80003fe:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = ENABLE;
 8000400:	4b22      	ldr	r3, [pc, #136]	; (800048c <MX_ADC1_Init+0xcc>)
 8000402:	2201      	movs	r2, #1
 8000404:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000406:	4b21      	ldr	r3, [pc, #132]	; (800048c <MX_ADC1_Init+0xcc>)
 8000408:	2200      	movs	r2, #0
 800040a:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 800040c:	4b1f      	ldr	r3, [pc, #124]	; (800048c <MX_ADC1_Init+0xcc>)
 800040e:	2201      	movs	r2, #1
 8000410:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000412:	4b1e      	ldr	r3, [pc, #120]	; (800048c <MX_ADC1_Init+0xcc>)
 8000414:	2220      	movs	r2, #32
 8000416:	2100      	movs	r1, #0
 8000418:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800041a:	4b1c      	ldr	r3, [pc, #112]	; (800048c <MX_ADC1_Init+0xcc>)
 800041c:	2200      	movs	r2, #0
 800041e:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000420:	4b1a      	ldr	r3, [pc, #104]	; (800048c <MX_ADC1_Init+0xcc>)
 8000422:	2200      	movs	r2, #0
 8000424:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000426:	4b19      	ldr	r3, [pc, #100]	; (800048c <MX_ADC1_Init+0xcc>)
 8000428:	222c      	movs	r2, #44	; 0x2c
 800042a:	2100      	movs	r1, #0
 800042c:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 800042e:	4b17      	ldr	r3, [pc, #92]	; (800048c <MX_ADC1_Init+0xcc>)
 8000430:	2200      	movs	r2, #0
 8000432:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000434:	4b15      	ldr	r3, [pc, #84]	; (800048c <MX_ADC1_Init+0xcc>)
 8000436:	2200      	movs	r2, #0
 8000438:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800043a:	4b14      	ldr	r3, [pc, #80]	; (800048c <MX_ADC1_Init+0xcc>)
 800043c:	2200      	movs	r2, #0
 800043e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000440:	4b12      	ldr	r3, [pc, #72]	; (800048c <MX_ADC1_Init+0xcc>)
 8000442:	223c      	movs	r2, #60	; 0x3c
 8000444:	2100      	movs	r1, #0
 8000446:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000448:	4b10      	ldr	r3, [pc, #64]	; (800048c <MX_ADC1_Init+0xcc>)
 800044a:	2200      	movs	r2, #0
 800044c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800044e:	4b0f      	ldr	r3, [pc, #60]	; (800048c <MX_ADC1_Init+0xcc>)
 8000450:	0018      	movs	r0, r3
 8000452:	f000 fd01 	bl	8000e58 <HAL_ADC_Init>
 8000456:	1e03      	subs	r3, r0, #0
 8000458:	d001      	beq.n	800045e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800045a:	f000 f98f 	bl	800077c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	2201      	movs	r2, #1
 8000462:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000464:	1d3b      	adds	r3, r7, #4
 8000466:	2200      	movs	r2, #0
 8000468:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800046a:	1d3b      	adds	r3, r7, #4
 800046c:	2200      	movs	r2, #0
 800046e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000470:	1d3a      	adds	r2, r7, #4
 8000472:	4b06      	ldr	r3, [pc, #24]	; (800048c <MX_ADC1_Init+0xcc>)
 8000474:	0011      	movs	r1, r2
 8000476:	0018      	movs	r0, r3
 8000478:	f000 ff7c 	bl	8001374 <HAL_ADC_ConfigChannel>
 800047c:	1e03      	subs	r3, r0, #0
 800047e:	d001      	beq.n	8000484 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000480:	f000 f97c 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000484:	46c0      	nop			; (mov r8, r8)
 8000486:	46bd      	mov	sp, r7
 8000488:	b004      	add	sp, #16
 800048a:	bd80      	pop	{r7, pc}
 800048c:	20000034 	.word	0x20000034
 8000490:	40012400 	.word	0x40012400

08000494 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000498:	4b1b      	ldr	r3, [pc, #108]	; (8000508 <MX_I2C1_Init+0x74>)
 800049a:	4a1c      	ldr	r2, [pc, #112]	; (800050c <MX_I2C1_Init+0x78>)
 800049c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00101520;
 800049e:	4b1a      	ldr	r3, [pc, #104]	; (8000508 <MX_I2C1_Init+0x74>)
 80004a0:	4a1b      	ldr	r2, [pc, #108]	; (8000510 <MX_I2C1_Init+0x7c>)
 80004a2:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80004a4:	4b18      	ldr	r3, [pc, #96]	; (8000508 <MX_I2C1_Init+0x74>)
 80004a6:	2200      	movs	r2, #0
 80004a8:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80004aa:	4b17      	ldr	r3, [pc, #92]	; (8000508 <MX_I2C1_Init+0x74>)
 80004ac:	2201      	movs	r2, #1
 80004ae:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80004b0:	4b15      	ldr	r3, [pc, #84]	; (8000508 <MX_I2C1_Init+0x74>)
 80004b2:	2200      	movs	r2, #0
 80004b4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80004b6:	4b14      	ldr	r3, [pc, #80]	; (8000508 <MX_I2C1_Init+0x74>)
 80004b8:	2200      	movs	r2, #0
 80004ba:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80004bc:	4b12      	ldr	r3, [pc, #72]	; (8000508 <MX_I2C1_Init+0x74>)
 80004be:	2200      	movs	r2, #0
 80004c0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80004c2:	4b11      	ldr	r3, [pc, #68]	; (8000508 <MX_I2C1_Init+0x74>)
 80004c4:	2200      	movs	r2, #0
 80004c6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80004c8:	4b0f      	ldr	r3, [pc, #60]	; (8000508 <MX_I2C1_Init+0x74>)
 80004ca:	2200      	movs	r2, #0
 80004cc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80004ce:	4b0e      	ldr	r3, [pc, #56]	; (8000508 <MX_I2C1_Init+0x74>)
 80004d0:	0018      	movs	r0, r3
 80004d2:	f001 fbdf 	bl	8001c94 <HAL_I2C_Init>
 80004d6:	1e03      	subs	r3, r0, #0
 80004d8:	d001      	beq.n	80004de <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80004da:	f000 f94f 	bl	800077c <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80004de:	4b0a      	ldr	r3, [pc, #40]	; (8000508 <MX_I2C1_Init+0x74>)
 80004e0:	2100      	movs	r1, #0
 80004e2:	0018      	movs	r0, r3
 80004e4:	f001 fc7c 	bl	8001de0 <HAL_I2CEx_ConfigAnalogFilter>
 80004e8:	1e03      	subs	r3, r0, #0
 80004ea:	d001      	beq.n	80004f0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f946 	bl	800077c <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80004f0:	4b05      	ldr	r3, [pc, #20]	; (8000508 <MX_I2C1_Init+0x74>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	0018      	movs	r0, r3
 80004f6:	f001 fcbf 	bl	8001e78 <HAL_I2CEx_ConfigDigitalFilter>
 80004fa:	1e03      	subs	r3, r0, #0
 80004fc:	d001      	beq.n	8000502 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80004fe:	f000 f93d 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000502:	46c0      	nop			; (mov r8, r8)
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	20000098 	.word	0x20000098
 800050c:	40005400 	.word	0x40005400
 8000510:	00101520 	.word	0x00101520

08000514 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000518:	4b1b      	ldr	r3, [pc, #108]	; (8000588 <MX_SPI1_Init+0x74>)
 800051a:	4a1c      	ldr	r2, [pc, #112]	; (800058c <MX_SPI1_Init+0x78>)
 800051c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800051e:	4b1a      	ldr	r3, [pc, #104]	; (8000588 <MX_SPI1_Init+0x74>)
 8000520:	2282      	movs	r2, #130	; 0x82
 8000522:	0052      	lsls	r2, r2, #1
 8000524:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000526:	4b18      	ldr	r3, [pc, #96]	; (8000588 <MX_SPI1_Init+0x74>)
 8000528:	2200      	movs	r2, #0
 800052a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800052c:	4b16      	ldr	r3, [pc, #88]	; (8000588 <MX_SPI1_Init+0x74>)
 800052e:	22e0      	movs	r2, #224	; 0xe0
 8000530:	00d2      	lsls	r2, r2, #3
 8000532:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000534:	4b14      	ldr	r3, [pc, #80]	; (8000588 <MX_SPI1_Init+0x74>)
 8000536:	2200      	movs	r2, #0
 8000538:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800053a:	4b13      	ldr	r3, [pc, #76]	; (8000588 <MX_SPI1_Init+0x74>)
 800053c:	2200      	movs	r2, #0
 800053e:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000540:	4b11      	ldr	r3, [pc, #68]	; (8000588 <MX_SPI1_Init+0x74>)
 8000542:	2280      	movs	r2, #128	; 0x80
 8000544:	0092      	lsls	r2, r2, #2
 8000546:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000548:	4b0f      	ldr	r3, [pc, #60]	; (8000588 <MX_SPI1_Init+0x74>)
 800054a:	2200      	movs	r2, #0
 800054c:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800054e:	4b0e      	ldr	r3, [pc, #56]	; (8000588 <MX_SPI1_Init+0x74>)
 8000550:	2200      	movs	r2, #0
 8000552:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000554:	4b0c      	ldr	r3, [pc, #48]	; (8000588 <MX_SPI1_Init+0x74>)
 8000556:	2200      	movs	r2, #0
 8000558:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800055a:	4b0b      	ldr	r3, [pc, #44]	; (8000588 <MX_SPI1_Init+0x74>)
 800055c:	2200      	movs	r2, #0
 800055e:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8000560:	4b09      	ldr	r3, [pc, #36]	; (8000588 <MX_SPI1_Init+0x74>)
 8000562:	2207      	movs	r2, #7
 8000564:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <MX_SPI1_Init+0x74>)
 8000568:	2200      	movs	r2, #0
 800056a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <MX_SPI1_Init+0x74>)
 800056e:	2208      	movs	r2, #8
 8000570:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <MX_SPI1_Init+0x74>)
 8000574:	0018      	movs	r0, r3
 8000576:	f002 f8e9 	bl	800274c <HAL_SPI_Init>
 800057a:	1e03      	subs	r3, r0, #0
 800057c:	d001      	beq.n	8000582 <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800057e:	f000 f8fd 	bl	800077c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000582:	46c0      	nop			; (mov r8, r8)
 8000584:	46bd      	mov	sp, r7
 8000586:	bd80      	pop	{r7, pc}
 8000588:	200000ec 	.word	0x200000ec
 800058c:	40013000 	.word	0x40013000

08000590 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000590:	b590      	push	{r4, r7, lr}
 8000592:	b089      	sub	sp, #36	; 0x24
 8000594:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000596:	240c      	movs	r4, #12
 8000598:	193b      	adds	r3, r7, r4
 800059a:	0018      	movs	r0, r3
 800059c:	2314      	movs	r3, #20
 800059e:	001a      	movs	r2, r3
 80005a0:	2100      	movs	r1, #0
 80005a2:	f002 fc8b 	bl	8002ebc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005a6:	4b3f      	ldr	r3, [pc, #252]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005a8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005aa:	4b3e      	ldr	r3, [pc, #248]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005ac:	2104      	movs	r1, #4
 80005ae:	430a      	orrs	r2, r1
 80005b0:	635a      	str	r2, [r3, #52]	; 0x34
 80005b2:	4b3c      	ldr	r3, [pc, #240]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005b6:	2204      	movs	r2, #4
 80005b8:	4013      	ands	r3, r2
 80005ba:	60bb      	str	r3, [r7, #8]
 80005bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005be:	4b39      	ldr	r3, [pc, #228]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005c2:	4b38      	ldr	r3, [pc, #224]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005c4:	2101      	movs	r1, #1
 80005c6:	430a      	orrs	r2, r1
 80005c8:	635a      	str	r2, [r3, #52]	; 0x34
 80005ca:	4b36      	ldr	r3, [pc, #216]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005ce:	2201      	movs	r2, #1
 80005d0:	4013      	ands	r3, r2
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80005d6:	4b33      	ldr	r3, [pc, #204]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80005da:	4b32      	ldr	r3, [pc, #200]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005dc:	2102      	movs	r1, #2
 80005de:	430a      	orrs	r2, r1
 80005e0:	635a      	str	r2, [r3, #52]	; 0x34
 80005e2:	4b30      	ldr	r3, [pc, #192]	; (80006a4 <MX_GPIO_Init+0x114>)
 80005e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80005e6:	2202      	movs	r2, #2
 80005e8:	4013      	ands	r3, r2
 80005ea:	603b      	str	r3, [r7, #0]
 80005ec:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(DIV_EN_GPIO_Port, DIV_EN_Pin, GPIO_PIN_RESET);
 80005ee:	2380      	movs	r3, #128	; 0x80
 80005f0:	021b      	lsls	r3, r3, #8
 80005f2:	482d      	ldr	r0, [pc, #180]	; (80006a8 <MX_GPIO_Init+0x118>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	0019      	movs	r1, r3
 80005f8:	f001 fb2e 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, GPIO_PIN_RESET);
 80005fc:	23a0      	movs	r3, #160	; 0xa0
 80005fe:	05db      	lsls	r3, r3, #23
 8000600:	2200      	movs	r2, #0
 8000602:	2108      	movs	r1, #8
 8000604:	0018      	movs	r0, r3
 8000606:	f001 fb27 	bl	8001c58 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : DIV_EN_Pin */
  GPIO_InitStruct.Pin = DIV_EN_Pin;
 800060a:	193b      	adds	r3, r7, r4
 800060c:	2280      	movs	r2, #128	; 0x80
 800060e:	0212      	lsls	r2, r2, #8
 8000610:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000612:	193b      	adds	r3, r7, r4
 8000614:	2201      	movs	r2, #1
 8000616:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000618:	193b      	adds	r3, r7, r4
 800061a:	2200      	movs	r2, #0
 800061c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800061e:	193b      	adds	r3, r7, r4
 8000620:	2200      	movs	r2, #0
 8000622:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(DIV_EN_GPIO_Port, &GPIO_InitStruct);
 8000624:	193b      	adds	r3, r7, r4
 8000626:	4a20      	ldr	r2, [pc, #128]	; (80006a8 <MX_GPIO_Init+0x118>)
 8000628:	0019      	movs	r1, r3
 800062a:	0010      	movs	r0, r2
 800062c:	f001 f9aa 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_EN_Pin */
  GPIO_InitStruct.Pin = LED_EN_Pin;
 8000630:	193b      	adds	r3, r7, r4
 8000632:	2208      	movs	r2, #8
 8000634:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000636:	193b      	adds	r3, r7, r4
 8000638:	2201      	movs	r2, #1
 800063a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800063c:	193b      	adds	r3, r7, r4
 800063e:	2200      	movs	r2, #0
 8000640:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000642:	193b      	adds	r3, r7, r4
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_EN_GPIO_Port, &GPIO_InitStruct);
 8000648:	193a      	adds	r2, r7, r4
 800064a:	23a0      	movs	r3, #160	; 0xa0
 800064c:	05db      	lsls	r3, r3, #23
 800064e:	0011      	movs	r1, r2
 8000650:	0018      	movs	r0, r3
 8000652:	f001 f997 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : BMI_INT_1_Pin BMI_INT_2_Pin EXT_RTC_INT_Pin */
  GPIO_InitStruct.Pin = BMI_INT_1_Pin|BMI_INT_2_Pin|EXT_RTC_INT_Pin;
 8000656:	193b      	adds	r3, r7, r4
 8000658:	228c      	movs	r2, #140	; 0x8c
 800065a:	0152      	lsls	r2, r2, #5
 800065c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800065e:	193b      	adds	r3, r7, r4
 8000660:	4a12      	ldr	r2, [pc, #72]	; (80006ac <MX_GPIO_Init+0x11c>)
 8000662:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	193b      	adds	r3, r7, r4
 8000666:	2200      	movs	r2, #0
 8000668:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800066a:	193a      	adds	r2, r7, r4
 800066c:	23a0      	movs	r3, #160	; 0xa0
 800066e:	05db      	lsls	r3, r3, #23
 8000670:	0011      	movs	r1, r2
 8000672:	0018      	movs	r0, r3
 8000674:	f001 f986 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : CHRG_Pin */
  GPIO_InitStruct.Pin = CHRG_Pin;
 8000678:	0021      	movs	r1, r4
 800067a:	187b      	adds	r3, r7, r1
 800067c:	2280      	movs	r2, #128	; 0x80
 800067e:	0112      	lsls	r2, r2, #4
 8000680:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000682:	187b      	adds	r3, r7, r1
 8000684:	2200      	movs	r2, #0
 8000686:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000688:	187b      	adds	r3, r7, r1
 800068a:	2200      	movs	r2, #0
 800068c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(CHRG_GPIO_Port, &GPIO_InitStruct);
 800068e:	187a      	adds	r2, r7, r1
 8000690:	23a0      	movs	r3, #160	; 0xa0
 8000692:	05db      	lsls	r3, r3, #23
 8000694:	0011      	movs	r1, r2
 8000696:	0018      	movs	r0, r3
 8000698:	f001 f974 	bl	8001984 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800069c:	46c0      	nop			; (mov r8, r8)
 800069e:	46bd      	mov	sp, r7
 80006a0:	b009      	add	sp, #36	; 0x24
 80006a2:	bd90      	pop	{r4, r7, pc}
 80006a4:	40021000 	.word	0x40021000
 80006a8:	50000800 	.word	0x50000800
 80006ac:	10110000 	.word	0x10110000

080006b0 <LED_init>:

/* USER CODE BEGIN 4 */
void LED_init(void)
{
 80006b0:	b580      	push	{r7, lr}
 80006b2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LED_EN_GPIO_Port, LED_EN_Pin, 1);
 80006b4:	23a0      	movs	r3, #160	; 0xa0
 80006b6:	05db      	lsls	r3, r3, #23
 80006b8:	2201      	movs	r2, #1
 80006ba:	2108      	movs	r1, #8
 80006bc:	0018      	movs	r0, r3
 80006be:	f001 facb 	bl	8001c58 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80006c2:	200a      	movs	r0, #10
 80006c4:	f000 fa6e 	bl	8000ba4 <HAL_Delay>
	LED_clear();
 80006c8:	f000 f804 	bl	80006d4 <LED_clear>
}
 80006cc:	46c0      	nop			; (mov r8, r8)
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
	...

080006d4 <LED_clear>:

void LED_clear(void)
{
 80006d4:	b580      	push	{r7, lr}
 80006d6:	b082      	sub	sp, #8
 80006d8:	af00      	add	r7, sp, #0
	tx_start_frame();
 80006da:	f000 f81f 	bl	800071c <tx_start_frame>
	for (uint8_t i = 0; i <= numLED; i++) HAL_SPI_Transmit(&hspi1, LED_clear_frames, 4, 100);
 80006de:	1dfb      	adds	r3, r7, #7
 80006e0:	2200      	movs	r2, #0
 80006e2:	701a      	strb	r2, [r3, #0]
 80006e4:	e00a      	b.n	80006fc <LED_clear+0x28>
 80006e6:	490b      	ldr	r1, [pc, #44]	; (8000714 <LED_clear+0x40>)
 80006e8:	480b      	ldr	r0, [pc, #44]	; (8000718 <LED_clear+0x44>)
 80006ea:	2364      	movs	r3, #100	; 0x64
 80006ec:	2204      	movs	r2, #4
 80006ee:	f002 f8e5 	bl	80028bc <HAL_SPI_Transmit>
 80006f2:	1dfb      	adds	r3, r7, #7
 80006f4:	781a      	ldrb	r2, [r3, #0]
 80006f6:	1dfb      	adds	r3, r7, #7
 80006f8:	3201      	adds	r2, #1
 80006fa:	701a      	strb	r2, [r3, #0]
 80006fc:	2254      	movs	r2, #84	; 0x54
 80006fe:	1dfb      	adds	r3, r7, #7
 8000700:	781b      	ldrb	r3, [r3, #0]
 8000702:	4293      	cmp	r3, r2
 8000704:	d9ef      	bls.n	80006e6 <LED_clear+0x12>
	tx_end_frame();
 8000706:	f000 f819 	bl	800073c <tx_end_frame>
}
 800070a:	46c0      	nop			; (mov r8, r8)
 800070c:	46bd      	mov	sp, r7
 800070e:	b002      	add	sp, #8
 8000710:	bd80      	pop	{r7, pc}
 8000712:	46c0      	nop			; (mov r8, r8)
 8000714:	20000000 	.word	0x20000000
 8000718:	200000ec 	.word	0x200000ec

0800071c <tx_start_frame>:

void tx_start_frame(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	af00      	add	r7, sp, #0
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&empty_frame, 1, 100);
 8000720:	4904      	ldr	r1, [pc, #16]	; (8000734 <tx_start_frame+0x18>)
 8000722:	4805      	ldr	r0, [pc, #20]	; (8000738 <tx_start_frame+0x1c>)
 8000724:	2364      	movs	r3, #100	; 0x64
 8000726:	2201      	movs	r2, #1
 8000728:	f002 f8c8 	bl	80028bc <HAL_SPI_Transmit>
}
 800072c:	46c0      	nop			; (mov r8, r8)
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	46c0      	nop			; (mov r8, r8)
 8000734:	08002f2c 	.word	0x08002f2c
 8000738:	200000ec 	.word	0x200000ec

0800073c <tx_end_frame>:

void tx_end_frame(void)
{
 800073c:	b580      	push	{r7, lr}
 800073e:	b082      	sub	sp, #8
 8000740:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i <= 6; i++) HAL_SPI_Transmit(&hspi1, (uint8_t *)&empty_frame, 1, 100);
 8000742:	1dfb      	adds	r3, r7, #7
 8000744:	2200      	movs	r2, #0
 8000746:	701a      	strb	r2, [r3, #0]
 8000748:	e00a      	b.n	8000760 <tx_end_frame+0x24>
 800074a:	490a      	ldr	r1, [pc, #40]	; (8000774 <tx_end_frame+0x38>)
 800074c:	480a      	ldr	r0, [pc, #40]	; (8000778 <tx_end_frame+0x3c>)
 800074e:	2364      	movs	r3, #100	; 0x64
 8000750:	2201      	movs	r2, #1
 8000752:	f002 f8b3 	bl	80028bc <HAL_SPI_Transmit>
 8000756:	1dfb      	adds	r3, r7, #7
 8000758:	781a      	ldrb	r2, [r3, #0]
 800075a:	1dfb      	adds	r3, r7, #7
 800075c:	3201      	adds	r2, #1
 800075e:	701a      	strb	r2, [r3, #0]
 8000760:	1dfb      	adds	r3, r7, #7
 8000762:	781b      	ldrb	r3, [r3, #0]
 8000764:	2b06      	cmp	r3, #6
 8000766:	d9f0      	bls.n	800074a <tx_end_frame+0xe>
}
 8000768:	46c0      	nop			; (mov r8, r8)
 800076a:	46c0      	nop			; (mov r8, r8)
 800076c:	46bd      	mov	sp, r7
 800076e:	b002      	add	sp, #8
 8000770:	bd80      	pop	{r7, pc}
 8000772:	46c0      	nop			; (mov r8, r8)
 8000774:	08002f2c 	.word	0x08002f2c
 8000778:	200000ec 	.word	0x200000ec

0800077c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800077c:	b580      	push	{r7, lr}
 800077e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000780:	b672      	cpsid	i
}
 8000782:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000784:	e7fe      	b.n	8000784 <Error_Handler+0x8>
	...

08000788 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800078e:	4b0f      	ldr	r3, [pc, #60]	; (80007cc <HAL_MspInit+0x44>)
 8000790:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000792:	4b0e      	ldr	r3, [pc, #56]	; (80007cc <HAL_MspInit+0x44>)
 8000794:	2101      	movs	r1, #1
 8000796:	430a      	orrs	r2, r1
 8000798:	641a      	str	r2, [r3, #64]	; 0x40
 800079a:	4b0c      	ldr	r3, [pc, #48]	; (80007cc <HAL_MspInit+0x44>)
 800079c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800079e:	2201      	movs	r2, #1
 80007a0:	4013      	ands	r3, r2
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80007a6:	4b09      	ldr	r3, [pc, #36]	; (80007cc <HAL_MspInit+0x44>)
 80007a8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <HAL_MspInit+0x44>)
 80007ac:	2180      	movs	r1, #128	; 0x80
 80007ae:	0549      	lsls	r1, r1, #21
 80007b0:	430a      	orrs	r2, r1
 80007b2:	63da      	str	r2, [r3, #60]	; 0x3c
 80007b4:	4b05      	ldr	r3, [pc, #20]	; (80007cc <HAL_MspInit+0x44>)
 80007b6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80007b8:	2380      	movs	r3, #128	; 0x80
 80007ba:	055b      	lsls	r3, r3, #21
 80007bc:	4013      	ands	r3, r2
 80007be:	603b      	str	r3, [r7, #0]
 80007c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80007c2:	46c0      	nop			; (mov r8, r8)
 80007c4:	46bd      	mov	sp, r7
 80007c6:	b002      	add	sp, #8
 80007c8:	bd80      	pop	{r7, pc}
 80007ca:	46c0      	nop			; (mov r8, r8)
 80007cc:	40021000 	.word	0x40021000

080007d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80007d0:	b590      	push	{r4, r7, lr}
 80007d2:	b091      	sub	sp, #68	; 0x44
 80007d4:	af00      	add	r7, sp, #0
 80007d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007d8:	232c      	movs	r3, #44	; 0x2c
 80007da:	18fb      	adds	r3, r7, r3
 80007dc:	0018      	movs	r0, r3
 80007de:	2314      	movs	r3, #20
 80007e0:	001a      	movs	r2, r3
 80007e2:	2100      	movs	r1, #0
 80007e4:	f002 fb6a 	bl	8002ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007e8:	2410      	movs	r4, #16
 80007ea:	193b      	adds	r3, r7, r4
 80007ec:	0018      	movs	r0, r3
 80007ee:	231c      	movs	r3, #28
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f002 fb62 	bl	8002ebc <memset>
  if(hadc->Instance==ADC1)
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	4a20      	ldr	r2, [pc, #128]	; (8000880 <HAL_ADC_MspInit+0xb0>)
 80007fe:	4293      	cmp	r3, r2
 8000800:	d139      	bne.n	8000876 <HAL_ADC_MspInit+0xa6>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2280      	movs	r2, #128	; 0x80
 8000806:	01d2      	lsls	r2, r2, #7
 8000808:	601a      	str	r2, [r3, #0]
    PeriphClkInit.AdcClockSelection = RCC_ADCCLKSOURCE_SYSCLK;
 800080a:	193b      	adds	r3, r7, r4
 800080c:	2200      	movs	r2, #0
 800080e:	615a      	str	r2, [r3, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000810:	193b      	adds	r3, r7, r4
 8000812:	0018      	movs	r0, r3
 8000814:	f001 feac 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000818:	1e03      	subs	r3, r0, #0
 800081a:	d001      	beq.n	8000820 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 800081c:	f7ff ffae 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000820:	4b18      	ldr	r3, [pc, #96]	; (8000884 <HAL_ADC_MspInit+0xb4>)
 8000822:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000824:	4b17      	ldr	r3, [pc, #92]	; (8000884 <HAL_ADC_MspInit+0xb4>)
 8000826:	2180      	movs	r1, #128	; 0x80
 8000828:	0349      	lsls	r1, r1, #13
 800082a:	430a      	orrs	r2, r1
 800082c:	641a      	str	r2, [r3, #64]	; 0x40
 800082e:	4b15      	ldr	r3, [pc, #84]	; (8000884 <HAL_ADC_MspInit+0xb4>)
 8000830:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000832:	2380      	movs	r3, #128	; 0x80
 8000834:	035b      	lsls	r3, r3, #13
 8000836:	4013      	ands	r3, r2
 8000838:	60fb      	str	r3, [r7, #12]
 800083a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083c:	4b11      	ldr	r3, [pc, #68]	; (8000884 <HAL_ADC_MspInit+0xb4>)
 800083e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000840:	4b10      	ldr	r3, [pc, #64]	; (8000884 <HAL_ADC_MspInit+0xb4>)
 8000842:	2101      	movs	r1, #1
 8000844:	430a      	orrs	r2, r1
 8000846:	635a      	str	r2, [r3, #52]	; 0x34
 8000848:	4b0e      	ldr	r3, [pc, #56]	; (8000884 <HAL_ADC_MspInit+0xb4>)
 800084a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800084c:	2201      	movs	r2, #1
 800084e:	4013      	ands	r3, r2
 8000850:	60bb      	str	r3, [r7, #8]
 8000852:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = VBAT_MEAS_Pin;
 8000854:	212c      	movs	r1, #44	; 0x2c
 8000856:	187b      	adds	r3, r7, r1
 8000858:	2201      	movs	r2, #1
 800085a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800085c:	187b      	adds	r3, r7, r1
 800085e:	2203      	movs	r2, #3
 8000860:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	187b      	adds	r3, r7, r1
 8000864:	2200      	movs	r2, #0
 8000866:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(VBAT_MEAS_GPIO_Port, &GPIO_InitStruct);
 8000868:	187a      	adds	r2, r7, r1
 800086a:	23a0      	movs	r3, #160	; 0xa0
 800086c:	05db      	lsls	r3, r3, #23
 800086e:	0011      	movs	r1, r2
 8000870:	0018      	movs	r0, r3
 8000872:	f001 f887 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000876:	46c0      	nop			; (mov r8, r8)
 8000878:	46bd      	mov	sp, r7
 800087a:	b011      	add	sp, #68	; 0x44
 800087c:	bd90      	pop	{r4, r7, pc}
 800087e:	46c0      	nop			; (mov r8, r8)
 8000880:	40012400 	.word	0x40012400
 8000884:	40021000 	.word	0x40021000

08000888 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000888:	b590      	push	{r4, r7, lr}
 800088a:	b091      	sub	sp, #68	; 0x44
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000890:	232c      	movs	r3, #44	; 0x2c
 8000892:	18fb      	adds	r3, r7, r3
 8000894:	0018      	movs	r0, r3
 8000896:	2314      	movs	r3, #20
 8000898:	001a      	movs	r2, r3
 800089a:	2100      	movs	r1, #0
 800089c:	f002 fb0e 	bl	8002ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80008a0:	2410      	movs	r4, #16
 80008a2:	193b      	adds	r3, r7, r4
 80008a4:	0018      	movs	r0, r3
 80008a6:	231c      	movs	r3, #28
 80008a8:	001a      	movs	r2, r3
 80008aa:	2100      	movs	r1, #0
 80008ac:	f002 fb06 	bl	8002ebc <memset>
  if(hi2c->Instance==I2C1)
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	4a22      	ldr	r2, [pc, #136]	; (8000940 <HAL_I2C_MspInit+0xb8>)
 80008b6:	4293      	cmp	r3, r2
 80008b8:	d13d      	bne.n	8000936 <HAL_I2C_MspInit+0xae>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 80008ba:	193b      	adds	r3, r7, r4
 80008bc:	2240      	movs	r2, #64	; 0x40
 80008be:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80008c0:	193b      	adds	r3, r7, r4
 80008c2:	2200      	movs	r2, #0
 80008c4:	60da      	str	r2, [r3, #12]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008c6:	193b      	adds	r3, r7, r4
 80008c8:	0018      	movs	r0, r3
 80008ca:	f001 fe51 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 80008ce:	1e03      	subs	r3, r0, #0
 80008d0:	d001      	beq.n	80008d6 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 80008d2:	f7ff ff53 	bl	800077c <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d6:	4b1b      	ldr	r3, [pc, #108]	; (8000944 <HAL_I2C_MspInit+0xbc>)
 80008d8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80008da:	4b1a      	ldr	r3, [pc, #104]	; (8000944 <HAL_I2C_MspInit+0xbc>)
 80008dc:	2102      	movs	r1, #2
 80008de:	430a      	orrs	r2, r1
 80008e0:	635a      	str	r2, [r3, #52]	; 0x34
 80008e2:	4b18      	ldr	r3, [pc, #96]	; (8000944 <HAL_I2C_MspInit+0xbc>)
 80008e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80008e6:	2202      	movs	r2, #2
 80008e8:	4013      	ands	r3, r2
 80008ea:	60fb      	str	r3, [r7, #12]
 80008ec:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80008ee:	212c      	movs	r1, #44	; 0x2c
 80008f0:	187b      	adds	r3, r7, r1
 80008f2:	22c0      	movs	r2, #192	; 0xc0
 80008f4:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80008f6:	187b      	adds	r3, r7, r1
 80008f8:	2212      	movs	r2, #18
 80008fa:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fc:	187b      	adds	r3, r7, r1
 80008fe:	2200      	movs	r2, #0
 8000900:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	187b      	adds	r3, r7, r1
 8000904:	2200      	movs	r2, #0
 8000906:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 8000908:	187b      	adds	r3, r7, r1
 800090a:	2206      	movs	r2, #6
 800090c:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800090e:	187b      	adds	r3, r7, r1
 8000910:	4a0d      	ldr	r2, [pc, #52]	; (8000948 <HAL_I2C_MspInit+0xc0>)
 8000912:	0019      	movs	r1, r3
 8000914:	0010      	movs	r0, r2
 8000916:	f001 f835 	bl	8001984 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800091a:	4b0a      	ldr	r3, [pc, #40]	; (8000944 <HAL_I2C_MspInit+0xbc>)
 800091c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800091e:	4b09      	ldr	r3, [pc, #36]	; (8000944 <HAL_I2C_MspInit+0xbc>)
 8000920:	2180      	movs	r1, #128	; 0x80
 8000922:	0389      	lsls	r1, r1, #14
 8000924:	430a      	orrs	r2, r1
 8000926:	63da      	str	r2, [r3, #60]	; 0x3c
 8000928:	4b06      	ldr	r3, [pc, #24]	; (8000944 <HAL_I2C_MspInit+0xbc>)
 800092a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800092c:	2380      	movs	r3, #128	; 0x80
 800092e:	039b      	lsls	r3, r3, #14
 8000930:	4013      	ands	r3, r2
 8000932:	60bb      	str	r3, [r7, #8]
 8000934:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000936:	46c0      	nop			; (mov r8, r8)
 8000938:	46bd      	mov	sp, r7
 800093a:	b011      	add	sp, #68	; 0x44
 800093c:	bd90      	pop	{r4, r7, pc}
 800093e:	46c0      	nop			; (mov r8, r8)
 8000940:	40005400 	.word	0x40005400
 8000944:	40021000 	.word	0x40021000
 8000948:	50000400 	.word	0x50000400

0800094c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800094c:	b590      	push	{r4, r7, lr}
 800094e:	b091      	sub	sp, #68	; 0x44
 8000950:	af00      	add	r7, sp, #0
 8000952:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000954:	232c      	movs	r3, #44	; 0x2c
 8000956:	18fb      	adds	r3, r7, r3
 8000958:	0018      	movs	r0, r3
 800095a:	2314      	movs	r3, #20
 800095c:	001a      	movs	r2, r3
 800095e:	2100      	movs	r1, #0
 8000960:	f002 faac 	bl	8002ebc <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000964:	2410      	movs	r4, #16
 8000966:	193b      	adds	r3, r7, r4
 8000968:	0018      	movs	r0, r3
 800096a:	231c      	movs	r3, #28
 800096c:	001a      	movs	r2, r3
 800096e:	2100      	movs	r1, #0
 8000970:	f002 faa4 	bl	8002ebc <memset>
  if(hspi->Instance==SPI1)
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	681b      	ldr	r3, [r3, #0]
 8000978:	4a23      	ldr	r2, [pc, #140]	; (8000a08 <HAL_SPI_MspInit+0xbc>)
 800097a:	4293      	cmp	r3, r2
 800097c:	d13f      	bne.n	80009fe <HAL_SPI_MspInit+0xb2>

  /* USER CODE END SPI1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2S1;
 800097e:	193b      	adds	r3, r7, r4
 8000980:	2280      	movs	r2, #128	; 0x80
 8000982:	0112      	lsls	r2, r2, #4
 8000984:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2s1ClockSelection = RCC_I2S1CLKSOURCE_SYSCLK;
 8000986:	193b      	adds	r3, r7, r4
 8000988:	2200      	movs	r2, #0
 800098a:	611a      	str	r2, [r3, #16]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800098c:	193b      	adds	r3, r7, r4
 800098e:	0018      	movs	r0, r3
 8000990:	f001 fdee 	bl	8002570 <HAL_RCCEx_PeriphCLKConfig>
 8000994:	1e03      	subs	r3, r0, #0
 8000996:	d001      	beq.n	800099c <HAL_SPI_MspInit+0x50>
    {
      Error_Handler();
 8000998:	f7ff fef0 	bl	800077c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800099c:	4b1b      	ldr	r3, [pc, #108]	; (8000a0c <HAL_SPI_MspInit+0xc0>)
 800099e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009a0:	4b1a      	ldr	r3, [pc, #104]	; (8000a0c <HAL_SPI_MspInit+0xc0>)
 80009a2:	2180      	movs	r1, #128	; 0x80
 80009a4:	0149      	lsls	r1, r1, #5
 80009a6:	430a      	orrs	r2, r1
 80009a8:	641a      	str	r2, [r3, #64]	; 0x40
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_SPI_MspInit+0xc0>)
 80009ac:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009ae:	2380      	movs	r3, #128	; 0x80
 80009b0:	015b      	lsls	r3, r3, #5
 80009b2:	4013      	ands	r3, r2
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b8:	4b14      	ldr	r3, [pc, #80]	; (8000a0c <HAL_SPI_MspInit+0xc0>)
 80009ba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80009bc:	4b13      	ldr	r3, [pc, #76]	; (8000a0c <HAL_SPI_MspInit+0xc0>)
 80009be:	2101      	movs	r1, #1
 80009c0:	430a      	orrs	r2, r1
 80009c2:	635a      	str	r2, [r3, #52]	; 0x34
 80009c4:	4b11      	ldr	r3, [pc, #68]	; (8000a0c <HAL_SPI_MspInit+0xc0>)
 80009c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80009c8:	2201      	movs	r2, #1
 80009ca:	4013      	ands	r3, r2
 80009cc:	60bb      	str	r3, [r7, #8]
 80009ce:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA1     ------> SPI1_SCK
    PA2     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2;
 80009d0:	212c      	movs	r1, #44	; 0x2c
 80009d2:	187b      	adds	r3, r7, r1
 80009d4:	2206      	movs	r2, #6
 80009d6:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009d8:	187b      	adds	r3, r7, r1
 80009da:	2202      	movs	r2, #2
 80009dc:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	187b      	adds	r3, r7, r1
 80009e0:	2200      	movs	r2, #0
 80009e2:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2200      	movs	r2, #0
 80009e8:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI1;
 80009ea:	187b      	adds	r3, r7, r1
 80009ec:	2200      	movs	r2, #0
 80009ee:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009f0:	187a      	adds	r2, r7, r1
 80009f2:	23a0      	movs	r3, #160	; 0xa0
 80009f4:	05db      	lsls	r3, r3, #23
 80009f6:	0011      	movs	r1, r2
 80009f8:	0018      	movs	r0, r3
 80009fa:	f000 ffc3 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80009fe:	46c0      	nop			; (mov r8, r8)
 8000a00:	46bd      	mov	sp, r7
 8000a02:	b011      	add	sp, #68	; 0x44
 8000a04:	bd90      	pop	{r4, r7, pc}
 8000a06:	46c0      	nop			; (mov r8, r8)
 8000a08:	40013000 	.word	0x40013000
 8000a0c:	40021000 	.word	0x40021000

08000a10 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a10:	b580      	push	{r7, lr}
 8000a12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a14:	e7fe      	b.n	8000a14 <NMI_Handler+0x4>

08000a16 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a16:	b580      	push	{r7, lr}
 8000a18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a1a:	e7fe      	b.n	8000a1a <HardFault_Handler+0x4>

08000a1c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000a20:	46c0      	nop			; (mov r8, r8)
 8000a22:	46bd      	mov	sp, r7
 8000a24:	bd80      	pop	{r7, pc}

08000a26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a26:	b580      	push	{r7, lr}
 8000a28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a2a:	46c0      	nop			; (mov r8, r8)
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}

08000a30 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a34:	f000 f89a 	bl	8000b6c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a38:	46c0      	nop			; (mov r8, r8)
 8000a3a:	46bd      	mov	sp, r7
 8000a3c:	bd80      	pop	{r7, pc}
	...

08000a40 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	af00      	add	r7, sp, #0
  
  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000a44:	4b03      	ldr	r3, [pc, #12]	; (8000a54 <SystemInit+0x14>)
 8000a46:	2280      	movs	r2, #128	; 0x80
 8000a48:	0512      	lsls	r2, r2, #20
 8000a4a:	609a      	str	r2, [r3, #8]
#endif
}
 8000a4c:	46c0      	nop			; (mov r8, r8)
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	bd80      	pop	{r7, pc}
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	e000ed00 	.word	0xe000ed00

08000a58 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000a58:	480d      	ldr	r0, [pc, #52]	; (8000a90 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000a5a:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000a5c:	f7ff fff0 	bl	8000a40 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 8000a60:	2100      	movs	r1, #0
  b LoopCopyDataInit
 8000a62:	e003      	b.n	8000a6c <LoopCopyDataInit>

08000a64 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 8000a64:	4b0b      	ldr	r3, [pc, #44]	; (8000a94 <LoopForever+0x6>)
  ldr r3, [r3, r1]
 8000a66:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 8000a68:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 8000a6a:	3104      	adds	r1, #4

08000a6c <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 8000a6c:	480a      	ldr	r0, [pc, #40]	; (8000a98 <LoopForever+0xa>)
  ldr r3, =_edata
 8000a6e:	4b0b      	ldr	r3, [pc, #44]	; (8000a9c <LoopForever+0xe>)
  adds r2, r0, r1
 8000a70:	1842      	adds	r2, r0, r1
  cmp r2, r3
 8000a72:	429a      	cmp	r2, r3
  bcc CopyDataInit
 8000a74:	d3f6      	bcc.n	8000a64 <CopyDataInit>
  ldr r2, =_sbss
 8000a76:	4a0a      	ldr	r2, [pc, #40]	; (8000aa0 <LoopForever+0x12>)
  b LoopFillZerobss
 8000a78:	e002      	b.n	8000a80 <LoopFillZerobss>

08000a7a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 8000a7a:	2300      	movs	r3, #0
  str  r3, [r2]
 8000a7c:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000a7e:	3204      	adds	r2, #4

08000a80 <LoopFillZerobss>:


LoopFillZerobss:
  ldr r3, = _ebss
 8000a80:	4b08      	ldr	r3, [pc, #32]	; (8000aa4 <LoopForever+0x16>)
  cmp r2, r3
 8000a82:	429a      	cmp	r2, r3
  bcc FillZerobss
 8000a84:	d3f9      	bcc.n	8000a7a <FillZerobss>


/* Call static constructors */
  bl __libc_init_array
 8000a86:	f002 fa21 	bl	8002ecc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000a8a:	f7ff fbc9 	bl	8000220 <main>

08000a8e <LoopForever>:

LoopForever:
    b LoopForever
 8000a8e:	e7fe      	b.n	8000a8e <LoopForever>
  ldr   r0, =_estack
 8000a90:	20001800 	.word	0x20001800
  ldr r3, =_sidata
 8000a94:	08002f78 	.word	0x08002f78
  ldr r0, =_sdata
 8000a98:	20000000 	.word	0x20000000
  ldr r3, =_edata
 8000a9c:	20000018 	.word	0x20000018
  ldr r2, =_sbss
 8000aa0:	20000018 	.word	0x20000018
  ldr r3, = _ebss
 8000aa4:	20000158 	.word	0x20000158

08000aa8 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000aa8:	e7fe      	b.n	8000aa8 <ADC1_IRQHandler>

08000aaa <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000aaa:	b580      	push	{r7, lr}
 8000aac:	b082      	sub	sp, #8
 8000aae:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000ab0:	1dfb      	adds	r3, r7, #7
 8000ab2:	2200      	movs	r2, #0
 8000ab4:	701a      	strb	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000ab6:	2003      	movs	r0, #3
 8000ab8:	f000 f80e 	bl	8000ad8 <HAL_InitTick>
 8000abc:	1e03      	subs	r3, r0, #0
 8000abe:	d003      	beq.n	8000ac8 <HAL_Init+0x1e>
  {
    status = HAL_ERROR;
 8000ac0:	1dfb      	adds	r3, r7, #7
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	701a      	strb	r2, [r3, #0]
 8000ac6:	e001      	b.n	8000acc <HAL_Init+0x22>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000ac8:	f7ff fe5e 	bl	8000788 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000acc:	1dfb      	adds	r3, r7, #7
 8000ace:	781b      	ldrb	r3, [r3, #0]
}
 8000ad0:	0018      	movs	r0, r3
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	b002      	add	sp, #8
 8000ad6:	bd80      	pop	{r7, pc}

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b590      	push	{r4, r7, lr}
 8000ada:	b085      	sub	sp, #20
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ae0:	230f      	movs	r3, #15
 8000ae2:	18fb      	adds	r3, r7, r3
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	701a      	strb	r2, [r3, #0]

  if ((uint32_t)uwTickFreq != 0UL)
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	; (8000b60 <HAL_InitTick+0x88>)
 8000aea:	781b      	ldrb	r3, [r3, #0]
 8000aec:	2b00      	cmp	r3, #0
 8000aee:	d02b      	beq.n	8000b48 <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) == 0U)
 8000af0:	4b1c      	ldr	r3, [pc, #112]	; (8000b64 <HAL_InitTick+0x8c>)
 8000af2:	681c      	ldr	r4, [r3, #0]
 8000af4:	4b1a      	ldr	r3, [pc, #104]	; (8000b60 <HAL_InitTick+0x88>)
 8000af6:	781b      	ldrb	r3, [r3, #0]
 8000af8:	0019      	movs	r1, r3
 8000afa:	23fa      	movs	r3, #250	; 0xfa
 8000afc:	0098      	lsls	r0, r3, #2
 8000afe:	f7ff fb03 	bl	8000108 <__udivsi3>
 8000b02:	0003      	movs	r3, r0
 8000b04:	0019      	movs	r1, r3
 8000b06:	0020      	movs	r0, r4
 8000b08:	f7ff fafe 	bl	8000108 <__udivsi3>
 8000b0c:	0003      	movs	r3, r0
 8000b0e:	0018      	movs	r0, r3
 8000b10:	f000 ff2b 	bl	800196a <HAL_SYSTICK_Config>
 8000b14:	1e03      	subs	r3, r0, #0
 8000b16:	d112      	bne.n	8000b3e <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2b03      	cmp	r3, #3
 8000b1c:	d80a      	bhi.n	8000b34 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b1e:	6879      	ldr	r1, [r7, #4]
 8000b20:	2301      	movs	r3, #1
 8000b22:	425b      	negs	r3, r3
 8000b24:	2200      	movs	r2, #0
 8000b26:	0018      	movs	r0, r3
 8000b28:	f000 ff0a 	bl	8001940 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000b2c:	4b0e      	ldr	r3, [pc, #56]	; (8000b68 <HAL_InitTick+0x90>)
 8000b2e:	687a      	ldr	r2, [r7, #4]
 8000b30:	601a      	str	r2, [r3, #0]
 8000b32:	e00d      	b.n	8000b50 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000b34:	230f      	movs	r3, #15
 8000b36:	18fb      	adds	r3, r7, r3
 8000b38:	2201      	movs	r2, #1
 8000b3a:	701a      	strb	r2, [r3, #0]
 8000b3c:	e008      	b.n	8000b50 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000b3e:	230f      	movs	r3, #15
 8000b40:	18fb      	adds	r3, r7, r3
 8000b42:	2201      	movs	r2, #1
 8000b44:	701a      	strb	r2, [r3, #0]
 8000b46:	e003      	b.n	8000b50 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000b48:	230f      	movs	r3, #15
 8000b4a:	18fb      	adds	r3, r7, r3
 8000b4c:	2201      	movs	r2, #1
 8000b4e:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000b50:	230f      	movs	r3, #15
 8000b52:	18fb      	adds	r3, r7, r3
 8000b54:	781b      	ldrb	r3, [r3, #0]
}
 8000b56:	0018      	movs	r0, r3
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	b005      	add	sp, #20
 8000b5c:	bd90      	pop	{r4, r7, pc}
 8000b5e:	46c0      	nop			; (mov r8, r8)
 8000b60:	20000014 	.word	0x20000014
 8000b64:	2000000c 	.word	0x2000000c
 8000b68:	20000010 	.word	0x20000010

08000b6c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b6c:	b580      	push	{r7, lr}
 8000b6e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000b70:	4b05      	ldr	r3, [pc, #20]	; (8000b88 <HAL_IncTick+0x1c>)
 8000b72:	781b      	ldrb	r3, [r3, #0]
 8000b74:	001a      	movs	r2, r3
 8000b76:	4b05      	ldr	r3, [pc, #20]	; (8000b8c <HAL_IncTick+0x20>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	18d2      	adds	r2, r2, r3
 8000b7c:	4b03      	ldr	r3, [pc, #12]	; (8000b8c <HAL_IncTick+0x20>)
 8000b7e:	601a      	str	r2, [r3, #0]
}
 8000b80:	46c0      	nop			; (mov r8, r8)
 8000b82:	46bd      	mov	sp, r7
 8000b84:	bd80      	pop	{r7, pc}
 8000b86:	46c0      	nop			; (mov r8, r8)
 8000b88:	20000014 	.word	0x20000014
 8000b8c:	20000154 	.word	0x20000154

08000b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	af00      	add	r7, sp, #0
  return uwTick;
 8000b94:	4b02      	ldr	r3, [pc, #8]	; (8000ba0 <HAL_GetTick+0x10>)
 8000b96:	681b      	ldr	r3, [r3, #0]
}
 8000b98:	0018      	movs	r0, r3
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	46c0      	nop			; (mov r8, r8)
 8000ba0:	20000154 	.word	0x20000154

08000ba4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000ba4:	b580      	push	{r7, lr}
 8000ba6:	b084      	sub	sp, #16
 8000ba8:	af00      	add	r7, sp, #0
 8000baa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bac:	f7ff fff0 	bl	8000b90 <HAL_GetTick>
 8000bb0:	0003      	movs	r3, r0
 8000bb2:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	d005      	beq.n	8000bca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000bbe:	4b0a      	ldr	r3, [pc, #40]	; (8000be8 <HAL_Delay+0x44>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	001a      	movs	r2, r3
 8000bc4:	68fb      	ldr	r3, [r7, #12]
 8000bc6:	189b      	adds	r3, r3, r2
 8000bc8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000bca:	46c0      	nop			; (mov r8, r8)
 8000bcc:	f7ff ffe0 	bl	8000b90 <HAL_GetTick>
 8000bd0:	0002      	movs	r2, r0
 8000bd2:	68bb      	ldr	r3, [r7, #8]
 8000bd4:	1ad3      	subs	r3, r2, r3
 8000bd6:	68fa      	ldr	r2, [r7, #12]
 8000bd8:	429a      	cmp	r2, r3
 8000bda:	d8f7      	bhi.n	8000bcc <HAL_Delay+0x28>
  {
  }
}
 8000bdc:	46c0      	nop			; (mov r8, r8)
 8000bde:	46c0      	nop			; (mov r8, r8)
 8000be0:	46bd      	mov	sp, r7
 8000be2:	b004      	add	sp, #16
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	46c0      	nop			; (mov r8, r8)
 8000be8:	20000014 	.word	0x20000014

08000bec <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
 8000bf4:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN, PathInternal);
 8000bf6:	687b      	ldr	r3, [r7, #4]
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	4a05      	ldr	r2, [pc, #20]	; (8000c10 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000bfc:	401a      	ands	r2, r3
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	431a      	orrs	r2, r3
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	601a      	str	r2, [r3, #0]
}
 8000c06:	46c0      	nop			; (mov r8, r8)
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	b002      	add	sp, #8
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	46c0      	nop			; (mov r8, r8)
 8000c10:	ff3fffff 	.word	0xff3fffff

08000c14 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_NONE
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b082      	sub	sp, #8
 8000c18:	af00      	add	r7, sp, #0
 8000c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN));
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	681a      	ldr	r2, [r3, #0]
 8000c20:	23c0      	movs	r3, #192	; 0xc0
 8000c22:	041b      	lsls	r3, r3, #16
 8000c24:	4013      	ands	r3, r2
}
 8000c26:	0018      	movs	r0, r3
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	b002      	add	sp, #8
 8000c2c:	bd80      	pop	{r7, pc}

08000c2e <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000c2e:	b580      	push	{r7, lr}
 8000c30:	b084      	sub	sp, #16
 8000c32:	af00      	add	r7, sp, #0
 8000c34:	60f8      	str	r0, [r7, #12]
 8000c36:	60b9      	str	r1, [r7, #8]
 8000c38:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	695b      	ldr	r3, [r3, #20]
 8000c3e:	68ba      	ldr	r2, [r7, #8]
 8000c40:	2104      	movs	r1, #4
 8000c42:	400a      	ands	r2, r1
 8000c44:	2107      	movs	r1, #7
 8000c46:	4091      	lsls	r1, r2
 8000c48:	000a      	movs	r2, r1
 8000c4a:	43d2      	mvns	r2, r2
 8000c4c:	401a      	ands	r2, r3
 8000c4e:	68bb      	ldr	r3, [r7, #8]
 8000c50:	2104      	movs	r1, #4
 8000c52:	400b      	ands	r3, r1
 8000c54:	6879      	ldr	r1, [r7, #4]
 8000c56:	4099      	lsls	r1, r3
 8000c58:	000b      	movs	r3, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	68fb      	ldr	r3, [r7, #12]
 8000c5e:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000c60:	46c0      	nop			; (mov r8, r8)
 8000c62:	46bd      	mov	sp, r7
 8000c64:	b004      	add	sp, #16
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	695b      	ldr	r3, [r3, #20]
 8000c76:	683a      	ldr	r2, [r7, #0]
 8000c78:	2104      	movs	r1, #4
 8000c7a:	400a      	ands	r2, r1
 8000c7c:	2107      	movs	r1, #7
 8000c7e:	4091      	lsls	r1, r2
 8000c80:	000a      	movs	r2, r1
 8000c82:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000c84:	683b      	ldr	r3, [r7, #0]
 8000c86:	2104      	movs	r1, #4
 8000c88:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000c8a:	40da      	lsrs	r2, r3
 8000c8c:	0013      	movs	r3, r2
}
 8000c8e:	0018      	movs	r0, r3
 8000c90:	46bd      	mov	sp, r7
 8000c92:	b002      	add	sp, #8
 8000c94:	bd80      	pop	{r7, pc}

08000c96 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8000c96:	b580      	push	{r7, lr}
 8000c98:	b082      	sub	sp, #8
 8000c9a:	af00      	add	r7, sp, #0
 8000c9c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	68da      	ldr	r2, [r3, #12]
 8000ca2:	23c0      	movs	r3, #192	; 0xc0
 8000ca4:	011b      	lsls	r3, r3, #4
 8000ca6:	4013      	ands	r3, r2
 8000ca8:	d101      	bne.n	8000cae <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e000      	b.n	8000cb0 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8000cae:	2300      	movs	r3, #0
}
 8000cb0:	0018      	movs	r0, r3
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	b002      	add	sp, #8
 8000cb6:	bd80      	pop	{r7, pc}

08000cb8 <LL_ADC_REG_SetSequencerRanks>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	b084      	sub	sp, #16
 8000cbc:	af00      	add	r7, sp, #0
 8000cbe:	60f8      	str	r0, [r7, #12]
 8000cc0:	60b9      	str	r1, [r7, #8]
 8000cc2:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000cc4:	68fb      	ldr	r3, [r7, #12]
 8000cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000cc8:	68ba      	ldr	r2, [r7, #8]
 8000cca:	211f      	movs	r1, #31
 8000ccc:	400a      	ands	r2, r1
 8000cce:	210f      	movs	r1, #15
 8000cd0:	4091      	lsls	r1, r2
 8000cd2:	000a      	movs	r2, r1
 8000cd4:	43d2      	mvns	r2, r2
 8000cd6:	401a      	ands	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	0e9b      	lsrs	r3, r3, #26
 8000cdc:	210f      	movs	r1, #15
 8000cde:	4019      	ands	r1, r3
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	201f      	movs	r0, #31
 8000ce4:	4003      	ands	r3, r0
 8000ce6:	4099      	lsls	r1, r3
 8000ce8:	000b      	movs	r3, r1
 8000cea:	431a      	orrs	r2, r3
 8000cec:	68fb      	ldr	r3, [r7, #12]
 8000cee:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000cf0:	46c0      	nop			; (mov r8, r8)
 8000cf2:	46bd      	mov	sp, r7
 8000cf4:	b004      	add	sp, #16
 8000cf6:	bd80      	pop	{r7, pc}

08000cf8 <LL_ADC_REG_SetSequencerChAdd>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
 8000d00:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d06:	683b      	ldr	r3, [r7, #0]
 8000d08:	025b      	lsls	r3, r3, #9
 8000d0a:	0a5b      	lsrs	r3, r3, #9
 8000d0c:	431a      	orrs	r2, r3
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d12:	46c0      	nop			; (mov r8, r8)
 8000d14:	46bd      	mov	sp, r7
 8000d16:	b002      	add	sp, #8
 8000d18:	bd80      	pop	{r7, pc}

08000d1a <LL_ADC_REG_SetSequencerChRem>:
  *             using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  *         (3) ADC channels available on STM32C031xx device only.
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d1a:	b580      	push	{r7, lr}
 8000d1c:	b082      	sub	sp, #8
 8000d1e:	af00      	add	r7, sp, #0
 8000d20:	6078      	str	r0, [r7, #4]
 8000d22:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d24:	687b      	ldr	r3, [r7, #4]
 8000d26:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d28:	683a      	ldr	r2, [r7, #0]
 8000d2a:	0252      	lsls	r2, r2, #9
 8000d2c:	0a52      	lsrs	r2, r2, #9
 8000d2e:	43d2      	mvns	r2, r2
 8000d30:	401a      	ands	r2, r3
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d36:	46c0      	nop			; (mov r8, r8)
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}
	...

08000d40 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b084      	sub	sp, #16
 8000d44:	af00      	add	r7, sp, #0
 8000d46:	60f8      	str	r0, [r7, #12]
 8000d48:	60b9      	str	r1, [r7, #8]
 8000d4a:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000d4c:	68fb      	ldr	r3, [r7, #12]
 8000d4e:	695b      	ldr	r3, [r3, #20]
 8000d50:	68ba      	ldr	r2, [r7, #8]
 8000d52:	0212      	lsls	r2, r2, #8
 8000d54:	43d2      	mvns	r2, r2
 8000d56:	401a      	ands	r2, r3
 8000d58:	68bb      	ldr	r3, [r7, #8]
 8000d5a:	021b      	lsls	r3, r3, #8
 8000d5c:	6879      	ldr	r1, [r7, #4]
 8000d5e:	400b      	ands	r3, r1
 8000d60:	4904      	ldr	r1, [pc, #16]	; (8000d74 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000d62:	400b      	ands	r3, r1
 8000d64:	431a      	orrs	r2, r3
 8000d66:	68fb      	ldr	r3, [r7, #12]
 8000d68:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000d6a:	46c0      	nop			; (mov r8, r8)
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	b004      	add	sp, #16
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	46c0      	nop			; (mov r8, r8)
 8000d74:	7fffff00 	.word	0x7fffff00

08000d78 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b082      	sub	sp, #8
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	689b      	ldr	r3, [r3, #8]
 8000d84:	4a05      	ldr	r2, [pc, #20]	; (8000d9c <LL_ADC_EnableInternalRegulator+0x24>)
 8000d86:	4013      	ands	r3, r2
 8000d88:	2280      	movs	r2, #128	; 0x80
 8000d8a:	0552      	lsls	r2, r2, #21
 8000d8c:	431a      	orrs	r2, r3
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000d92:	46c0      	nop			; (mov r8, r8)
 8000d94:	46bd      	mov	sp, r7
 8000d96:	b002      	add	sp, #8
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	46c0      	nop			; (mov r8, r8)
 8000d9c:	6fffffe8 	.word	0x6fffffe8

08000da0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	689a      	ldr	r2, [r3, #8]
 8000dac:	2380      	movs	r3, #128	; 0x80
 8000dae:	055b      	lsls	r3, r3, #21
 8000db0:	401a      	ands	r2, r3
 8000db2:	2380      	movs	r3, #128	; 0x80
 8000db4:	055b      	lsls	r3, r3, #21
 8000db6:	429a      	cmp	r2, r3
 8000db8:	d101      	bne.n	8000dbe <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000dba:	2301      	movs	r3, #1
 8000dbc:	e000      	b.n	8000dc0 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000dbe:	2300      	movs	r3, #0
}
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	b002      	add	sp, #8
 8000dc6:	bd80      	pop	{r7, pc}

08000dc8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	689b      	ldr	r3, [r3, #8]
 8000dd4:	4a04      	ldr	r2, [pc, #16]	; (8000de8 <LL_ADC_Enable+0x20>)
 8000dd6:	4013      	ands	r3, r2
 8000dd8:	2201      	movs	r2, #1
 8000dda:	431a      	orrs	r2, r3
 8000ddc:	687b      	ldr	r3, [r7, #4]
 8000dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000de0:	46c0      	nop			; (mov r8, r8)
 8000de2:	46bd      	mov	sp, r7
 8000de4:	b002      	add	sp, #8
 8000de6:	bd80      	pop	{r7, pc}
 8000de8:	7fffffe8 	.word	0x7fffffe8

08000dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	b082      	sub	sp, #8
 8000df0:	af00      	add	r7, sp, #0
 8000df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	689b      	ldr	r3, [r3, #8]
 8000df8:	2201      	movs	r2, #1
 8000dfa:	4013      	ands	r3, r2
 8000dfc:	2b01      	cmp	r3, #1
 8000dfe:	d101      	bne.n	8000e04 <LL_ADC_IsEnabled+0x18>
 8000e00:	2301      	movs	r3, #1
 8000e02:	e000      	b.n	8000e06 <LL_ADC_IsEnabled+0x1a>
 8000e04:	2300      	movs	r3, #0
}
 8000e06:	0018      	movs	r0, r3
 8000e08:	46bd      	mov	sp, r7
 8000e0a:	b002      	add	sp, #8
 8000e0c:	bd80      	pop	{r7, pc}
	...

08000e10 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	689b      	ldr	r3, [r3, #8]
 8000e1c:	4a04      	ldr	r2, [pc, #16]	; (8000e30 <LL_ADC_REG_StartConversion+0x20>)
 8000e1e:	4013      	ands	r3, r2
 8000e20:	2204      	movs	r2, #4
 8000e22:	431a      	orrs	r2, r3
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000e28:	46c0      	nop			; (mov r8, r8)
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	b002      	add	sp, #8
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	7fffffe8 	.word	0x7fffffe8

08000e34 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	689b      	ldr	r3, [r3, #8]
 8000e40:	2204      	movs	r2, #4
 8000e42:	4013      	ands	r3, r2
 8000e44:	2b04      	cmp	r3, #4
 8000e46:	d101      	bne.n	8000e4c <LL_ADC_REG_IsConversionOngoing+0x18>
 8000e48:	2301      	movs	r3, #1
 8000e4a:	e000      	b.n	8000e4e <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000e4c:	2300      	movs	r3, #0
}
 8000e4e:	0018      	movs	r0, r3
 8000e50:	46bd      	mov	sp, r7
 8000e52:	b002      	add	sp, #8
 8000e54:	bd80      	pop	{r7, pc}
	...

08000e58 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
 8000e5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000e60:	231f      	movs	r3, #31
 8000e62:	18fb      	adds	r3, r7, r3
 8000e64:	2200      	movs	r2, #0
 8000e66:	701a      	strb	r2, [r3, #0]
  uint32_t tmpCFGR1 = 0UL;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	61bb      	str	r3, [r7, #24]
  uint32_t tmpCFGR2 = 0UL;
 8000e6c:	2300      	movs	r3, #0
 8000e6e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d101      	bne.n	8000e7e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000e7a:	2301      	movs	r3, #1
 8000e7c:	e17e      	b.n	800117c <HAL_ADC_Init+0x324>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000e7e:	687b      	ldr	r3, [r7, #4]
 8000e80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000e82:	2b00      	cmp	r3, #0
 8000e84:	d10a      	bne.n	8000e9c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	0018      	movs	r0, r3
 8000e8a:	f7ff fca1 	bl	80007d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	2200      	movs	r2, #0
 8000e92:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	2254      	movs	r2, #84	; 0x54
 8000e98:	2100      	movs	r1, #0
 8000e9a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	0018      	movs	r0, r3
 8000ea2:	f7ff ff7d 	bl	8000da0 <LL_ADC_IsInternalRegulatorEnabled>
 8000ea6:	1e03      	subs	r3, r0, #0
 8000ea8:	d114      	bne.n	8000ed4 <HAL_ADC_Init+0x7c>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	0018      	movs	r0, r3
 8000eb0:	f7ff ff62 	bl	8000d78 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL)));
 8000eb4:	4bb3      	ldr	r3, [pc, #716]	; (8001184 <HAL_ADC_Init+0x32c>)
 8000eb6:	681b      	ldr	r3, [r3, #0]
 8000eb8:	49b3      	ldr	r1, [pc, #716]	; (8001188 <HAL_ADC_Init+0x330>)
 8000eba:	0018      	movs	r0, r3
 8000ebc:	f7ff f924 	bl	8000108 <__udivsi3>
 8000ec0:	0003      	movs	r3, r0
 8000ec2:	005b      	lsls	r3, r3, #1
 8000ec4:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ec6:	e002      	b.n	8000ece <HAL_ADC_Init+0x76>
    {
      wait_loop_index--;
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	3b01      	subs	r3, #1
 8000ecc:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000ece:	68fb      	ldr	r3, [r7, #12]
 8000ed0:	2b00      	cmp	r3, #0
 8000ed2:	d1f9      	bne.n	8000ec8 <HAL_ADC_Init+0x70>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	0018      	movs	r0, r3
 8000eda:	f7ff ff61 	bl	8000da0 <LL_ADC_IsInternalRegulatorEnabled>
 8000ede:	1e03      	subs	r3, r0, #0
 8000ee0:	d10f      	bne.n	8000f02 <HAL_ADC_Init+0xaa>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee6:	2210      	movs	r2, #16
 8000ee8:	431a      	orrs	r2, r3
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000eee:	687b      	ldr	r3, [r7, #4]
 8000ef0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000ef2:	2201      	movs	r2, #1
 8000ef4:	431a      	orrs	r2, r3
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000efa:	231f      	movs	r3, #31
 8000efc:	18fb      	adds	r3, r7, r3
 8000efe:	2201      	movs	r2, #1
 8000f00:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	0018      	movs	r0, r3
 8000f08:	f7ff ff94 	bl	8000e34 <LL_ADC_REG_IsConversionOngoing>
 8000f0c:	0003      	movs	r3, r0
 8000f0e:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f10:	687b      	ldr	r3, [r7, #4]
 8000f12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f14:	2210      	movs	r2, #16
 8000f16:	4013      	ands	r3, r2
 8000f18:	d000      	beq.n	8000f1c <HAL_ADC_Init+0xc4>
 8000f1a:	e122      	b.n	8001162 <HAL_ADC_Init+0x30a>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000f1c:	693b      	ldr	r3, [r7, #16]
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d000      	beq.n	8000f24 <HAL_ADC_Init+0xcc>
 8000f22:	e11e      	b.n	8001162 <HAL_ADC_Init+0x30a>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f28:	4a98      	ldr	r2, [pc, #608]	; (800118c <HAL_ADC_Init+0x334>)
 8000f2a:	4013      	ands	r3, r2
 8000f2c:	2202      	movs	r2, #2
 8000f2e:	431a      	orrs	r2, r3
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	0018      	movs	r0, r3
 8000f3a:	f7ff ff57 	bl	8000dec <LL_ADC_IsEnabled>
 8000f3e:	1e03      	subs	r3, r0, #0
 8000f40:	d000      	beq.n	8000f44 <HAL_ADC_Init+0xec>
 8000f42:	e0ad      	b.n	80010a0 <HAL_ADC_Init+0x248>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths: temperature sensor, Vref             */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f44:	687b      	ldr	r3, [r7, #4]
 8000f46:	689a      	ldr	r2, [r3, #8]
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	7e1b      	ldrb	r3, [r3, #24]
 8000f4c:	039b      	lsls	r3, r3, #14
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f4e:	431a      	orrs	r2, r3
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	7e5b      	ldrb	r3, [r3, #25]
 8000f54:	03db      	lsls	r3, r3, #15
                   ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000f56:	431a      	orrs	r2, r3
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	7e9b      	ldrb	r3, [r3, #26]
 8000f5c:	035b      	lsls	r3, r3, #13
                   ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000f5e:	431a      	orrs	r2, r3
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f60:	687b      	ldr	r3, [r7, #4]
 8000f62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d002      	beq.n	8000f6e <HAL_ADC_Init+0x116>
 8000f68:	2380      	movs	r3, #128	; 0x80
 8000f6a:	015b      	lsls	r3, r3, #5
 8000f6c:	e000      	b.n	8000f70 <HAL_ADC_Init+0x118>
 8000f6e:	2300      	movs	r3, #0
                   ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000f70:	431a      	orrs	r2, r3
                   hadc->Init.DataAlign                                           |
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	68db      	ldr	r3, [r3, #12]
                   ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000f76:	431a      	orrs	r2, r3
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	691b      	ldr	r3, [r3, #16]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	da04      	bge.n	8000f8a <HAL_ADC_Init+0x132>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	691b      	ldr	r3, [r3, #16]
 8000f84:	005b      	lsls	r3, r3, #1
 8000f86:	085b      	lsrs	r3, r3, #1
 8000f88:	e001      	b.n	8000f8e <HAL_ADC_Init+0x136>
 8000f8a:	2380      	movs	r3, #128	; 0x80
 8000f8c:	039b      	lsls	r3, r3, #14
                   hadc->Init.DataAlign                                           |
 8000f8e:	431a      	orrs	r2, r3
                   ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	212c      	movs	r1, #44	; 0x2c
 8000f94:	5c5b      	ldrb	r3, [r3, r1]
 8000f96:	005b      	lsls	r3, r3, #1
                   ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000f98:	4313      	orrs	r3, r2
      tmpCFGR1 |= (hadc->Init.Resolution                                          |
 8000f9a:	69ba      	ldr	r2, [r7, #24]
 8000f9c:	4313      	orrs	r3, r2
 8000f9e:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	2220      	movs	r2, #32
 8000fa4:	5c9b      	ldrb	r3, [r3, r2]
 8000fa6:	2b01      	cmp	r3, #1
 8000fa8:	d115      	bne.n	8000fd6 <HAL_ADC_Init+0x17e>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	7e9b      	ldrb	r3, [r3, #26]
 8000fae:	2b00      	cmp	r3, #0
 8000fb0:	d105      	bne.n	8000fbe <HAL_ADC_Init+0x166>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmpCFGR1 |= ADC_CFGR1_DISCEN;
 8000fb2:	69bb      	ldr	r3, [r7, #24]
 8000fb4:	2280      	movs	r2, #128	; 0x80
 8000fb6:	0252      	lsls	r2, r2, #9
 8000fb8:	4313      	orrs	r3, r2
 8000fba:	61bb      	str	r3, [r7, #24]
 8000fbc:	e00b      	b.n	8000fd6 <HAL_ADC_Init+0x17e>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	2220      	movs	r2, #32
 8000fc4:	431a      	orrs	r2, r3
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000fce:	2201      	movs	r2, #1
 8000fd0:	431a      	orrs	r2, r3
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000fda:	2b00      	cmp	r3, #0
 8000fdc:	d00a      	beq.n	8000ff4 <HAL_ADC_Init+0x19c>
      {
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000fe2:	23e0      	movs	r3, #224	; 0xe0
 8000fe4:	005b      	lsls	r3, r3, #1
 8000fe6:	401a      	ands	r2, r3
                     hadc->Init.ExternalTrigConvEdge);
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmpCFGR1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8000fec:	4313      	orrs	r3, r2
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	4313      	orrs	r3, r2
 8000ff2:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	68db      	ldr	r3, [r3, #12]
 8000ffa:	4a65      	ldr	r2, [pc, #404]	; (8001190 <HAL_ADC_Init+0x338>)
 8000ffc:	4013      	ands	r3, r2
 8000ffe:	0019      	movs	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	69ba      	ldr	r2, [r7, #24]
 8001006:	430a      	orrs	r2, r1
 8001008:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN   |
                 ADC_CFGR1_SCANDIR |
                 ADC_CFGR1_DMACFG,
                 tmpCFGR1);

      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	685b      	ldr	r3, [r3, #4]
 800100e:	0f9b      	lsrs	r3, r3, #30
 8001010:	079a      	lsls	r2, r3, #30
                   hadc->Init.TriggerFrequencyMode
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmpCFGR2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001016:	4313      	orrs	r3, r2
 8001018:	697a      	ldr	r2, [r7, #20]
 800101a:	4313      	orrs	r3, r2
 800101c:	617b      	str	r3, [r7, #20]
                  );

      if (hadc->Init.OversamplingMode == ENABLE)
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	223c      	movs	r2, #60	; 0x3c
 8001022:	5c9b      	ldrb	r3, [r3, r2]
 8001024:	2b01      	cmp	r3, #1
 8001026:	d111      	bne.n	800104c <HAL_ADC_Init+0x1f4>
      {
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	685b      	ldr	r3, [r3, #4]
 800102c:	0f9b      	lsrs	r3, r3, #30
 800102e:	079a      	lsls	r2, r3, #30
                     hadc->Init.Oversampling.Ratio         |
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                     (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001034:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.RightBitShift |
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                     hadc->Init.Oversampling.Ratio         |
 800103a:	431a      	orrs	r2, r3
                     hadc->Init.Oversampling.TriggeredMode
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                     hadc->Init.Oversampling.RightBitShift |
 8001040:	431a      	orrs	r2, r3
        tmpCFGR2 |= (ADC_CFGR2_OVSE |
 8001042:	697b      	ldr	r3, [r7, #20]
 8001044:	4313      	orrs	r3, r2
 8001046:	2201      	movs	r2, #1
 8001048:	4313      	orrs	r3, r2
 800104a:	617b      	str	r3, [r7, #20]
                    );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	691b      	ldr	r3, [r3, #16]
 8001052:	4a50      	ldr	r2, [pc, #320]	; (8001194 <HAL_ADC_Init+0x33c>)
 8001054:	4013      	ands	r3, r2
 8001056:	0019      	movs	r1, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	681b      	ldr	r3, [r3, #0]
 800105c:	697a      	ldr	r2, [r7, #20]
 800105e:	430a      	orrs	r2, r1
 8001060:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmpCFGR2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	685a      	ldr	r2, [r3, #4]
 8001066:	23c0      	movs	r3, #192	; 0xc0
 8001068:	061b      	lsls	r3, r3, #24
 800106a:	429a      	cmp	r2, r3
 800106c:	d018      	beq.n	80010a0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001072:	2380      	movs	r3, #128	; 0x80
 8001074:	05db      	lsls	r3, r3, #23
 8001076:	429a      	cmp	r2, r3
 8001078:	d012      	beq.n	80010a0 <HAL_ADC_Init+0x248>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 800107e:	2380      	movs	r3, #128	; 0x80
 8001080:	061b      	lsls	r3, r3, #24
 8001082:	429a      	cmp	r2, r3
 8001084:	d00c      	beq.n	80010a0 <HAL_ADC_Init+0x248>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001086:	4b44      	ldr	r3, [pc, #272]	; (8001198 <HAL_ADC_Init+0x340>)
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	4a44      	ldr	r2, [pc, #272]	; (800119c <HAL_ADC_Init+0x344>)
 800108c:	4013      	ands	r3, r2
 800108e:	0019      	movs	r1, r3
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685a      	ldr	r2, [r3, #4]
 8001094:	23f0      	movs	r3, #240	; 0xf0
 8001096:	039b      	lsls	r3, r3, #14
 8001098:	401a      	ands	r2, r3
 800109a:	4b3f      	ldr	r3, [pc, #252]	; (8001198 <HAL_ADC_Init+0x340>)
 800109c:	430a      	orrs	r2, r1
 800109e:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 80010a0:	687b      	ldr	r3, [r7, #4]
 80010a2:	6818      	ldr	r0, [r3, #0]
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80010a8:	001a      	movs	r2, r3
 80010aa:	2100      	movs	r1, #0
 80010ac:	f7ff fdbf 	bl	8000c2e <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6818      	ldr	r0, [r3, #0]
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80010b8:	4939      	ldr	r1, [pc, #228]	; (80011a0 <HAL_ADC_Init+0x348>)
 80010ba:	001a      	movs	r2, r3
 80010bc:	f7ff fdb7 	bl	8000c2e <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	691b      	ldr	r3, [r3, #16]
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d109      	bne.n	80010dc <HAL_ADC_Init+0x284>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	2110      	movs	r1, #16
 80010d4:	4249      	negs	r1, r1
 80010d6:	430a      	orrs	r2, r1
 80010d8:	629a      	str	r2, [r3, #40]	; 0x28
 80010da:	e018      	b.n	800110e <HAL_ADC_Init+0x2b6>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	691a      	ldr	r2, [r3, #16]
 80010e0:	2380      	movs	r3, #128	; 0x80
 80010e2:	039b      	lsls	r3, r3, #14
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d112      	bne.n	800110e <HAL_ADC_Init+0x2b6>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ee:	687b      	ldr	r3, [r7, #4]
 80010f0:	69db      	ldr	r3, [r3, #28]
 80010f2:	3b01      	subs	r3, #1
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	221c      	movs	r2, #28
 80010f8:	4013      	ands	r3, r2
 80010fa:	2210      	movs	r2, #16
 80010fc:	4252      	negs	r2, r2
 80010fe:	409a      	lsls	r2, r3
 8001100:	0011      	movs	r1, r2
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	681b      	ldr	r3, [r3, #0]
 800110a:	430a      	orrs	r2, r1
 800110c:	629a      	str	r2, [r3, #40]	; 0x28
                );
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	2100      	movs	r1, #0
 8001114:	0018      	movs	r0, r3
 8001116:	f7ff fda7 	bl	8000c68 <LL_ADC_GetSamplingTimeCommonChannels>
 800111a:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001120:	429a      	cmp	r2, r3
 8001122:	d10b      	bne.n	800113c <HAL_ADC_Init+0x2e4>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800112e:	2203      	movs	r2, #3
 8001130:	4393      	bics	r3, r2
 8001132:	2201      	movs	r2, #1
 8001134:	431a      	orrs	r2, r3
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 800113a:	e01c      	b.n	8001176 <HAL_ADC_Init+0x31e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001140:	2212      	movs	r2, #18
 8001142:	4393      	bics	r3, r2
 8001144:	2210      	movs	r2, #16
 8001146:	431a      	orrs	r2, r3
 8001148:	687b      	ldr	r3, [r7, #4]
 800114a:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001150:	2201      	movs	r2, #1
 8001152:	431a      	orrs	r2, r3
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001158:	231f      	movs	r3, #31
 800115a:	18fb      	adds	r3, r7, r3
 800115c:	2201      	movs	r2, #1
 800115e:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001160:	e009      	b.n	8001176 <HAL_ADC_Init+0x31e>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001166:	2210      	movs	r2, #16
 8001168:	431a      	orrs	r2, r3
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800116e:	231f      	movs	r3, #31
 8001170:	18fb      	adds	r3, r7, r3
 8001172:	2201      	movs	r2, #1
 8001174:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 8001176:	231f      	movs	r3, #31
 8001178:	18fb      	adds	r3, r7, r3
 800117a:	781b      	ldrb	r3, [r3, #0]
}
 800117c:	0018      	movs	r0, r3
 800117e:	46bd      	mov	sp, r7
 8001180:	b008      	add	sp, #32
 8001182:	bd80      	pop	{r7, pc}
 8001184:	2000000c 	.word	0x2000000c
 8001188:	00030d40 	.word	0x00030d40
 800118c:	fffffefd 	.word	0xfffffefd
 8001190:	ffde0201 	.word	0xffde0201
 8001194:	1ffffc02 	.word	0x1ffffc02
 8001198:	40012708 	.word	0x40012708
 800119c:	ffc3ffff 	.word	0xffc3ffff
 80011a0:	7fffff04 	.word	0x7fffff04

080011a4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 80011a4:	b5b0      	push	{r4, r5, r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0
 80011aa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	0018      	movs	r0, r3
 80011b2:	f7ff fe3f 	bl	8000e34 <LL_ADC_REG_IsConversionOngoing>
 80011b6:	1e03      	subs	r3, r0, #0
 80011b8:	d135      	bne.n	8001226 <HAL_ADC_Start+0x82>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	2254      	movs	r2, #84	; 0x54
 80011be:	5c9b      	ldrb	r3, [r3, r2]
 80011c0:	2b01      	cmp	r3, #1
 80011c2:	d101      	bne.n	80011c8 <HAL_ADC_Start+0x24>
 80011c4:	2302      	movs	r3, #2
 80011c6:	e035      	b.n	8001234 <HAL_ADC_Start+0x90>
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	2254      	movs	r2, #84	; 0x54
 80011cc:	2101      	movs	r1, #1
 80011ce:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80011d0:	250f      	movs	r5, #15
 80011d2:	197c      	adds	r4, r7, r5
 80011d4:	687b      	ldr	r3, [r7, #4]
 80011d6:	0018      	movs	r0, r3
 80011d8:	f000 faa2 	bl	8001720 <ADC_Enable>
 80011dc:	0003      	movs	r3, r0
 80011de:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80011e0:	197b      	adds	r3, r7, r5
 80011e2:	781b      	ldrb	r3, [r3, #0]
 80011e4:	2b00      	cmp	r3, #0
 80011e6:	d119      	bne.n	800121c <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	4a13      	ldr	r2, [pc, #76]	; (800123c <HAL_ADC_Start+0x98>)
 80011ee:	4013      	ands	r3, r2
 80011f0:	2280      	movs	r2, #128	; 0x80
 80011f2:	0052      	lsls	r2, r2, #1
 80011f4:	431a      	orrs	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2200      	movs	r2, #0
 80011fe:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	221c      	movs	r2, #28
 8001206:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	2254      	movs	r2, #84	; 0x54
 800120c:	2100      	movs	r1, #0
 800120e:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	0018      	movs	r0, r3
 8001216:	f7ff fdfb 	bl	8000e10 <LL_ADC_REG_StartConversion>
 800121a:	e008      	b.n	800122e <HAL_ADC_Start+0x8a>
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2254      	movs	r2, #84	; 0x54
 8001220:	2100      	movs	r1, #0
 8001222:	5499      	strb	r1, [r3, r2]
 8001224:	e003      	b.n	800122e <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001226:	230f      	movs	r3, #15
 8001228:	18fb      	adds	r3, r7, r3
 800122a:	2202      	movs	r2, #2
 800122c:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800122e:	230f      	movs	r3, #15
 8001230:	18fb      	adds	r3, r7, r3
 8001232:	781b      	ldrb	r3, [r3, #0]
}
 8001234:	0018      	movs	r0, r3
 8001236:	46bd      	mov	sp, r7
 8001238:	b004      	add	sp, #16
 800123a:	bdb0      	pop	{r4, r5, r7, pc}
 800123c:	fffff0fe 	.word	0xfffff0fe

08001240 <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b084      	sub	sp, #16
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
 8001248:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	695b      	ldr	r3, [r3, #20]
 800124e:	2b08      	cmp	r3, #8
 8001250:	d102      	bne.n	8001258 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_Flag_End = ADC_FLAG_EOS;
 8001252:	2308      	movs	r3, #8
 8001254:	60fb      	str	r3, [r7, #12]
 8001256:	e00f      	b.n	8001278 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	68db      	ldr	r3, [r3, #12]
 800125e:	2201      	movs	r2, #1
 8001260:	4013      	ands	r3, r2
 8001262:	d007      	beq.n	8001274 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001268:	2220      	movs	r2, #32
 800126a:	431a      	orrs	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 8001270:	2301      	movs	r3, #1
 8001272:	e06c      	b.n	800134e <HAL_ADC_PollForConversion+0x10e>
    }
    else
    {
      tmp_Flag_End = (ADC_FLAG_EOC);
 8001274:	2304      	movs	r3, #4
 8001276:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 8001278:	f7ff fc8a 	bl	8000b90 <HAL_GetTick>
 800127c:	0003      	movs	r3, r0
 800127e:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 8001280:	e019      	b.n	80012b6 <HAL_ADC_PollForConversion+0x76>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8001282:	683b      	ldr	r3, [r7, #0]
 8001284:	3301      	adds	r3, #1
 8001286:	d016      	beq.n	80012b6 <HAL_ADC_PollForConversion+0x76>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 8001288:	f7ff fc82 	bl	8000b90 <HAL_GetTick>
 800128c:	0002      	movs	r2, r0
 800128e:	68bb      	ldr	r3, [r7, #8]
 8001290:	1ad3      	subs	r3, r2, r3
 8001292:	683a      	ldr	r2, [r7, #0]
 8001294:	429a      	cmp	r2, r3
 8001296:	d302      	bcc.n	800129e <HAL_ADC_PollForConversion+0x5e>
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	2b00      	cmp	r3, #0
 800129c:	d10b      	bne.n	80012b6 <HAL_ADC_PollForConversion+0x76>
      {
        /* Update ADC state machine to timeout */
        SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012a2:	2204      	movs	r2, #4
 80012a4:	431a      	orrs	r2, r3
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	659a      	str	r2, [r3, #88]	; 0x58

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	2254      	movs	r2, #84	; 0x54
 80012ae:	2100      	movs	r1, #0
 80012b0:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 80012b2:	2303      	movs	r3, #3
 80012b4:	e04b      	b.n	800134e <HAL_ADC_PollForConversion+0x10e>
  while ((hadc->Instance->ISR & tmp_Flag_End) == 0UL)
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	68fa      	ldr	r2, [r7, #12]
 80012be:	4013      	ands	r3, r2
 80012c0:	d0df      	beq.n	8001282 <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80012c6:	2280      	movs	r2, #128	; 0x80
 80012c8:	0092      	lsls	r2, r2, #2
 80012ca:	431a      	orrs	r2, r3
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	0018      	movs	r0, r3
 80012d6:	f7ff fcde 	bl	8000c96 <LL_ADC_REG_IsTriggerSourceSWStart>
 80012da:	1e03      	subs	r3, r0, #0
 80012dc:	d02e      	beq.n	800133c <HAL_ADC_PollForConversion+0xfc>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	7e9b      	ldrb	r3, [r3, #26]
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d12a      	bne.n	800133c <HAL_ADC_PollForConversion+0xfc>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	2208      	movs	r2, #8
 80012ee:	4013      	ands	r3, r2
 80012f0:	2b08      	cmp	r3, #8
 80012f2:	d123      	bne.n	800133c <HAL_ADC_PollForConversion+0xfc>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fd9b 	bl	8000e34 <LL_ADC_REG_IsConversionOngoing>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d110      	bne.n	8001324 <HAL_ADC_PollForConversion+0xe4>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	681b      	ldr	r3, [r3, #0]
 8001306:	685a      	ldr	r2, [r3, #4]
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	210c      	movs	r1, #12
 800130e:	438a      	bics	r2, r1
 8001310:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001316:	4a10      	ldr	r2, [pc, #64]	; (8001358 <HAL_ADC_PollForConversion+0x118>)
 8001318:	4013      	ands	r3, r2
 800131a:	2201      	movs	r2, #1
 800131c:	431a      	orrs	r2, r3
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	659a      	str	r2, [r3, #88]	; 0x58
 8001322:	e00b      	b.n	800133c <HAL_ADC_PollForConversion+0xfc>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001328:	2220      	movs	r2, #32
 800132a:	431a      	orrs	r2, r3
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001334:	2201      	movs	r2, #1
 8001336:	431a      	orrs	r2, r3
 8001338:	687b      	ldr	r3, [r7, #4]
 800133a:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	7e1b      	ldrb	r3, [r3, #24]
 8001340:	2b00      	cmp	r3, #0
 8001342:	d103      	bne.n	800134c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	220c      	movs	r2, #12
 800134a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800134c:	2300      	movs	r3, #0
}
 800134e:	0018      	movs	r0, r3
 8001350:	46bd      	mov	sp, r7
 8001352:	b004      	add	sp, #16
 8001354:	bd80      	pop	{r7, pc}
 8001356:	46c0      	nop			; (mov r8, r8)
 8001358:	fffffefe 	.word	0xfffffefe

0800135c <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800135c:	b580      	push	{r7, lr}
 800135e:	b082      	sub	sp, #8
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 800136a:	0018      	movs	r0, r3
 800136c:	46bd      	mov	sp, r7
 800136e:	b002      	add	sp, #8
 8001370:	bd80      	pop	{r7, pc}
	...

08001374 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b086      	sub	sp, #24
 8001378:	af00      	add	r7, sp, #0
 800137a:	6078      	str	r0, [r7, #4]
 800137c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800137e:	2317      	movs	r3, #23
 8001380:	18fb      	adds	r3, r7, r3
 8001382:	2200      	movs	r2, #0
 8001384:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001386:	2300      	movs	r3, #0
 8001388:	60fb      	str	r3, [r7, #12]

    assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	2254      	movs	r2, #84	; 0x54
 800138e:	5c9b      	ldrb	r3, [r3, r2]
 8001390:	2b01      	cmp	r3, #1
 8001392:	d101      	bne.n	8001398 <HAL_ADC_ConfigChannel+0x24>
 8001394:	2302      	movs	r3, #2
 8001396:	e1be      	b.n	8001716 <HAL_ADC_ConfigChannel+0x3a2>
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	2254      	movs	r2, #84	; 0x54
 800139c:	2101      	movs	r1, #1
 800139e:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor       */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	0018      	movs	r0, r3
 80013a6:	f7ff fd45 	bl	8000e34 <LL_ADC_REG_IsConversionOngoing>
 80013aa:	1e03      	subs	r3, r0, #0
 80013ac:	d000      	beq.n	80013b0 <HAL_ADC_ConfigChannel+0x3c>
 80013ae:	e1a1      	b.n	80016f4 <HAL_ADC_ConfigChannel+0x380>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (sConfig->Rank != ADC_RANK_NONE)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	685b      	ldr	r3, [r3, #4]
 80013b4:	2b02      	cmp	r3, #2
 80013b6:	d100      	bne.n	80013ba <HAL_ADC_ConfigChannel+0x46>
 80013b8:	e152      	b.n	8001660 <HAL_ADC_ConfigChannel+0x2ec>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	691a      	ldr	r2, [r3, #16]
 80013be:	2380      	movs	r3, #128	; 0x80
 80013c0:	061b      	lsls	r3, r3, #24
 80013c2:	429a      	cmp	r2, r3
 80013c4:	d004      	beq.n	80013d0 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80013ca:	4ac2      	ldr	r2, [pc, #776]	; (80016d4 <HAL_ADC_ConfigChannel+0x360>)
 80013cc:	4293      	cmp	r3, r2
 80013ce:	d108      	bne.n	80013e2 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, sConfig->Channel);
 80013d0:	687b      	ldr	r3, [r7, #4]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	0019      	movs	r1, r3
 80013da:	0010      	movs	r0, r2
 80013dc:	f7ff fc8c 	bl	8000cf8 <LL_ADC_REG_SetSequencerChAdd>
 80013e0:	e0ed      	b.n	80015be <HAL_ADC_ConfigChannel+0x24a>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80013e6:	683b      	ldr	r3, [r7, #0]
 80013e8:	685b      	ldr	r3, [r3, #4]
 80013ea:	211f      	movs	r1, #31
 80013ec:	400b      	ands	r3, r1
 80013ee:	210f      	movs	r1, #15
 80013f0:	4099      	lsls	r1, r3
 80013f2:	000b      	movs	r3, r1
 80013f4:	43db      	mvns	r3, r3
 80013f6:	4013      	ands	r3, r2
 80013f8:	0019      	movs	r1, r3
 80013fa:	683b      	ldr	r3, [r7, #0]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	025b      	lsls	r3, r3, #9
 8001400:	0a5b      	lsrs	r3, r3, #9
 8001402:	d105      	bne.n	8001410 <HAL_ADC_ConfigChannel+0x9c>
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	0e9b      	lsrs	r3, r3, #26
 800140a:	221f      	movs	r2, #31
 800140c:	4013      	ands	r3, r2
 800140e:	e0bc      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001410:	683b      	ldr	r3, [r7, #0]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	2201      	movs	r2, #1
 8001416:	4013      	ands	r3, r2
 8001418:	d000      	beq.n	800141c <HAL_ADC_ConfigChannel+0xa8>
 800141a:	e0b5      	b.n	8001588 <HAL_ADC_ConfigChannel+0x214>
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	2202      	movs	r2, #2
 8001422:	4013      	ands	r3, r2
 8001424:	d000      	beq.n	8001428 <HAL_ADC_ConfigChannel+0xb4>
 8001426:	e0ad      	b.n	8001584 <HAL_ADC_ConfigChannel+0x210>
 8001428:	683b      	ldr	r3, [r7, #0]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	2204      	movs	r2, #4
 800142e:	4013      	ands	r3, r2
 8001430:	d000      	beq.n	8001434 <HAL_ADC_ConfigChannel+0xc0>
 8001432:	e0a5      	b.n	8001580 <HAL_ADC_ConfigChannel+0x20c>
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2208      	movs	r2, #8
 800143a:	4013      	ands	r3, r2
 800143c:	d000      	beq.n	8001440 <HAL_ADC_ConfigChannel+0xcc>
 800143e:	e09d      	b.n	800157c <HAL_ADC_ConfigChannel+0x208>
 8001440:	683b      	ldr	r3, [r7, #0]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	2210      	movs	r2, #16
 8001446:	4013      	ands	r3, r2
 8001448:	d000      	beq.n	800144c <HAL_ADC_ConfigChannel+0xd8>
 800144a:	e095      	b.n	8001578 <HAL_ADC_ConfigChannel+0x204>
 800144c:	683b      	ldr	r3, [r7, #0]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	2220      	movs	r2, #32
 8001452:	4013      	ands	r3, r2
 8001454:	d000      	beq.n	8001458 <HAL_ADC_ConfigChannel+0xe4>
 8001456:	e08d      	b.n	8001574 <HAL_ADC_ConfigChannel+0x200>
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2240      	movs	r2, #64	; 0x40
 800145e:	4013      	ands	r3, r2
 8001460:	d000      	beq.n	8001464 <HAL_ADC_ConfigChannel+0xf0>
 8001462:	e085      	b.n	8001570 <HAL_ADC_ConfigChannel+0x1fc>
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	2280      	movs	r2, #128	; 0x80
 800146a:	4013      	ands	r3, r2
 800146c:	d000      	beq.n	8001470 <HAL_ADC_ConfigChannel+0xfc>
 800146e:	e07d      	b.n	800156c <HAL_ADC_ConfigChannel+0x1f8>
 8001470:	683b      	ldr	r3, [r7, #0]
 8001472:	681a      	ldr	r2, [r3, #0]
 8001474:	2380      	movs	r3, #128	; 0x80
 8001476:	005b      	lsls	r3, r3, #1
 8001478:	4013      	ands	r3, r2
 800147a:	d000      	beq.n	800147e <HAL_ADC_ConfigChannel+0x10a>
 800147c:	e074      	b.n	8001568 <HAL_ADC_ConfigChannel+0x1f4>
 800147e:	683b      	ldr	r3, [r7, #0]
 8001480:	681a      	ldr	r2, [r3, #0]
 8001482:	2380      	movs	r3, #128	; 0x80
 8001484:	009b      	lsls	r3, r3, #2
 8001486:	4013      	ands	r3, r2
 8001488:	d000      	beq.n	800148c <HAL_ADC_ConfigChannel+0x118>
 800148a:	e06b      	b.n	8001564 <HAL_ADC_ConfigChannel+0x1f0>
 800148c:	683b      	ldr	r3, [r7, #0]
 800148e:	681a      	ldr	r2, [r3, #0]
 8001490:	2380      	movs	r3, #128	; 0x80
 8001492:	00db      	lsls	r3, r3, #3
 8001494:	4013      	ands	r3, r2
 8001496:	d000      	beq.n	800149a <HAL_ADC_ConfigChannel+0x126>
 8001498:	e062      	b.n	8001560 <HAL_ADC_ConfigChannel+0x1ec>
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	681a      	ldr	r2, [r3, #0]
 800149e:	2380      	movs	r3, #128	; 0x80
 80014a0:	011b      	lsls	r3, r3, #4
 80014a2:	4013      	ands	r3, r2
 80014a4:	d000      	beq.n	80014a8 <HAL_ADC_ConfigChannel+0x134>
 80014a6:	e059      	b.n	800155c <HAL_ADC_ConfigChannel+0x1e8>
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	681a      	ldr	r2, [r3, #0]
 80014ac:	2380      	movs	r3, #128	; 0x80
 80014ae:	015b      	lsls	r3, r3, #5
 80014b0:	4013      	ands	r3, r2
 80014b2:	d151      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1e4>
 80014b4:	683b      	ldr	r3, [r7, #0]
 80014b6:	681a      	ldr	r2, [r3, #0]
 80014b8:	2380      	movs	r3, #128	; 0x80
 80014ba:	019b      	lsls	r3, r3, #6
 80014bc:	4013      	ands	r3, r2
 80014be:	d149      	bne.n	8001554 <HAL_ADC_ConfigChannel+0x1e0>
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681a      	ldr	r2, [r3, #0]
 80014c4:	2380      	movs	r3, #128	; 0x80
 80014c6:	01db      	lsls	r3, r3, #7
 80014c8:	4013      	ands	r3, r2
 80014ca:	d141      	bne.n	8001550 <HAL_ADC_ConfigChannel+0x1dc>
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681a      	ldr	r2, [r3, #0]
 80014d0:	2380      	movs	r3, #128	; 0x80
 80014d2:	021b      	lsls	r3, r3, #8
 80014d4:	4013      	ands	r3, r2
 80014d6:	d139      	bne.n	800154c <HAL_ADC_ConfigChannel+0x1d8>
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681a      	ldr	r2, [r3, #0]
 80014dc:	2380      	movs	r3, #128	; 0x80
 80014de:	025b      	lsls	r3, r3, #9
 80014e0:	4013      	ands	r3, r2
 80014e2:	d131      	bne.n	8001548 <HAL_ADC_ConfigChannel+0x1d4>
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	681a      	ldr	r2, [r3, #0]
 80014e8:	2380      	movs	r3, #128	; 0x80
 80014ea:	029b      	lsls	r3, r3, #10
 80014ec:	4013      	ands	r3, r2
 80014ee:	d129      	bne.n	8001544 <HAL_ADC_ConfigChannel+0x1d0>
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	681a      	ldr	r2, [r3, #0]
 80014f4:	2380      	movs	r3, #128	; 0x80
 80014f6:	02db      	lsls	r3, r3, #11
 80014f8:	4013      	ands	r3, r2
 80014fa:	d121      	bne.n	8001540 <HAL_ADC_ConfigChannel+0x1cc>
 80014fc:	683b      	ldr	r3, [r7, #0]
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	2380      	movs	r3, #128	; 0x80
 8001502:	031b      	lsls	r3, r3, #12
 8001504:	4013      	ands	r3, r2
 8001506:	d119      	bne.n	800153c <HAL_ADC_ConfigChannel+0x1c8>
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	681a      	ldr	r2, [r3, #0]
 800150c:	2380      	movs	r3, #128	; 0x80
 800150e:	035b      	lsls	r3, r3, #13
 8001510:	4013      	ands	r3, r2
 8001512:	d111      	bne.n	8001538 <HAL_ADC_ConfigChannel+0x1c4>
 8001514:	683b      	ldr	r3, [r7, #0]
 8001516:	681a      	ldr	r2, [r3, #0]
 8001518:	2380      	movs	r3, #128	; 0x80
 800151a:	039b      	lsls	r3, r3, #14
 800151c:	4013      	ands	r3, r2
 800151e:	d109      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x1c0>
 8001520:	683b      	ldr	r3, [r7, #0]
 8001522:	681a      	ldr	r2, [r3, #0]
 8001524:	2380      	movs	r3, #128	; 0x80
 8001526:	03db      	lsls	r3, r3, #15
 8001528:	4013      	ands	r3, r2
 800152a:	d001      	beq.n	8001530 <HAL_ADC_ConfigChannel+0x1bc>
 800152c:	2316      	movs	r3, #22
 800152e:	e02c      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001530:	2300      	movs	r3, #0
 8001532:	e02a      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001534:	2315      	movs	r3, #21
 8001536:	e028      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001538:	2314      	movs	r3, #20
 800153a:	e026      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 800153c:	2313      	movs	r3, #19
 800153e:	e024      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001540:	2312      	movs	r3, #18
 8001542:	e022      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001544:	2311      	movs	r3, #17
 8001546:	e020      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001548:	2310      	movs	r3, #16
 800154a:	e01e      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 800154c:	230f      	movs	r3, #15
 800154e:	e01c      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001550:	230e      	movs	r3, #14
 8001552:	e01a      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001554:	230d      	movs	r3, #13
 8001556:	e018      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001558:	230c      	movs	r3, #12
 800155a:	e016      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 800155c:	230b      	movs	r3, #11
 800155e:	e014      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001560:	230a      	movs	r3, #10
 8001562:	e012      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001564:	2309      	movs	r3, #9
 8001566:	e010      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001568:	2308      	movs	r3, #8
 800156a:	e00e      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 800156c:	2307      	movs	r3, #7
 800156e:	e00c      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001570:	2306      	movs	r3, #6
 8001572:	e00a      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001574:	2305      	movs	r3, #5
 8001576:	e008      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001578:	2304      	movs	r3, #4
 800157a:	e006      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 800157c:	2303      	movs	r3, #3
 800157e:	e004      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001580:	2302      	movs	r3, #2
 8001582:	e002      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001584:	2301      	movs	r3, #1
 8001586:	e000      	b.n	800158a <HAL_ADC_ConfigChannel+0x216>
 8001588:	2300      	movs	r3, #0
 800158a:	683a      	ldr	r2, [r7, #0]
 800158c:	6852      	ldr	r2, [r2, #4]
 800158e:	201f      	movs	r0, #31
 8001590:	4002      	ands	r2, r0
 8001592:	4093      	lsls	r3, r2
 8001594:	000a      	movs	r2, r1
 8001596:	431a      	orrs	r2, r3
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((sConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 800159c:	683b      	ldr	r3, [r7, #0]
 800159e:	685b      	ldr	r3, [r3, #4]
 80015a0:	089b      	lsrs	r3, r3, #2
 80015a2:	1c5a      	adds	r2, r3, #1
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	69db      	ldr	r3, [r3, #28]
 80015a8:	429a      	cmp	r2, r3
 80015aa:	d808      	bhi.n	80015be <HAL_ADC_ConfigChannel+0x24a>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	6818      	ldr	r0, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	6859      	ldr	r1, [r3, #4]
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	681b      	ldr	r3, [r3, #0]
 80015b8:	001a      	movs	r2, r3
 80015ba:	f7ff fb7d 	bl	8000cb8 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6818      	ldr	r0, [r3, #0]
 80015c2:	683b      	ldr	r3, [r7, #0]
 80015c4:	6819      	ldr	r1, [r3, #0]
 80015c6:	683b      	ldr	r3, [r7, #0]
 80015c8:	689b      	ldr	r3, [r3, #8]
 80015ca:	001a      	movs	r2, r3
 80015cc:	f7ff fbb8 	bl	8000d40 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	db00      	blt.n	80015da <HAL_ADC_ConfigChannel+0x266>
 80015d8:	e096      	b.n	8001708 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015da:	4b3f      	ldr	r3, [pc, #252]	; (80016d8 <HAL_ADC_ConfigChannel+0x364>)
 80015dc:	0018      	movs	r0, r3
 80015de:	f7ff fb19 	bl	8000c14 <LL_ADC_GetCommonPathInternalCh>
 80015e2:	0003      	movs	r3, r0
 80015e4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	4a3c      	ldr	r2, [pc, #240]	; (80016dc <HAL_ADC_ConfigChannel+0x368>)
 80015ec:	4293      	cmp	r3, r2
 80015ee:	d123      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x2c4>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80015f0:	693a      	ldr	r2, [r7, #16]
 80015f2:	2380      	movs	r3, #128	; 0x80
 80015f4:	041b      	lsls	r3, r3, #16
 80015f6:	4013      	ands	r3, r2
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80015f8:	d11e      	bne.n	8001638 <HAL_ADC_ConfigChannel+0x2c4>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	2280      	movs	r2, #128	; 0x80
 80015fe:	0412      	lsls	r2, r2, #16
 8001600:	4313      	orrs	r3, r2
 8001602:	4a35      	ldr	r2, [pc, #212]	; (80016d8 <HAL_ADC_ConfigChannel+0x364>)
 8001604:	0019      	movs	r1, r3
 8001606:	0010      	movs	r0, r2
 8001608:	f7ff faf0 	bl	8000bec <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800160c:	4b34      	ldr	r3, [pc, #208]	; (80016e0 <HAL_ADC_ConfigChannel+0x36c>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4934      	ldr	r1, [pc, #208]	; (80016e4 <HAL_ADC_ConfigChannel+0x370>)
 8001612:	0018      	movs	r0, r3
 8001614:	f7fe fd78 	bl	8000108 <__udivsi3>
 8001618:	0003      	movs	r3, r0
 800161a:	001a      	movs	r2, r3
 800161c:	0013      	movs	r3, r2
 800161e:	005b      	lsls	r3, r3, #1
 8001620:	189b      	adds	r3, r3, r2
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3301      	adds	r3, #1
 8001626:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001628:	e002      	b.n	8001630 <HAL_ADC_ConfigChannel+0x2bc>
          {
            wait_loop_index--;
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	3b01      	subs	r3, #1
 800162e:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d1f9      	bne.n	800162a <HAL_ADC_ConfigChannel+0x2b6>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001636:	e067      	b.n	8001708 <HAL_ADC_ConfigChannel+0x394>
          }
        }
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a2a      	ldr	r2, [pc, #168]	; (80016e8 <HAL_ADC_ConfigChannel+0x374>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d162      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x394>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001642:	693a      	ldr	r2, [r7, #16]
 8001644:	2380      	movs	r3, #128	; 0x80
 8001646:	03db      	lsls	r3, r3, #15
 8001648:	4013      	ands	r3, r2
        else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800164a:	d15d      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800164c:	693b      	ldr	r3, [r7, #16]
 800164e:	2280      	movs	r2, #128	; 0x80
 8001650:	03d2      	lsls	r2, r2, #15
 8001652:	4313      	orrs	r3, r2
 8001654:	4a20      	ldr	r2, [pc, #128]	; (80016d8 <HAL_ADC_ConfigChannel+0x364>)
 8001656:	0019      	movs	r1, r3
 8001658:	0010      	movs	r0, r2
 800165a:	f7ff fac7 	bl	8000bec <LL_ADC_SetCommonPathInternalCh>
 800165e:	e053      	b.n	8001708 <HAL_ADC_ConfigChannel+0x394>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	691a      	ldr	r2, [r3, #16]
 8001664:	2380      	movs	r3, #128	; 0x80
 8001666:	061b      	lsls	r3, r3, #24
 8001668:	429a      	cmp	r2, r3
 800166a:	d004      	beq.n	8001676 <HAL_ADC_ConfigChannel+0x302>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001670:	4a18      	ldr	r2, [pc, #96]	; (80016d4 <HAL_ADC_ConfigChannel+0x360>)
 8001672:	4293      	cmp	r3, r2
 8001674:	d107      	bne.n	8001686 <HAL_ADC_ConfigChannel+0x312>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, sConfig->Channel);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	681a      	ldr	r2, [r3, #0]
 800167a:	683b      	ldr	r3, [r7, #0]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	0019      	movs	r1, r3
 8001680:	0010      	movs	r0, r2
 8001682:	f7ff fb4a 	bl	8000d1a <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: VrefInt/TempSensor.       */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	2b00      	cmp	r3, #0
 800168c:	da3c      	bge.n	8001708 <HAL_ADC_ConfigChannel+0x394>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800168e:	4b12      	ldr	r3, [pc, #72]	; (80016d8 <HAL_ADC_ConfigChannel+0x364>)
 8001690:	0018      	movs	r0, r3
 8001692:	f7ff fabf 	bl	8000c14 <LL_ADC_GetCommonPathInternalCh>
 8001696:	0003      	movs	r3, r0
 8001698:	613b      	str	r3, [r7, #16]

        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800169a:	683b      	ldr	r3, [r7, #0]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a0f      	ldr	r2, [pc, #60]	; (80016dc <HAL_ADC_ConfigChannel+0x368>)
 80016a0:	4293      	cmp	r3, r2
 80016a2:	d108      	bne.n	80016b6 <HAL_ADC_ConfigChannel+0x342>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016a4:	693b      	ldr	r3, [r7, #16]
 80016a6:	4a11      	ldr	r2, [pc, #68]	; (80016ec <HAL_ADC_ConfigChannel+0x378>)
 80016a8:	4013      	ands	r3, r2
 80016aa:	4a0b      	ldr	r2, [pc, #44]	; (80016d8 <HAL_ADC_ConfigChannel+0x364>)
 80016ac:	0019      	movs	r1, r3
 80016ae:	0010      	movs	r0, r2
 80016b0:	f7ff fa9c 	bl	8000bec <LL_ADC_SetCommonPathInternalCh>
 80016b4:	e028      	b.n	8001708 <HAL_ADC_ConfigChannel+0x394>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	4a0b      	ldr	r2, [pc, #44]	; (80016e8 <HAL_ADC_ConfigChannel+0x374>)
 80016bc:	4293      	cmp	r3, r2
 80016be:	d123      	bne.n	8001708 <HAL_ADC_ConfigChannel+0x394>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80016c0:	693b      	ldr	r3, [r7, #16]
 80016c2:	4a0b      	ldr	r2, [pc, #44]	; (80016f0 <HAL_ADC_ConfigChannel+0x37c>)
 80016c4:	4013      	ands	r3, r2
 80016c6:	4a04      	ldr	r2, [pc, #16]	; (80016d8 <HAL_ADC_ConfigChannel+0x364>)
 80016c8:	0019      	movs	r1, r3
 80016ca:	0010      	movs	r0, r2
 80016cc:	f7ff fa8e 	bl	8000bec <LL_ADC_SetCommonPathInternalCh>
 80016d0:	e01a      	b.n	8001708 <HAL_ADC_ConfigChannel+0x394>
 80016d2:	46c0      	nop			; (mov r8, r8)
 80016d4:	80000004 	.word	0x80000004
 80016d8:	40012708 	.word	0x40012708
 80016dc:	a4000200 	.word	0xa4000200
 80016e0:	2000000c 	.word	0x2000000c
 80016e4:	00030d40 	.word	0x00030d40
 80016e8:	a8000400 	.word	0xa8000400
 80016ec:	ff7fffff 	.word	0xff7fffff
 80016f0:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f8:	2220      	movs	r2, #32
 80016fa:	431a      	orrs	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001700:	2317      	movs	r3, #23
 8001702:	18fb      	adds	r3, r7, r3
 8001704:	2201      	movs	r2, #1
 8001706:	701a      	strb	r2, [r3, #0]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	2254      	movs	r2, #84	; 0x54
 800170c:	2100      	movs	r1, #0
 800170e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return tmp_hal_status;
 8001710:	2317      	movs	r3, #23
 8001712:	18fb      	adds	r3, r7, r3
 8001714:	781b      	ldrb	r3, [r3, #0]
}
 8001716:	0018      	movs	r0, r3
 8001718:	46bd      	mov	sp, r7
 800171a:	b006      	add	sp, #24
 800171c:	bd80      	pop	{r7, pc}
 800171e:	46c0      	nop			; (mov r8, r8)

08001720 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001728:	2300      	movs	r3, #0
 800172a:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	0018      	movs	r0, r3
 8001732:	f7ff fb5b 	bl	8000dec <LL_ADC_IsEnabled>
 8001736:	1e03      	subs	r3, r0, #0
 8001738:	d162      	bne.n	8001800 <ADC_Enable+0xe0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	689b      	ldr	r3, [r3, #8]
 8001740:	4a32      	ldr	r2, [pc, #200]	; (800180c <ADC_Enable+0xec>)
 8001742:	4013      	ands	r3, r2
 8001744:	d00d      	beq.n	8001762 <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800174a:	2210      	movs	r2, #16
 800174c:	431a      	orrs	r2, r3
 800174e:	687b      	ldr	r3, [r7, #4]
 8001750:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001756:	2201      	movs	r2, #1
 8001758:	431a      	orrs	r2, r3
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	e04f      	b.n	8001802 <ADC_Enable+0xe2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	0018      	movs	r0, r3
 8001768:	f7ff fb2e 	bl	8000dc8 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 800176c:	4b28      	ldr	r3, [pc, #160]	; (8001810 <ADC_Enable+0xf0>)
 800176e:	0018      	movs	r0, r3
 8001770:	f7ff fa50 	bl	8000c14 <LL_ADC_GetCommonPathInternalCh>
 8001774:	0002      	movs	r2, r0
 8001776:	2380      	movs	r3, #128	; 0x80
 8001778:	041b      	lsls	r3, r3, #16
 800177a:	4013      	ands	r3, r2
 800177c:	d00f      	beq.n	800179e <ADC_Enable+0x7e>
      /* Delay for temperature sensor buffer stabilization time */
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = (((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL) * (SystemCoreClock / (100000UL * 2UL))) + 1UL);
 800177e:	4b25      	ldr	r3, [pc, #148]	; (8001814 <ADC_Enable+0xf4>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4925      	ldr	r1, [pc, #148]	; (8001818 <ADC_Enable+0xf8>)
 8001784:	0018      	movs	r0, r3
 8001786:	f7fe fcbf 	bl	8000108 <__udivsi3>
 800178a:	0003      	movs	r3, r0
 800178c:	3301      	adds	r3, #1
 800178e:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001790:	e002      	b.n	8001798 <ADC_Enable+0x78>
      {
        wait_loop_index--;
 8001792:	68bb      	ldr	r3, [r7, #8]
 8001794:	3b01      	subs	r3, #1
 8001796:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001798:	68bb      	ldr	r3, [r7, #8]
 800179a:	2b00      	cmp	r3, #0
 800179c:	d1f9      	bne.n	8001792 <ADC_Enable+0x72>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	7e5b      	ldrb	r3, [r3, #25]
 80017a2:	2b01      	cmp	r3, #1
 80017a4:	d02c      	beq.n	8001800 <ADC_Enable+0xe0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 80017a6:	f7ff f9f3 	bl	8000b90 <HAL_GetTick>
 80017aa:	0003      	movs	r3, r0
 80017ac:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017ae:	e020      	b.n	80017f2 <ADC_Enable+0xd2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	0018      	movs	r0, r3
 80017b6:	f7ff fb19 	bl	8000dec <LL_ADC_IsEnabled>
 80017ba:	1e03      	subs	r3, r0, #0
 80017bc:	d104      	bne.n	80017c8 <ADC_Enable+0xa8>
        {
          LL_ADC_Enable(hadc->Instance);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	0018      	movs	r0, r3
 80017c4:	f7ff fb00 	bl	8000dc8 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80017c8:	f7ff f9e2 	bl	8000b90 <HAL_GetTick>
 80017cc:	0002      	movs	r2, r0
 80017ce:	68fb      	ldr	r3, [r7, #12]
 80017d0:	1ad3      	subs	r3, r2, r3
 80017d2:	2b02      	cmp	r3, #2
 80017d4:	d90d      	bls.n	80017f2 <ADC_Enable+0xd2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017da:	2210      	movs	r2, #16
 80017dc:	431a      	orrs	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017e6:	2201      	movs	r2, #1
 80017e8:	431a      	orrs	r2, r3
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 80017ee:	2301      	movs	r3, #1
 80017f0:	e007      	b.n	8001802 <ADC_Enable+0xe2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	681b      	ldr	r3, [r3, #0]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2201      	movs	r2, #1
 80017fa:	4013      	ands	r3, r2
 80017fc:	2b01      	cmp	r3, #1
 80017fe:	d1d7      	bne.n	80017b0 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001800:	2300      	movs	r3, #0
}
 8001802:	0018      	movs	r0, r3
 8001804:	46bd      	mov	sp, r7
 8001806:	b004      	add	sp, #16
 8001808:	bd80      	pop	{r7, pc}
 800180a:	46c0      	nop			; (mov r8, r8)
 800180c:	80000017 	.word	0x80000017
 8001810:	40012708 	.word	0x40012708
 8001814:	2000000c 	.word	0x2000000c
 8001818:	00030d40 	.word	0x00030d40

0800181c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800181c:	b590      	push	{r4, r7, lr}
 800181e:	b083      	sub	sp, #12
 8001820:	af00      	add	r7, sp, #0
 8001822:	0002      	movs	r2, r0
 8001824:	6039      	str	r1, [r7, #0]
 8001826:	1dfb      	adds	r3, r7, #7
 8001828:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800182a:	1dfb      	adds	r3, r7, #7
 800182c:	781b      	ldrb	r3, [r3, #0]
 800182e:	2b7f      	cmp	r3, #127	; 0x7f
 8001830:	d828      	bhi.n	8001884 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001832:	4a2f      	ldr	r2, [pc, #188]	; (80018f0 <__NVIC_SetPriority+0xd4>)
 8001834:	1dfb      	adds	r3, r7, #7
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	b25b      	sxtb	r3, r3
 800183a:	089b      	lsrs	r3, r3, #2
 800183c:	33c0      	adds	r3, #192	; 0xc0
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	589b      	ldr	r3, [r3, r2]
 8001842:	1dfa      	adds	r2, r7, #7
 8001844:	7812      	ldrb	r2, [r2, #0]
 8001846:	0011      	movs	r1, r2
 8001848:	2203      	movs	r2, #3
 800184a:	400a      	ands	r2, r1
 800184c:	00d2      	lsls	r2, r2, #3
 800184e:	21ff      	movs	r1, #255	; 0xff
 8001850:	4091      	lsls	r1, r2
 8001852:	000a      	movs	r2, r1
 8001854:	43d2      	mvns	r2, r2
 8001856:	401a      	ands	r2, r3
 8001858:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	019b      	lsls	r3, r3, #6
 800185e:	22ff      	movs	r2, #255	; 0xff
 8001860:	401a      	ands	r2, r3
 8001862:	1dfb      	adds	r3, r7, #7
 8001864:	781b      	ldrb	r3, [r3, #0]
 8001866:	0018      	movs	r0, r3
 8001868:	2303      	movs	r3, #3
 800186a:	4003      	ands	r3, r0
 800186c:	00db      	lsls	r3, r3, #3
 800186e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001870:	481f      	ldr	r0, [pc, #124]	; (80018f0 <__NVIC_SetPriority+0xd4>)
 8001872:	1dfb      	adds	r3, r7, #7
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	b25b      	sxtb	r3, r3
 8001878:	089b      	lsrs	r3, r3, #2
 800187a:	430a      	orrs	r2, r1
 800187c:	33c0      	adds	r3, #192	; 0xc0
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 8001882:	e031      	b.n	80018e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001884:	4a1b      	ldr	r2, [pc, #108]	; (80018f4 <__NVIC_SetPriority+0xd8>)
 8001886:	1dfb      	adds	r3, r7, #7
 8001888:	781b      	ldrb	r3, [r3, #0]
 800188a:	0019      	movs	r1, r3
 800188c:	230f      	movs	r3, #15
 800188e:	400b      	ands	r3, r1
 8001890:	3b08      	subs	r3, #8
 8001892:	089b      	lsrs	r3, r3, #2
 8001894:	3306      	adds	r3, #6
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	18d3      	adds	r3, r2, r3
 800189a:	3304      	adds	r3, #4
 800189c:	681b      	ldr	r3, [r3, #0]
 800189e:	1dfa      	adds	r2, r7, #7
 80018a0:	7812      	ldrb	r2, [r2, #0]
 80018a2:	0011      	movs	r1, r2
 80018a4:	2203      	movs	r2, #3
 80018a6:	400a      	ands	r2, r1
 80018a8:	00d2      	lsls	r2, r2, #3
 80018aa:	21ff      	movs	r1, #255	; 0xff
 80018ac:	4091      	lsls	r1, r2
 80018ae:	000a      	movs	r2, r1
 80018b0:	43d2      	mvns	r2, r2
 80018b2:	401a      	ands	r2, r3
 80018b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80018b6:	683b      	ldr	r3, [r7, #0]
 80018b8:	019b      	lsls	r3, r3, #6
 80018ba:	22ff      	movs	r2, #255	; 0xff
 80018bc:	401a      	ands	r2, r3
 80018be:	1dfb      	adds	r3, r7, #7
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	0018      	movs	r0, r3
 80018c4:	2303      	movs	r3, #3
 80018c6:	4003      	ands	r3, r0
 80018c8:	00db      	lsls	r3, r3, #3
 80018ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80018cc:	4809      	ldr	r0, [pc, #36]	; (80018f4 <__NVIC_SetPriority+0xd8>)
 80018ce:	1dfb      	adds	r3, r7, #7
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	001c      	movs	r4, r3
 80018d4:	230f      	movs	r3, #15
 80018d6:	4023      	ands	r3, r4
 80018d8:	3b08      	subs	r3, #8
 80018da:	089b      	lsrs	r3, r3, #2
 80018dc:	430a      	orrs	r2, r1
 80018de:	3306      	adds	r3, #6
 80018e0:	009b      	lsls	r3, r3, #2
 80018e2:	18c3      	adds	r3, r0, r3
 80018e4:	3304      	adds	r3, #4
 80018e6:	601a      	str	r2, [r3, #0]
}
 80018e8:	46c0      	nop			; (mov r8, r8)
 80018ea:	46bd      	mov	sp, r7
 80018ec:	b003      	add	sp, #12
 80018ee:	bd90      	pop	{r4, r7, pc}
 80018f0:	e000e100 	.word	0xe000e100
 80018f4:	e000ed00 	.word	0xe000ed00

080018f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	1e5a      	subs	r2, r3, #1
 8001904:	2380      	movs	r3, #128	; 0x80
 8001906:	045b      	lsls	r3, r3, #17
 8001908:	429a      	cmp	r2, r3
 800190a:	d301      	bcc.n	8001910 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190c:	2301      	movs	r3, #1
 800190e:	e010      	b.n	8001932 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001910:	4b0a      	ldr	r3, [pc, #40]	; (800193c <SysTick_Config+0x44>)
 8001912:	687a      	ldr	r2, [r7, #4]
 8001914:	3a01      	subs	r2, #1
 8001916:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001918:	2301      	movs	r3, #1
 800191a:	425b      	negs	r3, r3
 800191c:	2103      	movs	r1, #3
 800191e:	0018      	movs	r0, r3
 8001920:	f7ff ff7c 	bl	800181c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x44>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x44>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	0018      	movs	r0, r3
 8001934:	46bd      	mov	sp, r7
 8001936:	b002      	add	sp, #8
 8001938:	bd80      	pop	{r7, pc}
 800193a:	46c0      	nop			; (mov r8, r8)
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriority>:
  *         with stm32c0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b084      	sub	sp, #16
 8001944:	af00      	add	r7, sp, #0
 8001946:	60b9      	str	r1, [r7, #8]
 8001948:	607a      	str	r2, [r7, #4]
 800194a:	210f      	movs	r1, #15
 800194c:	187b      	adds	r3, r7, r1
 800194e:	1c02      	adds	r2, r0, #0
 8001950:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);
  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 8001952:	68ba      	ldr	r2, [r7, #8]
 8001954:	187b      	adds	r3, r7, r1
 8001956:	781b      	ldrb	r3, [r3, #0]
 8001958:	b25b      	sxtb	r3, r3
 800195a:	0011      	movs	r1, r2
 800195c:	0018      	movs	r0, r3
 800195e:	f7ff ff5d 	bl	800181c <__NVIC_SetPriority>
}
 8001962:	46c0      	nop			; (mov r8, r8)
 8001964:	46bd      	mov	sp, r7
 8001966:	b004      	add	sp, #16
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	0018      	movs	r0, r3
 8001976:	f7ff ffbf 	bl	80018f8 <SysTick_Config>
 800197a:	0003      	movs	r3, r0
}
 800197c:	0018      	movs	r0, r3
 800197e:	46bd      	mov	sp, r7
 8001980:	b002      	add	sp, #8
 8001982:	bd80      	pop	{r7, pc}

08001984 <HAL_GPIO_Init>:
  * @param  pGPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *pGPIO_Init)
{
 8001984:	b580      	push	{r7, lr}
 8001986:	b086      	sub	sp, #24
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t tmp;
  uint32_t iocurrent;
  uint32_t position = 0U;
 800198e:	2300      	movs	r3, #0
 8001990:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(pGPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(pGPIO_Init->Mode));

  /* Configure the port pins */
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001992:	e14d      	b.n	8001c30 <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (pGPIO_Init->Pin) & (1UL << position);
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	2101      	movs	r1, #1
 800199a:	693a      	ldr	r2, [r7, #16]
 800199c:	4091      	lsls	r1, r2
 800199e:	000a      	movs	r2, r1
 80019a0:	4013      	ands	r3, r2
 80019a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0U)
 80019a4:	68fb      	ldr	r3, [r7, #12]
 80019a6:	2b00      	cmp	r3, #0
 80019a8:	d100      	bne.n	80019ac <HAL_GPIO_Init+0x28>
 80019aa:	e13e      	b.n	8001c2a <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_AF_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d003      	beq.n	80019bc <HAL_GPIO_Init+0x38>
 80019b4:	683b      	ldr	r3, [r7, #0]
 80019b6:	685b      	ldr	r3, [r3, #4]
 80019b8:	2b12      	cmp	r3, #18
 80019ba:	d125      	bne.n	8001a08 <HAL_GPIO_Init+0x84>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(pGPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        tmp = GPIOx->AFR[position >> 3U];
 80019bc:	693b      	ldr	r3, [r7, #16]
 80019be:	08da      	lsrs	r2, r3, #3
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	3208      	adds	r2, #8
 80019c4:	0092      	lsls	r2, r2, #2
 80019c6:	58d3      	ldr	r3, [r2, r3]
 80019c8:	617b      	str	r3, [r7, #20]
        tmp &= ~(0xFUL << ((position & 0x07U) * 4U)) ;
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	2207      	movs	r2, #7
 80019ce:	4013      	ands	r3, r2
 80019d0:	009b      	lsls	r3, r3, #2
 80019d2:	220f      	movs	r2, #15
 80019d4:	409a      	lsls	r2, r3
 80019d6:	0013      	movs	r3, r2
 80019d8:	43da      	mvns	r2, r3
 80019da:	697b      	ldr	r3, [r7, #20]
 80019dc:	4013      	ands	r3, r2
 80019de:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Alternate & 0x0FUL) << ((position & 0x07U) * 4U));
 80019e0:	683b      	ldr	r3, [r7, #0]
 80019e2:	691b      	ldr	r3, [r3, #16]
 80019e4:	220f      	movs	r2, #15
 80019e6:	401a      	ands	r2, r3
 80019e8:	693b      	ldr	r3, [r7, #16]
 80019ea:	2107      	movs	r1, #7
 80019ec:	400b      	ands	r3, r1
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	409a      	lsls	r2, r3
 80019f2:	0013      	movs	r3, r2
 80019f4:	697a      	ldr	r2, [r7, #20]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	617b      	str	r3, [r7, #20]
        GPIOx->AFR[position >> 3U] = tmp;
 80019fa:	693b      	ldr	r3, [r7, #16]
 80019fc:	08da      	lsrs	r2, r3, #3
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	3208      	adds	r2, #8
 8001a02:	0092      	lsls	r2, r2, #2
 8001a04:	6979      	ldr	r1, [r7, #20]
 8001a06:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      tmp = GPIOx->MODER;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	617b      	str	r3, [r7, #20]
      tmp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8001a0e:	693b      	ldr	r3, [r7, #16]
 8001a10:	005b      	lsls	r3, r3, #1
 8001a12:	2203      	movs	r2, #3
 8001a14:	409a      	lsls	r2, r3
 8001a16:	0013      	movs	r3, r2
 8001a18:	43da      	mvns	r2, r3
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	617b      	str	r3, [r7, #20]
      tmp |= ((pGPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a20:	683b      	ldr	r3, [r7, #0]
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	2203      	movs	r2, #3
 8001a26:	401a      	ands	r2, r3
 8001a28:	693b      	ldr	r3, [r7, #16]
 8001a2a:	005b      	lsls	r3, r3, #1
 8001a2c:	409a      	lsls	r2, r3
 8001a2e:	0013      	movs	r3, r2
 8001a30:	697a      	ldr	r2, [r7, #20]
 8001a32:	4313      	orrs	r3, r2
 8001a34:	617b      	str	r3, [r7, #20]
      GPIOx->MODER = tmp;
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	697a      	ldr	r2, [r7, #20]
 8001a3a:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a3c:	683b      	ldr	r3, [r7, #0]
 8001a3e:	685b      	ldr	r3, [r3, #4]
 8001a40:	2b01      	cmp	r3, #1
 8001a42:	d00b      	beq.n	8001a5c <HAL_GPIO_Init+0xd8>
 8001a44:	683b      	ldr	r3, [r7, #0]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d007      	beq.n	8001a5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	685b      	ldr	r3, [r3, #4]
      if ((pGPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (pGPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001a50:	2b11      	cmp	r3, #17
 8001a52:	d003      	beq.n	8001a5c <HAL_GPIO_Init+0xd8>
          (pGPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (pGPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001a54:	683b      	ldr	r3, [r7, #0]
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	2b12      	cmp	r3, #18
 8001a5a:	d130      	bne.n	8001abe <HAL_GPIO_Init+0x13a>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(pGPIO_Init->Speed));

        /* Configure the IO Speed */
        tmp = GPIOx->OSPEEDR;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8001a62:	693b      	ldr	r3, [r7, #16]
 8001a64:	005b      	lsls	r3, r3, #1
 8001a66:	2203      	movs	r2, #3
 8001a68:	409a      	lsls	r2, r3
 8001a6a:	0013      	movs	r3, r2
 8001a6c:	43da      	mvns	r2, r3
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	4013      	ands	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]
        tmp |= (pGPIO_Init->Speed << (position * 2U));
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68da      	ldr	r2, [r3, #12]
 8001a78:	693b      	ldr	r3, [r7, #16]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	409a      	lsls	r2, r3
 8001a7e:	0013      	movs	r3, r2
 8001a80:	697a      	ldr	r2, [r7, #20]
 8001a82:	4313      	orrs	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
        GPIOx->OSPEEDR = tmp;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	697a      	ldr	r2, [r7, #20]
 8001a8a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        tmp = GPIOx->OTYPER;
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	685b      	ldr	r3, [r3, #4]
 8001a90:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a92:	2201      	movs	r2, #1
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	43da      	mvns	r2, r3
 8001a9c:	697b      	ldr	r3, [r7, #20]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	617b      	str	r3, [r7, #20]
        tmp |= (((pGPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8001aa2:	683b      	ldr	r3, [r7, #0]
 8001aa4:	685b      	ldr	r3, [r3, #4]
 8001aa6:	091b      	lsrs	r3, r3, #4
 8001aa8:	2201      	movs	r2, #1
 8001aaa:	401a      	ands	r2, r3
 8001aac:	693b      	ldr	r3, [r7, #16]
 8001aae:	409a      	lsls	r2, r3
 8001ab0:	0013      	movs	r3, r2
 8001ab2:	697a      	ldr	r2, [r7, #20]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	617b      	str	r3, [r7, #20]
        GPIOx->OTYPER = tmp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	697a      	ldr	r2, [r7, #20]
 8001abc:	605a      	str	r2, [r3, #4]
      }

      if (pGPIO_Init->Mode != GPIO_MODE_ANALOG)
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	2b03      	cmp	r3, #3
 8001ac4:	d017      	beq.n	8001af6 <HAL_GPIO_Init+0x172>
      {
        /* Check the Pull parameters */
        assert_param(IS_GPIO_PULL(pGPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        tmp = GPIOx->PUPDR;
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	68db      	ldr	r3, [r3, #12]
 8001aca:	617b      	str	r3, [r7, #20]
        tmp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001acc:	693b      	ldr	r3, [r7, #16]
 8001ace:	005b      	lsls	r3, r3, #1
 8001ad0:	2203      	movs	r2, #3
 8001ad2:	409a      	lsls	r2, r3
 8001ad4:	0013      	movs	r3, r2
 8001ad6:	43da      	mvns	r2, r3
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	4013      	ands	r3, r2
 8001adc:	617b      	str	r3, [r7, #20]
        tmp |= ((pGPIO_Init->Pull) << (position * 2U));
 8001ade:	683b      	ldr	r3, [r7, #0]
 8001ae0:	689a      	ldr	r2, [r3, #8]
 8001ae2:	693b      	ldr	r3, [r7, #16]
 8001ae4:	005b      	lsls	r3, r3, #1
 8001ae6:	409a      	lsls	r2, r3
 8001ae8:	0013      	movs	r3, r2
 8001aea:	697a      	ldr	r2, [r7, #20]
 8001aec:	4313      	orrs	r3, r2
 8001aee:	617b      	str	r3, [r7, #20]
        GPIOx->PUPDR = tmp;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	697a      	ldr	r2, [r7, #20]
 8001af4:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((pGPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685a      	ldr	r2, [r3, #4]
 8001afa:	2380      	movs	r3, #128	; 0x80
 8001afc:	055b      	lsls	r3, r3, #21
 8001afe:	4013      	ands	r3, r2
 8001b00:	d100      	bne.n	8001b04 <HAL_GPIO_Init+0x180>
 8001b02:	e092      	b.n	8001c2a <HAL_GPIO_Init+0x2a6>
      {
        tmp = EXTI->EXTICR[position >> 2U];
 8001b04:	4a50      	ldr	r2, [pc, #320]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b06:	693b      	ldr	r3, [r7, #16]
 8001b08:	089b      	lsrs	r3, r3, #2
 8001b0a:	3318      	adds	r3, #24
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	589b      	ldr	r3, [r3, r2]
 8001b10:	617b      	str	r3, [r7, #20]
        tmp &= ~((0x0FUL) << (8U * (position & 0x03U)));
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	2203      	movs	r2, #3
 8001b16:	4013      	ands	r3, r2
 8001b18:	00db      	lsls	r3, r3, #3
 8001b1a:	220f      	movs	r2, #15
 8001b1c:	409a      	lsls	r2, r3
 8001b1e:	0013      	movs	r3, r2
 8001b20:	43da      	mvns	r2, r3
 8001b22:	697b      	ldr	r3, [r7, #20]
 8001b24:	4013      	ands	r3, r2
 8001b26:	617b      	str	r3, [r7, #20]
        tmp |= (GPIO_GET_INDEX(GPIOx) << (8U * (position & 0x03U)));
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	23a0      	movs	r3, #160	; 0xa0
 8001b2c:	05db      	lsls	r3, r3, #23
 8001b2e:	429a      	cmp	r2, r3
 8001b30:	d013      	beq.n	8001b5a <HAL_GPIO_Init+0x1d6>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a45      	ldr	r2, [pc, #276]	; (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d00d      	beq.n	8001b56 <HAL_GPIO_Init+0x1d2>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	4a44      	ldr	r2, [pc, #272]	; (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b3e:	4293      	cmp	r3, r2
 8001b40:	d007      	beq.n	8001b52 <HAL_GPIO_Init+0x1ce>
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4a43      	ldr	r2, [pc, #268]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d101      	bne.n	8001b4e <HAL_GPIO_Init+0x1ca>
 8001b4a:	2305      	movs	r3, #5
 8001b4c:	e006      	b.n	8001b5c <HAL_GPIO_Init+0x1d8>
 8001b4e:	2306      	movs	r3, #6
 8001b50:	e004      	b.n	8001b5c <HAL_GPIO_Init+0x1d8>
 8001b52:	2302      	movs	r3, #2
 8001b54:	e002      	b.n	8001b5c <HAL_GPIO_Init+0x1d8>
 8001b56:	2301      	movs	r3, #1
 8001b58:	e000      	b.n	8001b5c <HAL_GPIO_Init+0x1d8>
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	2103      	movs	r1, #3
 8001b60:	400a      	ands	r2, r1
 8001b62:	00d2      	lsls	r2, r2, #3
 8001b64:	4093      	lsls	r3, r2
 8001b66:	697a      	ldr	r2, [r7, #20]
 8001b68:	4313      	orrs	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
        EXTI->EXTICR[position >> 2U] = tmp;
 8001b6c:	4936      	ldr	r1, [pc, #216]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b6e:	693b      	ldr	r3, [r7, #16]
 8001b70:	089b      	lsrs	r3, r3, #2
 8001b72:	3318      	adds	r3, #24
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	697a      	ldr	r2, [r7, #20]
 8001b78:	505a      	str	r2, [r3, r1]

        /* Clear EXTI line configuration */
        tmp = EXTI->IMR1;
 8001b7a:	4a33      	ldr	r2, [pc, #204]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b7c:	2380      	movs	r3, #128	; 0x80
 8001b7e:	58d3      	ldr	r3, [r2, r3]
 8001b80:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001b82:	68fb      	ldr	r3, [r7, #12]
 8001b84:	43da      	mvns	r2, r3
 8001b86:	697b      	ldr	r3, [r7, #20]
 8001b88:	4013      	ands	r3, r2
 8001b8a:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	685a      	ldr	r2, [r3, #4]
 8001b90:	2380      	movs	r3, #128	; 0x80
 8001b92:	025b      	lsls	r3, r3, #9
 8001b94:	4013      	ands	r3, r2
 8001b96:	d003      	beq.n	8001ba0 <HAL_GPIO_Init+0x21c>
        {
          tmp |= iocurrent;
 8001b98:	697a      	ldr	r2, [r7, #20]
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]
        }
        EXTI->IMR1 = tmp;
 8001ba0:	4929      	ldr	r1, [pc, #164]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001ba2:	2280      	movs	r2, #128	; 0x80
 8001ba4:	697b      	ldr	r3, [r7, #20]
 8001ba6:	508b      	str	r3, [r1, r2]

        tmp = EXTI->EMR1;
 8001ba8:	4a27      	ldr	r2, [pc, #156]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001baa:	2384      	movs	r3, #132	; 0x84
 8001bac:	58d3      	ldr	r3, [r2, r3]
 8001bae:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	43da      	mvns	r2, r3
 8001bb4:	697b      	ldr	r3, [r7, #20]
 8001bb6:	4013      	ands	r3, r2
 8001bb8:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bba:	683b      	ldr	r3, [r7, #0]
 8001bbc:	685a      	ldr	r2, [r3, #4]
 8001bbe:	2380      	movs	r3, #128	; 0x80
 8001bc0:	029b      	lsls	r3, r3, #10
 8001bc2:	4013      	ands	r3, r2
 8001bc4:	d003      	beq.n	8001bce <HAL_GPIO_Init+0x24a>
        {
          tmp |= iocurrent;
 8001bc6:	697a      	ldr	r2, [r7, #20]
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	4313      	orrs	r3, r2
 8001bcc:	617b      	str	r3, [r7, #20]
        }
        EXTI->EMR1 = tmp;
 8001bce:	491e      	ldr	r1, [pc, #120]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001bd0:	2284      	movs	r2, #132	; 0x84
 8001bd2:	697b      	ldr	r3, [r7, #20]
 8001bd4:	508b      	str	r3, [r1, r2]

        /* Clear Rising Falling edge configuration */
        tmp = EXTI->RTSR1;
 8001bd6:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	43da      	mvns	r2, r3
 8001be0:	697b      	ldr	r3, [r7, #20]
 8001be2:	4013      	ands	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	685a      	ldr	r2, [r3, #4]
 8001bea:	2380      	movs	r3, #128	; 0x80
 8001bec:	035b      	lsls	r3, r3, #13
 8001bee:	4013      	ands	r3, r2
 8001bf0:	d003      	beq.n	8001bfa <HAL_GPIO_Init+0x276>
        {
          tmp |= iocurrent;
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	4313      	orrs	r3, r2
 8001bf8:	617b      	str	r3, [r7, #20]
        }
        EXTI->RTSR1 = tmp;
 8001bfa:	4b13      	ldr	r3, [pc, #76]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001bfc:	697a      	ldr	r2, [r7, #20]
 8001bfe:	601a      	str	r2, [r3, #0]

        tmp = EXTI->FTSR1;
 8001c00:	4b11      	ldr	r3, [pc, #68]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001c02:	685b      	ldr	r3, [r3, #4]
 8001c04:	617b      	str	r3, [r7, #20]
        tmp &= ~((uint32_t)iocurrent);
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	43da      	mvns	r2, r3
 8001c0a:	697b      	ldr	r3, [r7, #20]
 8001c0c:	4013      	ands	r3, r2
 8001c0e:	617b      	str	r3, [r7, #20]
        if ((pGPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	685a      	ldr	r2, [r3, #4]
 8001c14:	2380      	movs	r3, #128	; 0x80
 8001c16:	039b      	lsls	r3, r3, #14
 8001c18:	4013      	ands	r3, r2
 8001c1a:	d003      	beq.n	8001c24 <HAL_GPIO_Init+0x2a0>
        {
          tmp |= iocurrent;
 8001c1c:	697a      	ldr	r2, [r7, #20]
 8001c1e:	68fb      	ldr	r3, [r7, #12]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	617b      	str	r3, [r7, #20]
        }
        EXTI->FTSR1 = tmp;
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	605a      	str	r2, [r3, #4]
      }
    }

    position++;
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	613b      	str	r3, [r7, #16]
  while (((pGPIO_Init->Pin) >> position) != 0U)
 8001c30:	683b      	ldr	r3, [r7, #0]
 8001c32:	681a      	ldr	r2, [r3, #0]
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	40da      	lsrs	r2, r3
 8001c38:	1e13      	subs	r3, r2, #0
 8001c3a:	d000      	beq.n	8001c3e <HAL_GPIO_Init+0x2ba>
 8001c3c:	e6aa      	b.n	8001994 <HAL_GPIO_Init+0x10>
  }
}
 8001c3e:	46c0      	nop			; (mov r8, r8)
 8001c40:	46c0      	nop			; (mov r8, r8)
 8001c42:	46bd      	mov	sp, r7
 8001c44:	b006      	add	sp, #24
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40021800 	.word	0x40021800
 8001c4c:	50000400 	.word	0x50000400
 8001c50:	50000800 	.word	0x50000800
 8001c54:	50001400 	.word	0x50001400

08001c58 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b082      	sub	sp, #8
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	6078      	str	r0, [r7, #4]
 8001c60:	0008      	movs	r0, r1
 8001c62:	0011      	movs	r1, r2
 8001c64:	1cbb      	adds	r3, r7, #2
 8001c66:	1c02      	adds	r2, r0, #0
 8001c68:	801a      	strh	r2, [r3, #0]
 8001c6a:	1c7b      	adds	r3, r7, #1
 8001c6c:	1c0a      	adds	r2, r1, #0
 8001c6e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c70:	1c7b      	adds	r3, r7, #1
 8001c72:	781b      	ldrb	r3, [r3, #0]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d004      	beq.n	8001c82 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c78:	1cbb      	adds	r3, r7, #2
 8001c7a:	881a      	ldrh	r2, [r3, #0]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c80:	e003      	b.n	8001c8a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c82:	1cbb      	adds	r3, r7, #2
 8001c84:	881a      	ldrh	r2, [r3, #0]
 8001c86:	687b      	ldr	r3, [r7, #4]
 8001c88:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	b002      	add	sp, #8
 8001c90:	bd80      	pop	{r7, pc}
	...

08001c94 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001c94:	b580      	push	{r7, lr}
 8001c96:	b082      	sub	sp, #8
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	2b00      	cmp	r3, #0
 8001ca0:	d101      	bne.n	8001ca6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001ca2:	2301      	movs	r3, #1
 8001ca4:	e08f      	b.n	8001dc6 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2241      	movs	r2, #65	; 0x41
 8001caa:	5c9b      	ldrb	r3, [r3, r2]
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d107      	bne.n	8001cc2 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	2240      	movs	r2, #64	; 0x40
 8001cb6:	2100      	movs	r1, #0
 8001cb8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	0018      	movs	r0, r3
 8001cbe:	f7fe fde3 	bl	8000888 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2241      	movs	r2, #65	; 0x41
 8001cc6:	2124      	movs	r1, #36	; 0x24
 8001cc8:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	681a      	ldr	r2, [r3, #0]
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	438a      	bics	r2, r1
 8001cd8:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	685a      	ldr	r2, [r3, #4]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	493b      	ldr	r1, [pc, #236]	; (8001dd0 <HAL_I2C_Init+0x13c>)
 8001ce4:	400a      	ands	r2, r1
 8001ce6:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	689a      	ldr	r2, [r3, #8]
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	4938      	ldr	r1, [pc, #224]	; (8001dd4 <HAL_I2C_Init+0x140>)
 8001cf4:	400a      	ands	r2, r1
 8001cf6:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	68db      	ldr	r3, [r3, #12]
 8001cfc:	2b01      	cmp	r3, #1
 8001cfe:	d108      	bne.n	8001d12 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	689a      	ldr	r2, [r3, #8]
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	2180      	movs	r1, #128	; 0x80
 8001d0a:	0209      	lsls	r1, r1, #8
 8001d0c:	430a      	orrs	r2, r1
 8001d0e:	609a      	str	r2, [r3, #8]
 8001d10:	e007      	b.n	8001d22 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	689a      	ldr	r2, [r3, #8]
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	2184      	movs	r1, #132	; 0x84
 8001d1c:	0209      	lsls	r1, r1, #8
 8001d1e:	430a      	orrs	r2, r1
 8001d20:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	68db      	ldr	r3, [r3, #12]
 8001d26:	2b02      	cmp	r3, #2
 8001d28:	d109      	bne.n	8001d3e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	681b      	ldr	r3, [r3, #0]
 8001d2e:	685a      	ldr	r2, [r3, #4]
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	681b      	ldr	r3, [r3, #0]
 8001d34:	2180      	movs	r1, #128	; 0x80
 8001d36:	0109      	lsls	r1, r1, #4
 8001d38:	430a      	orrs	r2, r1
 8001d3a:	605a      	str	r2, [r3, #4]
 8001d3c:	e007      	b.n	8001d4e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	685a      	ldr	r2, [r3, #4]
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	4923      	ldr	r1, [pc, #140]	; (8001dd8 <HAL_I2C_Init+0x144>)
 8001d4a:	400a      	ands	r2, r1
 8001d4c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	681b      	ldr	r3, [r3, #0]
 8001d52:	685a      	ldr	r2, [r3, #4]
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4920      	ldr	r1, [pc, #128]	; (8001ddc <HAL_I2C_Init+0x148>)
 8001d5a:	430a      	orrs	r2, r1
 8001d5c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	681b      	ldr	r3, [r3, #0]
 8001d62:	68da      	ldr	r2, [r3, #12]
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	491a      	ldr	r1, [pc, #104]	; (8001dd4 <HAL_I2C_Init+0x140>)
 8001d6a:	400a      	ands	r2, r1
 8001d6c:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	691a      	ldr	r2, [r3, #16]
 8001d72:	687b      	ldr	r3, [r7, #4]
 8001d74:	695b      	ldr	r3, [r3, #20]
 8001d76:	431a      	orrs	r2, r3
 8001d78:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	699b      	ldr	r3, [r3, #24]
 8001d7e:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	430a      	orrs	r2, r1
 8001d86:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	69d9      	ldr	r1, [r3, #28]
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	6a1a      	ldr	r2, [r3, #32]
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	430a      	orrs	r2, r1
 8001d96:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	2101      	movs	r1, #1
 8001da4:	430a      	orrs	r2, r1
 8001da6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	2200      	movs	r2, #0
 8001dac:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	2241      	movs	r2, #65	; 0x41
 8001db2:	2120      	movs	r1, #32
 8001db4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	2200      	movs	r2, #0
 8001dba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	2242      	movs	r2, #66	; 0x42
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8001dc4:	2300      	movs	r3, #0
}
 8001dc6:	0018      	movs	r0, r3
 8001dc8:	46bd      	mov	sp, r7
 8001dca:	b002      	add	sp, #8
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	46c0      	nop			; (mov r8, r8)
 8001dd0:	f0ffffff 	.word	0xf0ffffff
 8001dd4:	ffff7fff 	.word	0xffff7fff
 8001dd8:	fffff7ff 	.word	0xfffff7ff
 8001ddc:	02008000 	.word	0x02008000

08001de0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
 8001de8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	2241      	movs	r2, #65	; 0x41
 8001dee:	5c9b      	ldrb	r3, [r3, r2]
 8001df0:	b2db      	uxtb	r3, r3
 8001df2:	2b20      	cmp	r3, #32
 8001df4:	d138      	bne.n	8001e68 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2240      	movs	r2, #64	; 0x40
 8001dfa:	5c9b      	ldrb	r3, [r3, r2]
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001e00:	2302      	movs	r3, #2
 8001e02:	e032      	b.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2240      	movs	r2, #64	; 0x40
 8001e08:	2101      	movs	r1, #1
 8001e0a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	2241      	movs	r2, #65	; 0x41
 8001e10:	2124      	movs	r1, #36	; 0x24
 8001e12:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	681a      	ldr	r2, [r3, #0]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	2101      	movs	r1, #1
 8001e20:	438a      	bics	r2, r1
 8001e22:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	681a      	ldr	r2, [r3, #0]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4911      	ldr	r1, [pc, #68]	; (8001e74 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8001e30:	400a      	ands	r2, r1
 8001e32:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	6819      	ldr	r1, [r3, #0]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	683a      	ldr	r2, [r7, #0]
 8001e40:	430a      	orrs	r2, r1
 8001e42:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	681a      	ldr	r2, [r3, #0]
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	2101      	movs	r1, #1
 8001e50:	430a      	orrs	r2, r1
 8001e52:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2241      	movs	r2, #65	; 0x41
 8001e58:	2120      	movs	r1, #32
 8001e5a:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2240      	movs	r2, #64	; 0x40
 8001e60:	2100      	movs	r1, #0
 8001e62:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001e64:	2300      	movs	r3, #0
 8001e66:	e000      	b.n	8001e6a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001e68:	2302      	movs	r3, #2
  }
}
 8001e6a:	0018      	movs	r0, r3
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	b002      	add	sp, #8
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	46c0      	nop			; (mov r8, r8)
 8001e74:	ffffefff 	.word	0xffffefff

08001e78 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
 8001e80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2241      	movs	r2, #65	; 0x41
 8001e86:	5c9b      	ldrb	r3, [r3, r2]
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	2b20      	cmp	r3, #32
 8001e8c:	d139      	bne.n	8001f02 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	2240      	movs	r2, #64	; 0x40
 8001e92:	5c9b      	ldrb	r3, [r3, r2]
 8001e94:	2b01      	cmp	r3, #1
 8001e96:	d101      	bne.n	8001e9c <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e033      	b.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2240      	movs	r2, #64	; 0x40
 8001ea0:	2101      	movs	r1, #1
 8001ea2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2241      	movs	r2, #65	; 0x41
 8001ea8:	2124      	movs	r1, #36	; 0x24
 8001eaa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	681a      	ldr	r2, [r3, #0]
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	2101      	movs	r1, #1
 8001eb8:	438a      	bics	r2, r1
 8001eba:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	4a11      	ldr	r2, [pc, #68]	; (8001f0c <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 8001ec8:	4013      	ands	r3, r2
 8001eca:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001ecc:	683b      	ldr	r3, [r7, #0]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	68fa      	ldr	r2, [r7, #12]
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	68fa      	ldr	r2, [r7, #12]
 8001edc:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	2101      	movs	r1, #1
 8001eea:	430a      	orrs	r2, r1
 8001eec:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2241      	movs	r2, #65	; 0x41
 8001ef2:	2120      	movs	r1, #32
 8001ef4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2240      	movs	r2, #64	; 0x40
 8001efa:	2100      	movs	r1, #0
 8001efc:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8001efe:	2300      	movs	r3, #0
 8001f00:	e000      	b.n	8001f04 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001f02:	2302      	movs	r3, #2
  }
}
 8001f04:	0018      	movs	r0, r3
 8001f06:	46bd      	mov	sp, r7
 8001f08:	b004      	add	sp, #16
 8001f0a:	bd80      	pop	{r7, pc}
 8001f0c:	fffff0ff 	.word	0xfffff0ff

08001f10 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d101      	bne.n	8001f22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f1e:	2301      	movs	r3, #1
 8001f20:	e1d0      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	2201      	movs	r2, #1
 8001f28:	4013      	ands	r3, r2
 8001f2a:	d100      	bne.n	8001f2e <HAL_RCC_OscConfig+0x1e>
 8001f2c:	e069      	b.n	8002002 <HAL_RCC_OscConfig+0xf2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001f2e:	4bc8      	ldr	r3, [pc, #800]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f30:	689b      	ldr	r3, [r3, #8]
 8001f32:	2238      	movs	r2, #56	; 0x38
 8001f34:	4013      	ands	r3, r2
 8001f36:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock in these cases it is not allowed to be disabled */
    if (temp_sysclksrc == RCC_CFGR_SWS_HSE)
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2b08      	cmp	r3, #8
 8001f3c:	d105      	bne.n	8001f4a <HAL_RCC_OscConfig+0x3a>
    {
      if (RCC_OscInitStruct->HSEState == RCC_HSE_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	685b      	ldr	r3, [r3, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d15d      	bne.n	8002002 <HAL_RCC_OscConfig+0xf2>
      {
        return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e1bc      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	685a      	ldr	r2, [r3, #4]
 8001f4e:	2380      	movs	r3, #128	; 0x80
 8001f50:	025b      	lsls	r3, r3, #9
 8001f52:	429a      	cmp	r2, r3
 8001f54:	d107      	bne.n	8001f66 <HAL_RCC_OscConfig+0x56>
 8001f56:	4bbe      	ldr	r3, [pc, #760]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f58:	681a      	ldr	r2, [r3, #0]
 8001f5a:	4bbd      	ldr	r3, [pc, #756]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f5c:	2180      	movs	r1, #128	; 0x80
 8001f5e:	0249      	lsls	r1, r1, #9
 8001f60:	430a      	orrs	r2, r1
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	e020      	b.n	8001fa8 <HAL_RCC_OscConfig+0x98>
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	685a      	ldr	r2, [r3, #4]
 8001f6a:	23a0      	movs	r3, #160	; 0xa0
 8001f6c:	02db      	lsls	r3, r3, #11
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	d10e      	bne.n	8001f90 <HAL_RCC_OscConfig+0x80>
 8001f72:	4bb7      	ldr	r3, [pc, #732]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f74:	681a      	ldr	r2, [r3, #0]
 8001f76:	4bb6      	ldr	r3, [pc, #728]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f78:	2180      	movs	r1, #128	; 0x80
 8001f7a:	02c9      	lsls	r1, r1, #11
 8001f7c:	430a      	orrs	r2, r1
 8001f7e:	601a      	str	r2, [r3, #0]
 8001f80:	4bb3      	ldr	r3, [pc, #716]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f82:	681a      	ldr	r2, [r3, #0]
 8001f84:	4bb2      	ldr	r3, [pc, #712]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f86:	2180      	movs	r1, #128	; 0x80
 8001f88:	0249      	lsls	r1, r1, #9
 8001f8a:	430a      	orrs	r2, r1
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	e00b      	b.n	8001fa8 <HAL_RCC_OscConfig+0x98>
 8001f90:	4baf      	ldr	r3, [pc, #700]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f92:	681a      	ldr	r2, [r3, #0]
 8001f94:	4bae      	ldr	r3, [pc, #696]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f96:	49af      	ldr	r1, [pc, #700]	; (8002254 <HAL_RCC_OscConfig+0x344>)
 8001f98:	400a      	ands	r2, r1
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	4bac      	ldr	r3, [pc, #688]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	4bab      	ldr	r3, [pc, #684]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001fa2:	49ad      	ldr	r1, [pc, #692]	; (8002258 <HAL_RCC_OscConfig+0x348>)
 8001fa4:	400a      	ands	r2, r1
 8001fa6:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	685b      	ldr	r3, [r3, #4]
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d014      	beq.n	8001fda <HAL_RCC_OscConfig+0xca>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fb0:	f7fe fdee 	bl	8000b90 <HAL_GetTick>
 8001fb4:	0003      	movs	r3, r0
 8001fb6:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fb8:	e008      	b.n	8001fcc <HAL_RCC_OscConfig+0xbc>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fba:	f7fe fde9 	bl	8000b90 <HAL_GetTick>
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	693b      	ldr	r3, [r7, #16]
 8001fc2:	1ad3      	subs	r3, r2, r3
 8001fc4:	2b64      	cmp	r3, #100	; 0x64
 8001fc6:	d901      	bls.n	8001fcc <HAL_RCC_OscConfig+0xbc>
          {
            return HAL_TIMEOUT;
 8001fc8:	2303      	movs	r3, #3
 8001fca:	e17b      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001fcc:	4ba0      	ldr	r3, [pc, #640]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001fce:	681a      	ldr	r2, [r3, #0]
 8001fd0:	2380      	movs	r3, #128	; 0x80
 8001fd2:	029b      	lsls	r3, r3, #10
 8001fd4:	4013      	ands	r3, r2
 8001fd6:	d0f0      	beq.n	8001fba <HAL_RCC_OscConfig+0xaa>
 8001fd8:	e013      	b.n	8002002 <HAL_RCC_OscConfig+0xf2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fda:	f7fe fdd9 	bl	8000b90 <HAL_GetTick>
 8001fde:	0003      	movs	r3, r0
 8001fe0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001fe2:	e008      	b.n	8001ff6 <HAL_RCC_OscConfig+0xe6>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSE_TIMEOUT_VALUE)
 8001fe4:	f7fe fdd4 	bl	8000b90 <HAL_GetTick>
 8001fe8:	0002      	movs	r2, r0
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	1ad3      	subs	r3, r2, r3
 8001fee:	2b64      	cmp	r3, #100	; 0x64
 8001ff0:	d901      	bls.n	8001ff6 <HAL_RCC_OscConfig+0xe6>
          {
            return HAL_TIMEOUT;
 8001ff2:	2303      	movs	r3, #3
 8001ff4:	e166      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001ff6:	4b96      	ldr	r3, [pc, #600]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	2380      	movs	r3, #128	; 0x80
 8001ffc:	029b      	lsls	r3, r3, #10
 8001ffe:	4013      	ands	r3, r2
 8002000:	d1f0      	bne.n	8001fe4 <HAL_RCC_OscConfig+0xd4>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	681b      	ldr	r3, [r3, #0]
 8002006:	2202      	movs	r2, #2
 8002008:	4013      	ands	r3, r2
 800200a:	d100      	bne.n	800200e <HAL_RCC_OscConfig+0xfe>
 800200c:	e086      	b.n	800211c <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI48 is used as system clock  */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800200e:	4b90      	ldr	r3, [pc, #576]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	2238      	movs	r2, #56	; 0x38
 8002014:	4013      	ands	r3, r2
 8002016:	617b      	str	r3, [r7, #20]

    if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002018:	697b      	ldr	r3, [r7, #20]
 800201a:	2b00      	cmp	r3, #0
 800201c:	d12f      	bne.n	800207e <HAL_RCC_OscConfig+0x16e>
    {
      /* When HSI is used as system clock it can not be disabled */
      if (RCC_OscInitStruct->HSIState == RCC_HSI_OFF)
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	68db      	ldr	r3, [r3, #12]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d101      	bne.n	800202a <HAL_RCC_OscConfig+0x11a>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e14c      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800202a:	4b89      	ldr	r3, [pc, #548]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	4a8b      	ldr	r2, [pc, #556]	; (800225c <HAL_RCC_OscConfig+0x34c>)
 8002030:	4013      	ands	r3, r2
 8002032:	0019      	movs	r1, r3
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	695b      	ldr	r3, [r3, #20]
 8002038:	021a      	lsls	r2, r3, #8
 800203a:	4b85      	ldr	r3, [pc, #532]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800203c:	430a      	orrs	r2, r1
 800203e:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_CFGR_SWS_HSI)
 8002040:	697b      	ldr	r3, [r7, #20]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d112      	bne.n	800206c <HAL_RCC_OscConfig+0x15c>
        {
          /* Adjust the HSI48 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002046:	4b82      	ldr	r3, [pc, #520]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	4a85      	ldr	r2, [pc, #532]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800204c:	4013      	ands	r3, r2
 800204e:	0019      	movs	r1, r3
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	691a      	ldr	r2, [r3, #16]
 8002054:	4b7e      	ldr	r3, [pc, #504]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002056:	430a      	orrs	r2, r1
 8002058:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800205a:	4b7d      	ldr	r3, [pc, #500]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	0adb      	lsrs	r3, r3, #11
 8002060:	2207      	movs	r2, #7
 8002062:	4013      	ands	r3, r2
 8002064:	4a7f      	ldr	r2, [pc, #508]	; (8002264 <HAL_RCC_OscConfig+0x354>)
 8002066:	40da      	lsrs	r2, r3
 8002068:	4b7f      	ldr	r3, [pc, #508]	; (8002268 <HAL_RCC_OscConfig+0x358>)
 800206a:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800206c:	4b7f      	ldr	r3, [pc, #508]	; (800226c <HAL_RCC_OscConfig+0x35c>)
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	0018      	movs	r0, r3
 8002072:	f7fe fd31 	bl	8000ad8 <HAL_InitTick>
 8002076:	1e03      	subs	r3, r0, #0
 8002078:	d050      	beq.n	800211c <HAL_RCC_OscConfig+0x20c>
        {
          return HAL_ERROR;
 800207a:	2301      	movs	r3, #1
 800207c:	e122      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d030      	beq.n	80020e8 <HAL_RCC_OscConfig+0x1d8>
      {
        /* Configure the HSI48 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8002086:	4b72      	ldr	r3, [pc, #456]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a75      	ldr	r2, [pc, #468]	; (8002260 <HAL_RCC_OscConfig+0x350>)
 800208c:	4013      	ands	r3, r2
 800208e:	0019      	movs	r1, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	691a      	ldr	r2, [r3, #16]
 8002094:	4b6e      	ldr	r3, [pc, #440]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002096:	430a      	orrs	r2, r1
 8002098:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_ENABLE();
 800209a:	4b6d      	ldr	r3, [pc, #436]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800209c:	681a      	ldr	r2, [r3, #0]
 800209e:	4b6c      	ldr	r3, [pc, #432]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020a0:	2180      	movs	r1, #128	; 0x80
 80020a2:	0049      	lsls	r1, r1, #1
 80020a4:	430a      	orrs	r2, r1
 80020a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020a8:	f7fe fd72 	bl	8000b90 <HAL_GetTick>
 80020ac:	0003      	movs	r3, r0
 80020ae:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020b0:	e008      	b.n	80020c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020b2:	f7fe fd6d 	bl	8000b90 <HAL_GetTick>
 80020b6:	0002      	movs	r2, r0
 80020b8:	693b      	ldr	r3, [r7, #16]
 80020ba:	1ad3      	subs	r3, r2, r3
 80020bc:	2b02      	cmp	r3, #2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0ff      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80020c4:	4b62      	ldr	r3, [pc, #392]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020c6:	681a      	ldr	r2, [r3, #0]
 80020c8:	2380      	movs	r3, #128	; 0x80
 80020ca:	00db      	lsls	r3, r3, #3
 80020cc:	4013      	ands	r3, r2
 80020ce:	d0f0      	beq.n	80020b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d0:	4b5f      	ldr	r3, [pc, #380]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020d2:	685b      	ldr	r3, [r3, #4]
 80020d4:	4a61      	ldr	r2, [pc, #388]	; (800225c <HAL_RCC_OscConfig+0x34c>)
 80020d6:	4013      	ands	r3, r2
 80020d8:	0019      	movs	r1, r3
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	695b      	ldr	r3, [r3, #20]
 80020de:	021a      	lsls	r2, r3, #8
 80020e0:	4b5b      	ldr	r3, [pc, #364]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020e2:	430a      	orrs	r2, r1
 80020e4:	605a      	str	r2, [r3, #4]
 80020e6:	e019      	b.n	800211c <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI_DISABLE();
 80020e8:	4b59      	ldr	r3, [pc, #356]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020ea:	681a      	ldr	r2, [r3, #0]
 80020ec:	4b58      	ldr	r3, [pc, #352]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80020ee:	4960      	ldr	r1, [pc, #384]	; (8002270 <HAL_RCC_OscConfig+0x360>)
 80020f0:	400a      	ands	r2, r1
 80020f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f4:	f7fe fd4c 	bl	8000b90 <HAL_GetTick>
 80020f8:	0003      	movs	r3, r0
 80020fa:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80020fc:	e008      	b.n	8002110 <HAL_RCC_OscConfig+0x200>
        {
          if ((HAL_GetTick() - tickstart) > RCC_HSI_TIMEOUT_VALUE)
 80020fe:	f7fe fd47 	bl	8000b90 <HAL_GetTick>
 8002102:	0002      	movs	r2, r0
 8002104:	693b      	ldr	r3, [r7, #16]
 8002106:	1ad3      	subs	r3, r2, r3
 8002108:	2b02      	cmp	r3, #2
 800210a:	d901      	bls.n	8002110 <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 800210c:	2303      	movs	r3, #3
 800210e:	e0d9      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002110:	4b4f      	ldr	r3, [pc, #316]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002112:	681a      	ldr	r2, [r3, #0]
 8002114:	2380      	movs	r3, #128	; 0x80
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4013      	ands	r3, r2
 800211a:	d1f0      	bne.n	80020fe <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	2208      	movs	r2, #8
 8002122:	4013      	ands	r3, r2
 8002124:	d042      	beq.n	80021ac <HAL_RCC_OscConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002126:	4b4a      	ldr	r3, [pc, #296]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	2238      	movs	r2, #56	; 0x38
 800212c:	4013      	ands	r3, r2
 800212e:	2b18      	cmp	r3, #24
 8002130:	d105      	bne.n	800213e <HAL_RCC_OscConfig+0x22e>
    {
      /* When LSI is used as system clock it will not be disabled */
      if (RCC_OscInitStruct->LSIState == RCC_LSI_OFF)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d138      	bne.n	80021ac <HAL_RCC_OscConfig+0x29c>
      {
        return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0c2      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d019      	beq.n	800217a <HAL_RCC_OscConfig+0x26a>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8002146:	4b42      	ldr	r3, [pc, #264]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002148:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800214a:	4b41      	ldr	r3, [pc, #260]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800214c:	2101      	movs	r1, #1
 800214e:	430a      	orrs	r2, r1
 8002150:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002152:	f7fe fd1d 	bl	8000b90 <HAL_GetTick>
 8002156:	0003      	movs	r3, r0
 8002158:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800215a:	e008      	b.n	800216e <HAL_RCC_OscConfig+0x25e>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 800215c:	f7fe fd18 	bl	8000b90 <HAL_GetTick>
 8002160:	0002      	movs	r2, r0
 8002162:	693b      	ldr	r3, [r7, #16]
 8002164:	1ad3      	subs	r3, r2, r3
 8002166:	2b02      	cmp	r3, #2
 8002168:	d901      	bls.n	800216e <HAL_RCC_OscConfig+0x25e>
          {
            return HAL_TIMEOUT;
 800216a:	2303      	movs	r3, #3
 800216c:	e0aa      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 800216e:	4b38      	ldr	r3, [pc, #224]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002170:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002172:	2202      	movs	r2, #2
 8002174:	4013      	ands	r3, r2
 8002176:	d0f1      	beq.n	800215c <HAL_RCC_OscConfig+0x24c>
 8002178:	e018      	b.n	80021ac <HAL_RCC_OscConfig+0x29c>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800217a:	4b35      	ldr	r3, [pc, #212]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800217c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800217e:	4b34      	ldr	r3, [pc, #208]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002180:	2101      	movs	r1, #1
 8002182:	438a      	bics	r2, r1
 8002184:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002186:	f7fe fd03 	bl	8000b90 <HAL_GetTick>
 800218a:	0003      	movs	r3, r0
 800218c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 800218e:	e008      	b.n	80021a2 <HAL_RCC_OscConfig+0x292>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSI_TIMEOUT_VALUE)
 8002190:	f7fe fcfe 	bl	8000b90 <HAL_GetTick>
 8002194:	0002      	movs	r2, r0
 8002196:	693b      	ldr	r3, [r7, #16]
 8002198:	1ad3      	subs	r3, r2, r3
 800219a:	2b02      	cmp	r3, #2
 800219c:	d901      	bls.n	80021a2 <HAL_RCC_OscConfig+0x292>
          {
            return HAL_TIMEOUT;
 800219e:	2303      	movs	r3, #3
 80021a0:	e090      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) != 0U)
 80021a2:	4b2b      	ldr	r3, [pc, #172]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80021a4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80021a6:	2202      	movs	r2, #2
 80021a8:	4013      	ands	r3, r2
 80021aa:	d1f1      	bne.n	8002190 <HAL_RCC_OscConfig+0x280>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	2204      	movs	r2, #4
 80021b2:	4013      	ands	r3, r2
 80021b4:	d100      	bne.n	80021b8 <HAL_RCC_OscConfig+0x2a8>
 80021b6:	e084      	b.n	80022c2 <HAL_RCC_OscConfig+0x3b2>
  {
    FlagStatus       pwrclkchanged = RESET;
 80021b8:	230f      	movs	r3, #15
 80021ba:	18fb      	adds	r3, r7, r3
 80021bc:	2200      	movs	r2, #0
 80021be:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 80021c0:	4b23      	ldr	r3, [pc, #140]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80021c2:	689b      	ldr	r3, [r3, #8]
 80021c4:	2238      	movs	r2, #56	; 0x38
 80021c6:	4013      	ands	r3, r2
 80021c8:	2b20      	cmp	r3, #32
 80021ca:	d106      	bne.n	80021da <HAL_RCC_OscConfig+0x2ca>
    {
      if (RCC_OscInitStruct->LSEState == RCC_LSE_OFF)
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	689b      	ldr	r3, [r3, #8]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d000      	beq.n	80021d6 <HAL_RCC_OscConfig+0x2c6>
 80021d4:	e075      	b.n	80022c2 <HAL_RCC_OscConfig+0x3b2>
      {
        return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e074      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
    }
    else
    {
      /* Update LSE configuration in RTC Domain control register    */
      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	689b      	ldr	r3, [r3, #8]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d106      	bne.n	80021f0 <HAL_RCC_OscConfig+0x2e0>
 80021e2:	4b1b      	ldr	r3, [pc, #108]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80021e4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021e6:	4b1a      	ldr	r3, [pc, #104]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80021e8:	2101      	movs	r1, #1
 80021ea:	430a      	orrs	r2, r1
 80021ec:	65da      	str	r2, [r3, #92]	; 0x5c
 80021ee:	e01c      	b.n	800222a <HAL_RCC_OscConfig+0x31a>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	689b      	ldr	r3, [r3, #8]
 80021f4:	2b05      	cmp	r3, #5
 80021f6:	d10c      	bne.n	8002212 <HAL_RCC_OscConfig+0x302>
 80021f8:	4b15      	ldr	r3, [pc, #84]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80021fa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80021fc:	4b14      	ldr	r3, [pc, #80]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 80021fe:	2104      	movs	r1, #4
 8002200:	430a      	orrs	r2, r1
 8002202:	65da      	str	r2, [r3, #92]	; 0x5c
 8002204:	4b12      	ldr	r3, [pc, #72]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002206:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002208:	4b11      	ldr	r3, [pc, #68]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 800220a:	2101      	movs	r1, #1
 800220c:	430a      	orrs	r2, r1
 800220e:	65da      	str	r2, [r3, #92]	; 0x5c
 8002210:	e00b      	b.n	800222a <HAL_RCC_OscConfig+0x31a>
 8002212:	4b0f      	ldr	r3, [pc, #60]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002214:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002216:	4b0e      	ldr	r3, [pc, #56]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002218:	2101      	movs	r1, #1
 800221a:	438a      	bics	r2, r1
 800221c:	65da      	str	r2, [r3, #92]	; 0x5c
 800221e:	4b0c      	ldr	r3, [pc, #48]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002220:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002222:	4b0b      	ldr	r3, [pc, #44]	; (8002250 <HAL_RCC_OscConfig+0x340>)
 8002224:	2104      	movs	r1, #4
 8002226:	438a      	bics	r2, r1
 8002228:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	689b      	ldr	r3, [r3, #8]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d028      	beq.n	8002284 <HAL_RCC_OscConfig+0x374>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002232:	f7fe fcad 	bl	8000b90 <HAL_GetTick>
 8002236:	0003      	movs	r3, r0
 8002238:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800223a:	e01d      	b.n	8002278 <HAL_RCC_OscConfig+0x368>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800223c:	f7fe fca8 	bl	8000b90 <HAL_GetTick>
 8002240:	0002      	movs	r2, r0
 8002242:	693b      	ldr	r3, [r7, #16]
 8002244:	1ad3      	subs	r3, r2, r3
 8002246:	4a0b      	ldr	r2, [pc, #44]	; (8002274 <HAL_RCC_OscConfig+0x364>)
 8002248:	4293      	cmp	r3, r2
 800224a:	d915      	bls.n	8002278 <HAL_RCC_OscConfig+0x368>
          {
            return HAL_TIMEOUT;
 800224c:	2303      	movs	r3, #3
 800224e:	e039      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
 8002250:	40021000 	.word	0x40021000
 8002254:	fffeffff 	.word	0xfffeffff
 8002258:	fffbffff 	.word	0xfffbffff
 800225c:	ffff80ff 	.word	0xffff80ff
 8002260:	ffffc7ff 	.word	0xffffc7ff
 8002264:	02dc6c00 	.word	0x02dc6c00
 8002268:	2000000c 	.word	0x2000000c
 800226c:	20000010 	.word	0x20000010
 8002270:	fffffeff 	.word	0xfffffeff
 8002274:	00001388 	.word	0x00001388
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002278:	4b14      	ldr	r3, [pc, #80]	; (80022cc <HAL_RCC_OscConfig+0x3bc>)
 800227a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800227c:	2202      	movs	r2, #2
 800227e:	4013      	ands	r3, r2
 8002280:	d0dc      	beq.n	800223c <HAL_RCC_OscConfig+0x32c>
 8002282:	e013      	b.n	80022ac <HAL_RCC_OscConfig+0x39c>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002284:	f7fe fc84 	bl	8000b90 <HAL_GetTick>
 8002288:	0003      	movs	r3, r0
 800228a:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 800228c:	e009      	b.n	80022a2 <HAL_RCC_OscConfig+0x392>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800228e:	f7fe fc7f 	bl	8000b90 <HAL_GetTick>
 8002292:	0002      	movs	r2, r0
 8002294:	693b      	ldr	r3, [r7, #16]
 8002296:	1ad3      	subs	r3, r2, r3
 8002298:	4a0d      	ldr	r2, [pc, #52]	; (80022d0 <HAL_RCC_OscConfig+0x3c0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x392>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e010      	b.n	80022c4 <HAL_RCC_OscConfig+0x3b4>
        while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) != 0U)
 80022a2:	4b0a      	ldr	r3, [pc, #40]	; (80022cc <HAL_RCC_OscConfig+0x3bc>)
 80022a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022a6:	2202      	movs	r2, #2
 80022a8:	4013      	ands	r3, r2
 80022aa:	d1f0      	bne.n	800228e <HAL_RCC_OscConfig+0x37e>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80022ac:	230f      	movs	r3, #15
 80022ae:	18fb      	adds	r3, r7, r3
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	2b01      	cmp	r3, #1
 80022b4:	d105      	bne.n	80022c2 <HAL_RCC_OscConfig+0x3b2>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80022b6:	4b05      	ldr	r3, [pc, #20]	; (80022cc <HAL_RCC_OscConfig+0x3bc>)
 80022b8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80022ba:	4b04      	ldr	r3, [pc, #16]	; (80022cc <HAL_RCC_OscConfig+0x3bc>)
 80022bc:	4905      	ldr	r1, [pc, #20]	; (80022d4 <HAL_RCC_OscConfig+0x3c4>)
 80022be:	400a      	ands	r2, r1
 80022c0:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
  return HAL_OK;
 80022c2:	2300      	movs	r3, #0
}
 80022c4:	0018      	movs	r0, r3
 80022c6:	46bd      	mov	sp, r7
 80022c8:	b006      	add	sp, #24
 80022ca:	bd80      	pop	{r7, pc}
 80022cc:	40021000 	.word	0x40021000
 80022d0:	00001388 	.word	0x00001388
 80022d4:	efffffff 	.word	0xefffffff

080022d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	6078      	str	r0, [r7, #4]
 80022e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d101      	bne.n	80022ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e0e9      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022ec:	4b76      	ldr	r3, [pc, #472]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	2207      	movs	r2, #7
 80022f2:	4013      	ands	r3, r2
 80022f4:	683a      	ldr	r2, [r7, #0]
 80022f6:	429a      	cmp	r2, r3
 80022f8:	d91e      	bls.n	8002338 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022fa:	4b73      	ldr	r3, [pc, #460]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	2207      	movs	r2, #7
 8002300:	4393      	bics	r3, r2
 8002302:	0019      	movs	r1, r3
 8002304:	4b70      	ldr	r3, [pc, #448]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002306:	683a      	ldr	r2, [r7, #0]
 8002308:	430a      	orrs	r2, r1
 800230a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800230c:	f7fe fc40 	bl	8000b90 <HAL_GetTick>
 8002310:	0003      	movs	r3, r0
 8002312:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002314:	e009      	b.n	800232a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002316:	f7fe fc3b 	bl	8000b90 <HAL_GetTick>
 800231a:	0002      	movs	r2, r0
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	4a6a      	ldr	r2, [pc, #424]	; (80024cc <HAL_RCC_ClockConfig+0x1f4>)
 8002322:	4293      	cmp	r3, r2
 8002324:	d901      	bls.n	800232a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002326:	2303      	movs	r3, #3
 8002328:	e0ca      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800232a:	4b67      	ldr	r3, [pc, #412]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	2207      	movs	r2, #7
 8002330:	4013      	ands	r3, r2
 8002332:	683a      	ldr	r2, [r7, #0]
 8002334:	429a      	cmp	r2, r3
 8002336:	d1ee      	bne.n	8002316 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	2202      	movs	r2, #2
 800233e:	4013      	ands	r3, r2
 8002340:	d017      	beq.n	8002372 <HAL_RCC_ClockConfig+0x9a>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	2204      	movs	r2, #4
 8002348:	4013      	ands	r3, r2
 800234a:	d008      	beq.n	800235e <HAL_RCC_ClockConfig+0x86>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 800234c:	4b60      	ldr	r3, [pc, #384]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800234e:	689b      	ldr	r3, [r3, #8]
 8002350:	4a60      	ldr	r2, [pc, #384]	; (80024d4 <HAL_RCC_ClockConfig+0x1fc>)
 8002352:	401a      	ands	r2, r3
 8002354:	4b5e      	ldr	r3, [pc, #376]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002356:	21b0      	movs	r1, #176	; 0xb0
 8002358:	0109      	lsls	r1, r1, #4
 800235a:	430a      	orrs	r2, r1
 800235c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800235e:	4b5c      	ldr	r3, [pc, #368]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002360:	689b      	ldr	r3, [r3, #8]
 8002362:	4a5d      	ldr	r2, [pc, #372]	; (80024d8 <HAL_RCC_ClockConfig+0x200>)
 8002364:	4013      	ands	r3, r2
 8002366:	0019      	movs	r1, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	68da      	ldr	r2, [r3, #12]
 800236c:	4b58      	ldr	r3, [pc, #352]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800236e:	430a      	orrs	r2, r1
 8002370:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	2201      	movs	r2, #1
 8002378:	4013      	ands	r3, r2
 800237a:	d055      	beq.n	8002428 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    MODIFY_REG(RCC->CR, RCC_CR_SYSDIV, RCC_ClkInitStruct->SYSCLKDivider);
 800237c:	4b54      	ldr	r3, [pc, #336]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	221c      	movs	r2, #28
 8002382:	4393      	bics	r3, r2
 8002384:	0019      	movs	r1, r3
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	689a      	ldr	r2, [r3, #8]
 800238a:	4b51      	ldr	r3, [pc, #324]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800238c:	430a      	orrs	r2, r1
 800238e:	601a      	str	r2, [r3, #0]

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	685b      	ldr	r3, [r3, #4]
 8002394:	2b01      	cmp	r3, #1
 8002396:	d107      	bne.n	80023a8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002398:	4b4d      	ldr	r3, [pc, #308]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800239a:	681a      	ldr	r2, [r3, #0]
 800239c:	2380      	movs	r3, #128	; 0x80
 800239e:	029b      	lsls	r3, r3, #10
 80023a0:	4013      	ands	r3, r2
 80023a2:	d11f      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e08b      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d107      	bne.n	80023c0 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80023b0:	4b47      	ldr	r3, [pc, #284]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 80023b2:	681a      	ldr	r2, [r3, #0]
 80023b4:	2380      	movs	r3, #128	; 0x80
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	4013      	ands	r3, r2
 80023ba:	d113      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023bc:	2301      	movs	r3, #1
 80023be:	e07f      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685b      	ldr	r3, [r3, #4]
 80023c4:	2b03      	cmp	r3, #3
 80023c6:	d106      	bne.n	80023d6 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR2, RCC_CSR2_LSIRDY) == 0U)
 80023c8:	4b41      	ldr	r3, [pc, #260]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 80023ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80023cc:	2202      	movs	r2, #2
 80023ce:	4013      	ands	r3, r2
 80023d0:	d108      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023d2:	2301      	movs	r3, #1
 80023d4:	e074      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 80023d6:	4b3e      	ldr	r3, [pc, #248]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 80023d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80023da:	2202      	movs	r2, #2
 80023dc:	4013      	ands	r3, r2
 80023de:	d101      	bne.n	80023e4 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80023e0:	2301      	movs	r3, #1
 80023e2:	e06d      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80023e4:	4b3a      	ldr	r3, [pc, #232]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	2207      	movs	r2, #7
 80023ea:	4393      	bics	r3, r2
 80023ec:	0019      	movs	r1, r3
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	685a      	ldr	r2, [r3, #4]
 80023f2:	4b37      	ldr	r3, [pc, #220]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 80023f4:	430a      	orrs	r2, r1
 80023f6:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80023f8:	f7fe fbca 	bl	8000b90 <HAL_GetTick>
 80023fc:	0003      	movs	r3, r0
 80023fe:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002400:	e009      	b.n	8002416 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002402:	f7fe fbc5 	bl	8000b90 <HAL_GetTick>
 8002406:	0002      	movs	r2, r0
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	1ad3      	subs	r3, r2, r3
 800240c:	4a2f      	ldr	r2, [pc, #188]	; (80024cc <HAL_RCC_ClockConfig+0x1f4>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d901      	bls.n	8002416 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002412:	2303      	movs	r3, #3
 8002414:	e054      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002416:	4b2e      	ldr	r3, [pc, #184]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	2238      	movs	r2, #56	; 0x38
 800241c:	401a      	ands	r2, r3
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	685b      	ldr	r3, [r3, #4]
 8002422:	00db      	lsls	r3, r3, #3
 8002424:	429a      	cmp	r2, r3
 8002426:	d1ec      	bne.n	8002402 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002428:	4b27      	ldr	r3, [pc, #156]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	2207      	movs	r2, #7
 800242e:	4013      	ands	r3, r2
 8002430:	683a      	ldr	r2, [r7, #0]
 8002432:	429a      	cmp	r2, r3
 8002434:	d21e      	bcs.n	8002474 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002436:	4b24      	ldr	r3, [pc, #144]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	2207      	movs	r2, #7
 800243c:	4393      	bics	r3, r2
 800243e:	0019      	movs	r1, r3
 8002440:	4b21      	ldr	r3, [pc, #132]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	430a      	orrs	r2, r1
 8002446:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002448:	f7fe fba2 	bl	8000b90 <HAL_GetTick>
 800244c:	0003      	movs	r3, r0
 800244e:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002450:	e009      	b.n	8002466 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > RCC_CLOCKSWITCH_TIMEOUT_VALUE)
 8002452:	f7fe fb9d 	bl	8000b90 <HAL_GetTick>
 8002456:	0002      	movs	r2, r0
 8002458:	68fb      	ldr	r3, [r7, #12]
 800245a:	1ad3      	subs	r3, r2, r3
 800245c:	4a1b      	ldr	r2, [pc, #108]	; (80024cc <HAL_RCC_ClockConfig+0x1f4>)
 800245e:	4293      	cmp	r3, r2
 8002460:	d901      	bls.n	8002466 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002462:	2303      	movs	r3, #3
 8002464:	e02c      	b.n	80024c0 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002466:	4b18      	ldr	r3, [pc, #96]	; (80024c8 <HAL_RCC_ClockConfig+0x1f0>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	2207      	movs	r2, #7
 800246c:	4013      	ands	r3, r2
 800246e:	683a      	ldr	r2, [r7, #0]
 8002470:	429a      	cmp	r2, r3
 8002472:	d1ee      	bne.n	8002452 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	2204      	movs	r2, #4
 800247a:	4013      	ands	r3, r2
 800247c:	d009      	beq.n	8002492 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800247e:	4b14      	ldr	r3, [pc, #80]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	4a16      	ldr	r2, [pc, #88]	; (80024dc <HAL_RCC_ClockConfig+0x204>)
 8002484:	4013      	ands	r3, r2
 8002486:	0019      	movs	r1, r3
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	691a      	ldr	r2, [r3, #16]
 800248c:	4b10      	ldr	r3, [pc, #64]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800248e:	430a      	orrs	r2, r1
 8002490:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002492:	f000 f82b 	bl	80024ec <HAL_RCC_GetSysClockFreq>
 8002496:	0001      	movs	r1, r0
 8002498:	4b0d      	ldr	r3, [pc, #52]	; (80024d0 <HAL_RCC_ClockConfig+0x1f8>)
 800249a:	689b      	ldr	r3, [r3, #8]
 800249c:	0a1b      	lsrs	r3, r3, #8
 800249e:	220f      	movs	r2, #15
 80024a0:	401a      	ands	r2, r3
 80024a2:	4b0f      	ldr	r3, [pc, #60]	; (80024e0 <HAL_RCC_ClockConfig+0x208>)
 80024a4:	0092      	lsls	r2, r2, #2
 80024a6:	58d3      	ldr	r3, [r2, r3]
 80024a8:	221f      	movs	r2, #31
 80024aa:	4013      	ands	r3, r2
 80024ac:	000a      	movs	r2, r1
 80024ae:	40da      	lsrs	r2, r3
 80024b0:	4b0c      	ldr	r3, [pc, #48]	; (80024e4 <HAL_RCC_ClockConfig+0x20c>)
 80024b2:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80024b4:	4b0c      	ldr	r3, [pc, #48]	; (80024e8 <HAL_RCC_ClockConfig+0x210>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	0018      	movs	r0, r3
 80024ba:	f7fe fb0d 	bl	8000ad8 <HAL_InitTick>
 80024be:	0003      	movs	r3, r0
}
 80024c0:	0018      	movs	r0, r3
 80024c2:	46bd      	mov	sp, r7
 80024c4:	b004      	add	sp, #16
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40022000 	.word	0x40022000
 80024cc:	00001388 	.word	0x00001388
 80024d0:	40021000 	.word	0x40021000
 80024d4:	ffff84ff 	.word	0xffff84ff
 80024d8:	fffff0ff 	.word	0xfffff0ff
 80024dc:	ffff8fff 	.word	0xffff8fff
 80024e0:	08002f30 	.word	0x08002f30
 80024e4:	2000000c 	.word	0x2000000c
 80024e8:	20000010 	.word	0x20000010

080024ec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80024ec:	b580      	push	{r7, lr}
 80024ee:	b082      	sub	sp, #8
 80024f0:	af00      	add	r7, sp, #0
  uint32_t hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80024f2:	4b1c      	ldr	r3, [pc, #112]	; (8002564 <HAL_RCC_GetSysClockFreq+0x78>)
 80024f4:	689b      	ldr	r3, [r3, #8]
 80024f6:	2238      	movs	r2, #56	; 0x38
 80024f8:	4013      	ands	r3, r2
 80024fa:	d10f      	bne.n	800251c <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI48 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80024fc:	4b19      	ldr	r3, [pc, #100]	; (8002564 <HAL_RCC_GetSysClockFreq+0x78>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	0adb      	lsrs	r3, r3, #11
 8002502:	2207      	movs	r2, #7
 8002504:	4013      	ands	r3, r2
 8002506:	2201      	movs	r2, #1
 8002508:	409a      	lsls	r2, r3
 800250a:	0013      	movs	r3, r2
 800250c:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 800250e:	6839      	ldr	r1, [r7, #0]
 8002510:	4815      	ldr	r0, [pc, #84]	; (8002568 <HAL_RCC_GetSysClockFreq+0x7c>)
 8002512:	f7fd fdf9 	bl	8000108 <__udivsi3>
 8002516:	0003      	movs	r3, r0
 8002518:	607b      	str	r3, [r7, #4]
 800251a:	e01e      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 800251c:	4b11      	ldr	r3, [pc, #68]	; (8002564 <HAL_RCC_GetSysClockFreq+0x78>)
 800251e:	689b      	ldr	r3, [r3, #8]
 8002520:	2238      	movs	r2, #56	; 0x38
 8002522:	4013      	ands	r3, r2
 8002524:	2b08      	cmp	r3, #8
 8002526:	d102      	bne.n	800252e <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002528:	4b10      	ldr	r3, [pc, #64]	; (800256c <HAL_RCC_GetSysClockFreq+0x80>)
 800252a:	607b      	str	r3, [r7, #4]
 800252c:	e015      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSE)
 800252e:	4b0d      	ldr	r3, [pc, #52]	; (8002564 <HAL_RCC_GetSysClockFreq+0x78>)
 8002530:	689b      	ldr	r3, [r3, #8]
 8002532:	2238      	movs	r2, #56	; 0x38
 8002534:	4013      	ands	r3, r2
 8002536:	2b20      	cmp	r3, #32
 8002538:	d103      	bne.n	8002542 <HAL_RCC_GetSysClockFreq+0x56>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 800253a:	2380      	movs	r3, #128	; 0x80
 800253c:	021b      	lsls	r3, r3, #8
 800253e:	607b      	str	r3, [r7, #4]
 8002540:	e00b      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_LSI)
 8002542:	4b08      	ldr	r3, [pc, #32]	; (8002564 <HAL_RCC_GetSysClockFreq+0x78>)
 8002544:	689b      	ldr	r3, [r3, #8]
 8002546:	2238      	movs	r2, #56	; 0x38
 8002548:	4013      	ands	r3, r2
 800254a:	2b18      	cmp	r3, #24
 800254c:	d103      	bne.n	8002556 <HAL_RCC_GetSysClockFreq+0x6a>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 800254e:	23fa      	movs	r3, #250	; 0xfa
 8002550:	01db      	lsls	r3, r3, #7
 8002552:	607b      	str	r3, [r7, #4]
 8002554:	e001      	b.n	800255a <HAL_RCC_GetSysClockFreq+0x6e>
  }
  else
  {
    sysclockfreq = 0U;
 8002556:	2300      	movs	r3, #0
 8002558:	607b      	str	r3, [r7, #4]
  }

  return sysclockfreq;
 800255a:	687b      	ldr	r3, [r7, #4]
}
 800255c:	0018      	movs	r0, r3
 800255e:	46bd      	mov	sp, r7
 8002560:	b002      	add	sp, #8
 8002562:	bd80      	pop	{r7, pc}
 8002564:	40021000 	.word	0x40021000
 8002568:	02dc6c00 	.word	0x02dc6c00
 800256c:	007a1200 	.word	0x007a1200

08002570 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to RTC domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(const RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002570:	b580      	push	{r7, lr}
 8002572:	b086      	sub	sp, #24
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002578:	2313      	movs	r3, #19
 800257a:	18fb      	adds	r3, r7, r3
 800257c:	2200      	movs	r2, #0
 800257e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002580:	2312      	movs	r3, #18
 8002582:	18fb      	adds	r3, r7, r3
 8002584:	2200      	movs	r2, #0
 8002586:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681a      	ldr	r2, [r3, #0]
 800258c:	2380      	movs	r3, #128	; 0x80
 800258e:	029b      	lsls	r3, r3, #10
 8002590:	4013      	ands	r3, r2
 8002592:	d100      	bne.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002594:	e079      	b.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x11a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002596:	2011      	movs	r0, #17
 8002598:	183b      	adds	r3, r7, r0
 800259a:	2200      	movs	r2, #0
 800259c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800259e:	4b64      	ldr	r3, [pc, #400]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025a0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025a2:	2380      	movs	r3, #128	; 0x80
 80025a4:	055b      	lsls	r3, r3, #21
 80025a6:	4013      	ands	r3, r2
 80025a8:	d110      	bne.n	80025cc <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80025aa:	4b61      	ldr	r3, [pc, #388]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ac:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025ae:	4b60      	ldr	r3, [pc, #384]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025b0:	2180      	movs	r1, #128	; 0x80
 80025b2:	0549      	lsls	r1, r1, #21
 80025b4:	430a      	orrs	r2, r1
 80025b6:	63da      	str	r2, [r3, #60]	; 0x3c
 80025b8:	4b5d      	ldr	r3, [pc, #372]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80025bc:	2380      	movs	r3, #128	; 0x80
 80025be:	055b      	lsls	r3, r3, #21
 80025c0:	4013      	ands	r3, r2
 80025c2:	60bb      	str	r3, [r7, #8]
 80025c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80025c6:	183b      	adds	r3, r7, r0
 80025c8:	2201      	movs	r2, #1
 80025ca:	701a      	strb	r2, [r3, #0]
    }


    /* Reset the RTC domain only if the RTC Clock source selection is modified from default */
    tmpregister = READ_BIT(RCC->CSR1, RCC_CSR1_RTCSEL);
 80025cc:	4b58      	ldr	r3, [pc, #352]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ce:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025d0:	23c0      	movs	r3, #192	; 0xc0
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	4013      	ands	r3, r2
 80025d6:	617b      	str	r3, [r7, #20]

    /* Reset the RTC domain only if the RTC Clock source selection is modified */
    if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80025d8:	697b      	ldr	r3, [r7, #20]
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d019      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	699b      	ldr	r3, [r3, #24]
 80025e2:	697a      	ldr	r2, [r7, #20]
 80025e4:	429a      	cmp	r2, r3
 80025e6:	d014      	beq.n	8002612 <HAL_RCCEx_PeriphCLKConfig+0xa2>
    {
      /* Store the content of CSR1 register before the reset of RTC Domain */
      tmpregister = READ_BIT(RCC->CSR1, ~(RCC_CSR1_RTCSEL));
 80025e8:	4b51      	ldr	r3, [pc, #324]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025ec:	4a51      	ldr	r2, [pc, #324]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 80025ee:	4013      	ands	r3, r2
 80025f0:	617b      	str	r3, [r7, #20]
      /* RTC Clock selection can be changed only if the RTC Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025f2:	4b4f      	ldr	r3, [pc, #316]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025f4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80025f6:	4b4e      	ldr	r3, [pc, #312]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80025f8:	2180      	movs	r1, #128	; 0x80
 80025fa:	0249      	lsls	r1, r1, #9
 80025fc:	430a      	orrs	r2, r1
 80025fe:	65da      	str	r2, [r3, #92]	; 0x5c
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002600:	4b4b      	ldr	r3, [pc, #300]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002602:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002604:	4b4a      	ldr	r3, [pc, #296]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002606:	494c      	ldr	r1, [pc, #304]	; (8002738 <HAL_RCCEx_PeriphCLKConfig+0x1c8>)
 8002608:	400a      	ands	r2, r1
 800260a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Restore the Content of CSR1 register */
      RCC->CSR1 = tmpregister;
 800260c:	4b48      	ldr	r3, [pc, #288]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800260e:	697a      	ldr	r2, [r7, #20]
 8002610:	65da      	str	r2, [r3, #92]	; 0x5c
    }

    /* Wait for LSE reactivation if LSE was enable prior to RTC Domain reset */
    if (HAL_IS_BIT_SET(tmpregister, RCC_CSR1_LSEON))
 8002612:	697b      	ldr	r3, [r7, #20]
 8002614:	2201      	movs	r2, #1
 8002616:	4013      	ands	r3, r2
 8002618:	d016      	beq.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xd8>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800261a:	f7fe fab9 	bl	8000b90 <HAL_GetTick>
 800261e:	0003      	movs	r3, r0
 8002620:	60fb      	str	r3, [r7, #12]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 8002622:	e00c      	b.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xce>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002624:	f7fe fab4 	bl	8000b90 <HAL_GetTick>
 8002628:	0002      	movs	r2, r0
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	4a43      	ldr	r2, [pc, #268]	; (800273c <HAL_RCCEx_PeriphCLKConfig+0x1cc>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d904      	bls.n	800263e <HAL_RCCEx_PeriphCLKConfig+0xce>
        {
          ret = HAL_TIMEOUT;
 8002634:	2313      	movs	r3, #19
 8002636:	18fb      	adds	r3, r7, r3
 8002638:	2203      	movs	r2, #3
 800263a:	701a      	strb	r2, [r3, #0]
          break;
 800263c:	e004      	b.n	8002648 <HAL_RCCEx_PeriphCLKConfig+0xd8>
      while (READ_BIT(RCC->CSR1, RCC_CSR1_LSERDY) == 0U)
 800263e:	4b3c      	ldr	r3, [pc, #240]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002640:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002642:	2202      	movs	r2, #2
 8002644:	4013      	ands	r3, r2
 8002646:	d0ed      	beq.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0xb4>
        }
      }
    }

    if (ret == HAL_OK)
 8002648:	2313      	movs	r3, #19
 800264a:	18fb      	adds	r3, r7, r3
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	d10a      	bne.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0xf8>
    {
      /* Apply new RTC clock source selection */
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002652:	4b37      	ldr	r3, [pc, #220]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002654:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002656:	4a37      	ldr	r2, [pc, #220]	; (8002734 <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 8002658:	4013      	ands	r3, r2
 800265a:	0019      	movs	r1, r3
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	699a      	ldr	r2, [r3, #24]
 8002660:	4b33      	ldr	r3, [pc, #204]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002662:	430a      	orrs	r2, r1
 8002664:	65da      	str	r2, [r3, #92]	; 0x5c
 8002666:	e005      	b.n	8002674 <HAL_RCCEx_PeriphCLKConfig+0x104>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002668:	2312      	movs	r3, #18
 800266a:	18fb      	adds	r3, r7, r3
 800266c:	2213      	movs	r2, #19
 800266e:	18ba      	adds	r2, r7, r2
 8002670:	7812      	ldrb	r2, [r2, #0]
 8002672:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002674:	2311      	movs	r3, #17
 8002676:	18fb      	adds	r3, r7, r3
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	2b01      	cmp	r3, #1
 800267c:	d105      	bne.n	800268a <HAL_RCCEx_PeriphCLKConfig+0x11a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800267e:	4b2c      	ldr	r3, [pc, #176]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002680:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002682:	4b2b      	ldr	r3, [pc, #172]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002684:	492e      	ldr	r1, [pc, #184]	; (8002740 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002686:	400a      	ands	r2, r1
 8002688:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	681b      	ldr	r3, [r3, #0]
 800268e:	2201      	movs	r2, #1
 8002690:	4013      	ands	r3, r2
 8002692:	d009      	beq.n	80026a8 <HAL_RCCEx_PeriphCLKConfig+0x138>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002694:	4b26      	ldr	r3, [pc, #152]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002696:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002698:	2203      	movs	r2, #3
 800269a:	4393      	bics	r3, r2
 800269c:	0019      	movs	r1, r3
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689a      	ldr	r2, [r3, #8]
 80026a2:	4b23      	ldr	r3, [pc, #140]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026a4:	430a      	orrs	r2, r1
 80026a6:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	2240      	movs	r2, #64	; 0x40
 80026ae:	4013      	ands	r3, r2
 80026b0:	d009      	beq.n	80026c6 <HAL_RCCEx_PeriphCLKConfig+0x156>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80026b2:	4b1f      	ldr	r3, [pc, #124]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026b6:	4a23      	ldr	r2, [pc, #140]	; (8002744 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80026b8:	4013      	ands	r3, r2
 80026ba:	0019      	movs	r1, r3
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	68da      	ldr	r2, [r3, #12]
 80026c0:	4b1b      	ldr	r3, [pc, #108]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026c2:	430a      	orrs	r2, r1
 80026c4:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	681a      	ldr	r2, [r3, #0]
 80026ca:	2380      	movs	r3, #128	; 0x80
 80026cc:	01db      	lsls	r3, r3, #7
 80026ce:	4013      	ands	r3, r2
 80026d0:	d008      	beq.n	80026e4 <HAL_RCCEx_PeriphCLKConfig+0x174>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80026d2:	4b17      	ldr	r3, [pc, #92]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026d4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026d6:	009b      	lsls	r3, r3, #2
 80026d8:	0899      	lsrs	r1, r3, #2
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	695a      	ldr	r2, [r3, #20]
 80026de:	4b14      	ldr	r3, [pc, #80]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026e0:	430a      	orrs	r2, r1
 80026e2:	655a      	str	r2, [r3, #84]	; 0x54

  }

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681a      	ldr	r2, [r3, #0]
 80026e8:	2380      	movs	r3, #128	; 0x80
 80026ea:	011b      	lsls	r3, r3, #4
 80026ec:	4013      	ands	r3, r2
 80026ee:	d009      	beq.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x194>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 80026f0:	4b0f      	ldr	r3, [pc, #60]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80026f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80026f4:	4a14      	ldr	r2, [pc, #80]	; (8002748 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80026f6:	4013      	ands	r3, r2
 80026f8:	0019      	movs	r1, r3
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	691a      	ldr	r2, [r3, #16]
 80026fe:	4b0c      	ldr	r3, [pc, #48]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8002700:	430a      	orrs	r2, r1
 8002702:	655a      	str	r2, [r3, #84]	; 0x54
  }
  /*------------------------------------ HSI Kernel clock source configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HSIKER) == RCC_PERIPHCLK_HSIKER)
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	2b00      	cmp	r3, #0
 800270a:	da09      	bge.n	8002720 <HAL_RCCEx_PeriphCLKConfig+0x1b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSIKERDIV(PeriphClkInit->HSIKerClockDivider));

    /* Configure the HSI Kernel clock source Divider */
    __HAL_RCC_HSIKER_CONFIG(PeriphClkInit->HSIKerClockDivider);
 800270c:	4b08      	ldr	r3, [pc, #32]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	22e0      	movs	r2, #224	; 0xe0
 8002712:	4393      	bics	r3, r2
 8002714:	0019      	movs	r1, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	685a      	ldr	r2, [r3, #4]
 800271a:	4b05      	ldr	r3, [pc, #20]	; (8002730 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800271c:	430a      	orrs	r2, r1
 800271e:	601a      	str	r2, [r3, #0]
  }
  return status;
 8002720:	2312      	movs	r3, #18
 8002722:	18fb      	adds	r3, r7, r3
 8002724:	781b      	ldrb	r3, [r3, #0]
}
 8002726:	0018      	movs	r0, r3
 8002728:	46bd      	mov	sp, r7
 800272a:	b006      	add	sp, #24
 800272c:	bd80      	pop	{r7, pc}
 800272e:	46c0      	nop			; (mov r8, r8)
 8002730:	40021000 	.word	0x40021000
 8002734:	fffffcff 	.word	0xfffffcff
 8002738:	fffeffff 	.word	0xfffeffff
 800273c:	00001388 	.word	0x00001388
 8002740:	efffffff 	.word	0xefffffff
 8002744:	ffffcfff 	.word	0xffffcfff
 8002748:	ffff3fff 	.word	0xffff3fff

0800274c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800274c:	b580      	push	{r7, lr}
 800274e:	b084      	sub	sp, #16
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d101      	bne.n	800275e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800275a:	2301      	movs	r3, #1
 800275c:	e0a8      	b.n	80028b0 <HAL_SPI_Init+0x164>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002762:	2b00      	cmp	r3, #0
 8002764:	d109      	bne.n	800277a <HAL_SPI_Init+0x2e>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	685a      	ldr	r2, [r3, #4]
 800276a:	2382      	movs	r3, #130	; 0x82
 800276c:	005b      	lsls	r3, r3, #1
 800276e:	429a      	cmp	r2, r3
 8002770:	d009      	beq.n	8002786 <HAL_SPI_Init+0x3a>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	61da      	str	r2, [r3, #28]
 8002778:	e005      	b.n	8002786 <HAL_SPI_Init+0x3a>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	2200      	movs	r2, #0
 800277e:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	2200      	movs	r2, #0
 8002784:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	2200      	movs	r2, #0
 800278a:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	225d      	movs	r2, #93	; 0x5d
 8002790:	5c9b      	ldrb	r3, [r3, r2]
 8002792:	b2db      	uxtb	r3, r3
 8002794:	2b00      	cmp	r3, #0
 8002796:	d107      	bne.n	80027a8 <HAL_SPI_Init+0x5c>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	225c      	movs	r2, #92	; 0x5c
 800279c:	2100      	movs	r1, #0
 800279e:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	0018      	movs	r0, r3
 80027a4:	f7fe f8d2 	bl	800094c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	225d      	movs	r2, #93	; 0x5d
 80027ac:	2102      	movs	r1, #2
 80027ae:	5499      	strb	r1, [r3, r2]

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	681a      	ldr	r2, [r3, #0]
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	2140      	movs	r1, #64	; 0x40
 80027bc:	438a      	bics	r2, r1
 80027be:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	68da      	ldr	r2, [r3, #12]
 80027c4:	23e0      	movs	r3, #224	; 0xe0
 80027c6:	00db      	lsls	r3, r3, #3
 80027c8:	429a      	cmp	r2, r3
 80027ca:	d902      	bls.n	80027d2 <HAL_SPI_Init+0x86>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
 80027d0:	e002      	b.n	80027d8 <HAL_SPI_Init+0x8c>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80027d2:	2380      	movs	r3, #128	; 0x80
 80027d4:	015b      	lsls	r3, r3, #5
 80027d6:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	68da      	ldr	r2, [r3, #12]
 80027dc:	23f0      	movs	r3, #240	; 0xf0
 80027de:	011b      	lsls	r3, r3, #4
 80027e0:	429a      	cmp	r2, r3
 80027e2:	d008      	beq.n	80027f6 <HAL_SPI_Init+0xaa>
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	68da      	ldr	r2, [r3, #12]
 80027e8:	23e0      	movs	r3, #224	; 0xe0
 80027ea:	00db      	lsls	r3, r3, #3
 80027ec:	429a      	cmp	r2, r3
 80027ee:	d002      	beq.n	80027f6 <HAL_SPI_Init+0xaa>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2200      	movs	r2, #0
 80027f4:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	2382      	movs	r3, #130	; 0x82
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	401a      	ands	r2, r3
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6899      	ldr	r1, [r3, #8]
 8002804:	2384      	movs	r3, #132	; 0x84
 8002806:	021b      	lsls	r3, r3, #8
 8002808:	400b      	ands	r3, r1
 800280a:	431a      	orrs	r2, r3
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	691b      	ldr	r3, [r3, #16]
 8002810:	2102      	movs	r1, #2
 8002812:	400b      	ands	r3, r1
 8002814:	431a      	orrs	r2, r3
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695b      	ldr	r3, [r3, #20]
 800281a:	2101      	movs	r1, #1
 800281c:	400b      	ands	r3, r1
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	6999      	ldr	r1, [r3, #24]
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	009b      	lsls	r3, r3, #2
 8002828:	400b      	ands	r3, r1
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	69db      	ldr	r3, [r3, #28]
 8002830:	2138      	movs	r1, #56	; 0x38
 8002832:	400b      	ands	r3, r1
 8002834:	431a      	orrs	r2, r3
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6a1b      	ldr	r3, [r3, #32]
 800283a:	2180      	movs	r1, #128	; 0x80
 800283c:	400b      	ands	r3, r1
 800283e:	431a      	orrs	r2, r3
 8002840:	0011      	movs	r1, r2
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002846:	2380      	movs	r3, #128	; 0x80
 8002848:	019b      	lsls	r3, r3, #6
 800284a:	401a      	ands	r2, r3
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	430a      	orrs	r2, r1
 8002852:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	699b      	ldr	r3, [r3, #24]
 8002858:	0c1b      	lsrs	r3, r3, #16
 800285a:	2204      	movs	r2, #4
 800285c:	401a      	ands	r2, r3
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002862:	2110      	movs	r1, #16
 8002864:	400b      	ands	r3, r1
 8002866:	431a      	orrs	r2, r3
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800286c:	2108      	movs	r1, #8
 800286e:	400b      	ands	r3, r1
 8002870:	431a      	orrs	r2, r3
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	68d9      	ldr	r1, [r3, #12]
 8002876:	23f0      	movs	r3, #240	; 0xf0
 8002878:	011b      	lsls	r3, r3, #4
 800287a:	400b      	ands	r3, r1
 800287c:	431a      	orrs	r2, r3
 800287e:	0011      	movs	r1, r2
 8002880:	68fa      	ldr	r2, [r7, #12]
 8002882:	2380      	movs	r3, #128	; 0x80
 8002884:	015b      	lsls	r3, r3, #5
 8002886:	401a      	ands	r2, r3
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	430a      	orrs	r2, r1
 800288e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	69da      	ldr	r2, [r3, #28]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	4907      	ldr	r1, [pc, #28]	; (80028b8 <HAL_SPI_Init+0x16c>)
 800289c:	400a      	ands	r2, r1
 800289e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	2200      	movs	r2, #0
 80028a4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	225d      	movs	r2, #93	; 0x5d
 80028aa:	2101      	movs	r1, #1
 80028ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80028ae:	2300      	movs	r3, #0
}
 80028b0:	0018      	movs	r0, r3
 80028b2:	46bd      	mov	sp, r7
 80028b4:	b004      	add	sp, #16
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	fffff7ff 	.word	0xfffff7ff

080028bc <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	b088      	sub	sp, #32
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	60f8      	str	r0, [r7, #12]
 80028c4:	60b9      	str	r1, [r7, #8]
 80028c6:	603b      	str	r3, [r7, #0]
 80028c8:	1dbb      	adds	r3, r7, #6
 80028ca:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80028cc:	231f      	movs	r3, #31
 80028ce:	18fb      	adds	r3, r7, r3
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	225c      	movs	r2, #92	; 0x5c
 80028d8:	5c9b      	ldrb	r3, [r3, r2]
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d101      	bne.n	80028e2 <HAL_SPI_Transmit+0x26>
 80028de:	2302      	movs	r3, #2
 80028e0:	e171      	b.n	8002bc6 <HAL_SPI_Transmit+0x30a>
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	225c      	movs	r2, #92	; 0x5c
 80028e6:	2101      	movs	r1, #1
 80028e8:	5499      	strb	r1, [r3, r2]

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80028ea:	f7fe f951 	bl	8000b90 <HAL_GetTick>
 80028ee:	0003      	movs	r3, r0
 80028f0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80028f2:	2316      	movs	r3, #22
 80028f4:	18fb      	adds	r3, r7, r3
 80028f6:	1dba      	adds	r2, r7, #6
 80028f8:	8812      	ldrh	r2, [r2, #0]
 80028fa:	801a      	strh	r2, [r3, #0]

  if (hspi->State != HAL_SPI_STATE_READY)
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	225d      	movs	r2, #93	; 0x5d
 8002900:	5c9b      	ldrb	r3, [r3, r2]
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	d004      	beq.n	8002912 <HAL_SPI_Transmit+0x56>
  {
    errorcode = HAL_BUSY;
 8002908:	231f      	movs	r3, #31
 800290a:	18fb      	adds	r3, r7, r3
 800290c:	2202      	movs	r2, #2
 800290e:	701a      	strb	r2, [r3, #0]
    goto error;
 8002910:	e14e      	b.n	8002bb0 <HAL_SPI_Transmit+0x2f4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d003      	beq.n	8002920 <HAL_SPI_Transmit+0x64>
 8002918:	1dbb      	adds	r3, r7, #6
 800291a:	881b      	ldrh	r3, [r3, #0]
 800291c:	2b00      	cmp	r3, #0
 800291e:	d104      	bne.n	800292a <HAL_SPI_Transmit+0x6e>
  {
    errorcode = HAL_ERROR;
 8002920:	231f      	movs	r3, #31
 8002922:	18fb      	adds	r3, r7, r3
 8002924:	2201      	movs	r2, #1
 8002926:	701a      	strb	r2, [r3, #0]
    goto error;
 8002928:	e142      	b.n	8002bb0 <HAL_SPI_Transmit+0x2f4>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	225d      	movs	r2, #93	; 0x5d
 800292e:	2103      	movs	r1, #3
 8002930:	5499      	strb	r1, [r3, r2]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	2200      	movs	r2, #0
 8002936:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	68ba      	ldr	r2, [r7, #8]
 800293c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800293e:	68fb      	ldr	r3, [r7, #12]
 8002940:	1dba      	adds	r2, r7, #6
 8002942:	8812      	ldrh	r2, [r2, #0]
 8002944:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	1dba      	adds	r2, r7, #6
 800294a:	8812      	ldrh	r2, [r2, #0]
 800294c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	2200      	movs	r2, #0
 8002952:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 8002954:	68fb      	ldr	r3, [r7, #12]
 8002956:	2244      	movs	r2, #68	; 0x44
 8002958:	2100      	movs	r1, #0
 800295a:	5299      	strh	r1, [r3, r2]
  hspi->RxXferCount = 0U;
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	2246      	movs	r2, #70	; 0x46
 8002960:	2100      	movs	r1, #0
 8002962:	5299      	strh	r1, [r3, r2]
  hspi->TxISR       = NULL;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	2200      	movs	r2, #0
 8002968:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	2200      	movs	r2, #0
 800296e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	689a      	ldr	r2, [r3, #8]
 8002974:	2380      	movs	r3, #128	; 0x80
 8002976:	021b      	lsls	r3, r3, #8
 8002978:	429a      	cmp	r2, r3
 800297a:	d110      	bne.n	800299e <HAL_SPI_Transmit+0xe2>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	681a      	ldr	r2, [r3, #0]
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	2140      	movs	r1, #64	; 0x40
 8002988:	438a      	bics	r2, r1
 800298a:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	681a      	ldr	r2, [r3, #0]
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2180      	movs	r1, #128	; 0x80
 8002998:	01c9      	lsls	r1, r1, #7
 800299a:	430a      	orrs	r2, r1
 800299c:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	2240      	movs	r2, #64	; 0x40
 80029a6:	4013      	ands	r3, r2
 80029a8:	2b40      	cmp	r3, #64	; 0x40
 80029aa:	d007      	beq.n	80029bc <HAL_SPI_Transmit+0x100>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	681a      	ldr	r2, [r3, #0]
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	2140      	movs	r1, #64	; 0x40
 80029b8:	430a      	orrs	r2, r1
 80029ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	68da      	ldr	r2, [r3, #12]
 80029c0:	23e0      	movs	r3, #224	; 0xe0
 80029c2:	00db      	lsls	r3, r3, #3
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d94e      	bls.n	8002a66 <HAL_SPI_Transmit+0x1aa>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80029c8:	68fb      	ldr	r3, [r7, #12]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d004      	beq.n	80029da <HAL_SPI_Transmit+0x11e>
 80029d0:	2316      	movs	r3, #22
 80029d2:	18fb      	adds	r3, r7, r3
 80029d4:	881b      	ldrh	r3, [r3, #0]
 80029d6:	2b01      	cmp	r3, #1
 80029d8:	d13f      	bne.n	8002a5a <HAL_SPI_Transmit+0x19e>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029de:	881a      	ldrh	r2, [r3, #0]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80029ea:	1c9a      	adds	r2, r3, #2
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	639a      	str	r2, [r3, #56]	; 0x38
      hspi->TxXferCount--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80029f4:	b29b      	uxth	r3, r3
 80029f6:	3b01      	subs	r3, #1
 80029f8:	b29a      	uxth	r2, r3
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80029fe:	e02c      	b.n	8002a5a <HAL_SPI_Transmit+0x19e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	689b      	ldr	r3, [r3, #8]
 8002a06:	2202      	movs	r2, #2
 8002a08:	4013      	ands	r3, r2
 8002a0a:	2b02      	cmp	r3, #2
 8002a0c:	d112      	bne.n	8002a34 <HAL_SPI_Transmit+0x178>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a0e:	68fb      	ldr	r3, [r7, #12]
 8002a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a12:	881a      	ldrh	r2, [r3, #0]
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a1e:	1c9a      	adds	r2, r3, #2
 8002a20:	68fb      	ldr	r3, [r7, #12]
 8002a22:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	3b01      	subs	r3, #1
 8002a2c:	b29a      	uxth	r2, r3
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002a32:	e012      	b.n	8002a5a <HAL_SPI_Transmit+0x19e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002a34:	f7fe f8ac 	bl	8000b90 <HAL_GetTick>
 8002a38:	0002      	movs	r2, r0
 8002a3a:	69bb      	ldr	r3, [r7, #24]
 8002a3c:	1ad3      	subs	r3, r2, r3
 8002a3e:	683a      	ldr	r2, [r7, #0]
 8002a40:	429a      	cmp	r2, r3
 8002a42:	d802      	bhi.n	8002a4a <HAL_SPI_Transmit+0x18e>
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	3301      	adds	r3, #1
 8002a48:	d102      	bne.n	8002a50 <HAL_SPI_Transmit+0x194>
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d104      	bne.n	8002a5a <HAL_SPI_Transmit+0x19e>
        {
          errorcode = HAL_TIMEOUT;
 8002a50:	231f      	movs	r3, #31
 8002a52:	18fb      	adds	r3, r7, r3
 8002a54:	2203      	movs	r2, #3
 8002a56:	701a      	strb	r2, [r3, #0]
          goto error;
 8002a58:	e0aa      	b.n	8002bb0 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a5e:	b29b      	uxth	r3, r3
 8002a60:	2b00      	cmp	r3, #0
 8002a62:	d1cd      	bne.n	8002a00 <HAL_SPI_Transmit+0x144>
 8002a64:	e080      	b.n	8002b68 <HAL_SPI_Transmit+0x2ac>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	685b      	ldr	r3, [r3, #4]
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d005      	beq.n	8002a7a <HAL_SPI_Transmit+0x1be>
 8002a6e:	2316      	movs	r3, #22
 8002a70:	18fb      	adds	r3, r7, r3
 8002a72:	881b      	ldrh	r3, [r3, #0]
 8002a74:	2b01      	cmp	r3, #1
 8002a76:	d000      	beq.n	8002a7a <HAL_SPI_Transmit+0x1be>
 8002a78:	e071      	b.n	8002b5e <HAL_SPI_Transmit+0x2a2>
    {
      if (hspi->TxXferCount > 1U)
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	2b01      	cmp	r3, #1
 8002a82:	d912      	bls.n	8002aaa <HAL_SPI_Transmit+0x1ee>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a88:	881a      	ldrh	r2, [r3, #0]
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002a90:	68fb      	ldr	r3, [r7, #12]
 8002a92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a94:	1c9a      	adds	r2, r3, #2
 8002a96:	68fb      	ldr	r3, [r7, #12]
 8002a98:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount -= 2U;
 8002a9a:	68fb      	ldr	r3, [r7, #12]
 8002a9c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002a9e:	b29b      	uxth	r3, r3
 8002aa0:	3b02      	subs	r3, #2
 8002aa2:	b29a      	uxth	r2, r3
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002aa8:	e059      	b.n	8002b5e <HAL_SPI_Transmit+0x2a2>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	330c      	adds	r3, #12
 8002ab4:	7812      	ldrb	r2, [r2, #0]
 8002ab6:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002abc:	1c5a      	adds	r2, r3, #1
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->TxXferCount--;
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	3b01      	subs	r3, #1
 8002aca:	b29a      	uxth	r2, r3
 8002acc:	68fb      	ldr	r3, [r7, #12]
 8002ace:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002ad0:	e045      	b.n	8002b5e <HAL_SPI_Transmit+0x2a2>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ad2:	68fb      	ldr	r3, [r7, #12]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	2202      	movs	r2, #2
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b02      	cmp	r3, #2
 8002ade:	d12b      	bne.n	8002b38 <HAL_SPI_Transmit+0x27c>
      {
        if (hspi->TxXferCount > 1U)
 8002ae0:	68fb      	ldr	r3, [r7, #12]
 8002ae2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002ae4:	b29b      	uxth	r3, r3
 8002ae6:	2b01      	cmp	r3, #1
 8002ae8:	d912      	bls.n	8002b10 <HAL_SPI_Transmit+0x254>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002aee:	881a      	ldrh	r2, [r3, #0]
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002afa:	1c9a      	adds	r2, r3, #2
 8002afc:	68fb      	ldr	r3, [r7, #12]
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount -= 2U;
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b04:	b29b      	uxth	r3, r3
 8002b06:	3b02      	subs	r3, #2
 8002b08:	b29a      	uxth	r2, r3
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b0e:	e026      	b.n	8002b5e <HAL_SPI_Transmit+0x2a2>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	330c      	adds	r3, #12
 8002b1a:	7812      	ldrb	r2, [r2, #0]
 8002b1c:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b22:	1c5a      	adds	r2, r3, #1
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	639a      	str	r2, [r3, #56]	; 0x38
          hspi->TxXferCount--;
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b2c:	b29b      	uxth	r3, r3
 8002b2e:	3b01      	subs	r3, #1
 8002b30:	b29a      	uxth	r2, r3
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8002b36:	e012      	b.n	8002b5e <HAL_SPI_Transmit+0x2a2>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002b38:	f7fe f82a 	bl	8000b90 <HAL_GetTick>
 8002b3c:	0002      	movs	r2, r0
 8002b3e:	69bb      	ldr	r3, [r7, #24]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	683a      	ldr	r2, [r7, #0]
 8002b44:	429a      	cmp	r2, r3
 8002b46:	d802      	bhi.n	8002b4e <HAL_SPI_Transmit+0x292>
 8002b48:	683b      	ldr	r3, [r7, #0]
 8002b4a:	3301      	adds	r3, #1
 8002b4c:	d102      	bne.n	8002b54 <HAL_SPI_Transmit+0x298>
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d104      	bne.n	8002b5e <HAL_SPI_Transmit+0x2a2>
        {
          errorcode = HAL_TIMEOUT;
 8002b54:	231f      	movs	r3, #31
 8002b56:	18fb      	adds	r3, r7, r3
 8002b58:	2203      	movs	r2, #3
 8002b5a:	701a      	strb	r2, [r3, #0]
          goto error;
 8002b5c:	e028      	b.n	8002bb0 <HAL_SPI_Transmit+0x2f4>
    while (hspi->TxXferCount > 0U)
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d1b4      	bne.n	8002ad2 <HAL_SPI_Transmit+0x216>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002b68:	69ba      	ldr	r2, [r7, #24]
 8002b6a:	6839      	ldr	r1, [r7, #0]
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	0018      	movs	r0, r3
 8002b70:	f000 f95e 	bl	8002e30 <SPI_EndRxTxTransaction>
 8002b74:	1e03      	subs	r3, r0, #0
 8002b76:	d002      	beq.n	8002b7e <HAL_SPI_Transmit+0x2c2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2220      	movs	r2, #32
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	2b00      	cmp	r3, #0
 8002b84:	d10a      	bne.n	8002b9c <HAL_SPI_Transmit+0x2e0>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002b86:	2300      	movs	r3, #0
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	68db      	ldr	r3, [r3, #12]
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689b      	ldr	r3, [r3, #8]
 8002b98:	613b      	str	r3, [r7, #16]
 8002b9a:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d004      	beq.n	8002bae <HAL_SPI_Transmit+0x2f2>
  {
    errorcode = HAL_ERROR;
 8002ba4:	231f      	movs	r3, #31
 8002ba6:	18fb      	adds	r3, r7, r3
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
 8002bac:	e000      	b.n	8002bb0 <HAL_SPI_Transmit+0x2f4>
  }

error:
 8002bae:	46c0      	nop			; (mov r8, r8)
  hspi->State = HAL_SPI_STATE_READY;
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	225d      	movs	r2, #93	; 0x5d
 8002bb4:	2101      	movs	r1, #1
 8002bb6:	5499      	strb	r1, [r3, r2]
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	225c      	movs	r2, #92	; 0x5c
 8002bbc:	2100      	movs	r1, #0
 8002bbe:	5499      	strb	r1, [r3, r2]
  return errorcode;
 8002bc0:	231f      	movs	r3, #31
 8002bc2:	18fb      	adds	r3, r7, r3
 8002bc4:	781b      	ldrb	r3, [r3, #0]
}
 8002bc6:	0018      	movs	r0, r3
 8002bc8:	46bd      	mov	sp, r7
 8002bca:	b008      	add	sp, #32
 8002bcc:	bd80      	pop	{r7, pc}
	...

08002bd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b088      	sub	sp, #32
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	60f8      	str	r0, [r7, #12]
 8002bd8:	60b9      	str	r1, [r7, #8]
 8002bda:	603b      	str	r3, [r7, #0]
 8002bdc:	1dfb      	adds	r3, r7, #7
 8002bde:	701a      	strb	r2, [r3, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002be0:	f7fd ffd6 	bl	8000b90 <HAL_GetTick>
 8002be4:	0002      	movs	r2, r0
 8002be6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002be8:	1a9b      	subs	r3, r3, r2
 8002bea:	683a      	ldr	r2, [r7, #0]
 8002bec:	18d3      	adds	r3, r2, r3
 8002bee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002bf0:	f7fd ffce 	bl	8000b90 <HAL_GetTick>
 8002bf4:	0003      	movs	r3, r0
 8002bf6:	61bb      	str	r3, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002bf8:	4b3a      	ldr	r3, [pc, #232]	; (8002ce4 <SPI_WaitFlagStateUntilTimeout+0x114>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	015b      	lsls	r3, r3, #5
 8002bfe:	0d1b      	lsrs	r3, r3, #20
 8002c00:	69fa      	ldr	r2, [r7, #28]
 8002c02:	4353      	muls	r3, r2
 8002c04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002c06:	e058      	b.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xea>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002c08:	683b      	ldr	r3, [r7, #0]
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	d055      	beq.n	8002cba <SPI_WaitFlagStateUntilTimeout+0xea>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002c0e:	f7fd ffbf 	bl	8000b90 <HAL_GetTick>
 8002c12:	0002      	movs	r2, r0
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	1ad3      	subs	r3, r2, r3
 8002c18:	69fa      	ldr	r2, [r7, #28]
 8002c1a:	429a      	cmp	r2, r3
 8002c1c:	d902      	bls.n	8002c24 <SPI_WaitFlagStateUntilTimeout+0x54>
 8002c1e:	69fb      	ldr	r3, [r7, #28]
 8002c20:	2b00      	cmp	r3, #0
 8002c22:	d142      	bne.n	8002caa <SPI_WaitFlagStateUntilTimeout+0xda>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	685a      	ldr	r2, [r3, #4]
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	21e0      	movs	r1, #224	; 0xe0
 8002c30:	438a      	bics	r2, r1
 8002c32:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002c34:	68fb      	ldr	r3, [r7, #12]
 8002c36:	685a      	ldr	r2, [r3, #4]
 8002c38:	2382      	movs	r3, #130	; 0x82
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d113      	bne.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x98>
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	689a      	ldr	r2, [r3, #8]
 8002c44:	2380      	movs	r3, #128	; 0x80
 8002c46:	021b      	lsls	r3, r3, #8
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d005      	beq.n	8002c58 <SPI_WaitFlagStateUntilTimeout+0x88>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002c4c:	68fb      	ldr	r3, [r7, #12]
 8002c4e:	689a      	ldr	r2, [r3, #8]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	00db      	lsls	r3, r3, #3
 8002c54:	429a      	cmp	r2, r3
 8002c56:	d107      	bne.n	8002c68 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	681a      	ldr	r2, [r3, #0]
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	2140      	movs	r1, #64	; 0x40
 8002c64:	438a      	bics	r2, r1
 8002c66:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002c6c:	2380      	movs	r3, #128	; 0x80
 8002c6e:	019b      	lsls	r3, r3, #6
 8002c70:	429a      	cmp	r2, r3
 8002c72:	d110      	bne.n	8002c96 <SPI_WaitFlagStateUntilTimeout+0xc6>
        {
          SPI_RESET_CRC(hspi);
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	681a      	ldr	r2, [r3, #0]
 8002c7a:	68fb      	ldr	r3, [r7, #12]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	491a      	ldr	r1, [pc, #104]	; (8002ce8 <SPI_WaitFlagStateUntilTimeout+0x118>)
 8002c80:	400a      	ands	r2, r1
 8002c82:	601a      	str	r2, [r3, #0]
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	681a      	ldr	r2, [r3, #0]
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	2180      	movs	r1, #128	; 0x80
 8002c90:	0189      	lsls	r1, r1, #6
 8002c92:	430a      	orrs	r2, r1
 8002c94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	225d      	movs	r2, #93	; 0x5d
 8002c9a:	2101      	movs	r1, #1
 8002c9c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	225c      	movs	r2, #92	; 0x5c
 8002ca2:	2100      	movs	r1, #0
 8002ca4:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002ca6:	2303      	movs	r3, #3
 8002ca8:	e017      	b.n	8002cda <SPI_WaitFlagStateUntilTimeout+0x10a>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d101      	bne.n	8002cb4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      {
        tmp_timeout = 0U;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002cb4:	697b      	ldr	r3, [r7, #20]
 8002cb6:	3b01      	subs	r3, #1
 8002cb8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	689b      	ldr	r3, [r3, #8]
 8002cc0:	68ba      	ldr	r2, [r7, #8]
 8002cc2:	4013      	ands	r3, r2
 8002cc4:	68ba      	ldr	r2, [r7, #8]
 8002cc6:	1ad3      	subs	r3, r2, r3
 8002cc8:	425a      	negs	r2, r3
 8002cca:	4153      	adcs	r3, r2
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	001a      	movs	r2, r3
 8002cd0:	1dfb      	adds	r3, r7, #7
 8002cd2:	781b      	ldrb	r3, [r3, #0]
 8002cd4:	429a      	cmp	r2, r3
 8002cd6:	d197      	bne.n	8002c08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8002cd8:	2300      	movs	r3, #0
}
 8002cda:	0018      	movs	r0, r3
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	b008      	add	sp, #32
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	46c0      	nop			; (mov r8, r8)
 8002ce4:	2000000c 	.word	0x2000000c
 8002ce8:	ffffdfff 	.word	0xffffdfff

08002cec <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	b08a      	sub	sp, #40	; 0x28
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	60f8      	str	r0, [r7, #12]
 8002cf4:	60b9      	str	r1, [r7, #8]
 8002cf6:	607a      	str	r2, [r7, #4]
 8002cf8:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8002cfa:	2317      	movs	r3, #23
 8002cfc:	18fb      	adds	r3, r7, r3
 8002cfe:	2200      	movs	r2, #0
 8002d00:	701a      	strb	r2, [r3, #0]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8002d02:	f7fd ff45 	bl	8000b90 <HAL_GetTick>
 8002d06:	0002      	movs	r2, r0
 8002d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002d0a:	1a9b      	subs	r3, r3, r2
 8002d0c:	683a      	ldr	r2, [r7, #0]
 8002d0e:	18d3      	adds	r3, r2, r3
 8002d10:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 8002d12:	f7fd ff3d 	bl	8000b90 <HAL_GetTick>
 8002d16:	0003      	movs	r3, r0
 8002d18:	623b      	str	r3, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	330c      	adds	r3, #12
 8002d20:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8002d22:	4b41      	ldr	r3, [pc, #260]	; (8002e28 <SPI_WaitFifoStateUntilTimeout+0x13c>)
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	0013      	movs	r3, r2
 8002d28:	009b      	lsls	r3, r3, #2
 8002d2a:	189b      	adds	r3, r3, r2
 8002d2c:	00da      	lsls	r2, r3, #3
 8002d2e:	1ad3      	subs	r3, r2, r3
 8002d30:	0d1b      	lsrs	r3, r3, #20
 8002d32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d34:	4353      	muls	r3, r2
 8002d36:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 8002d38:	e068      	b.n	8002e0c <SPI_WaitFifoStateUntilTimeout+0x120>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 8002d3a:	68ba      	ldr	r2, [r7, #8]
 8002d3c:	23c0      	movs	r3, #192	; 0xc0
 8002d3e:	00db      	lsls	r3, r3, #3
 8002d40:	429a      	cmp	r2, r3
 8002d42:	d10a      	bne.n	8002d5a <SPI_WaitFifoStateUntilTimeout+0x6e>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d107      	bne.n	8002d5a <SPI_WaitFifoStateUntilTimeout+0x6e>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	b2da      	uxtb	r2, r3
 8002d50:	2117      	movs	r1, #23
 8002d52:	187b      	adds	r3, r7, r1
 8002d54:	701a      	strb	r2, [r3, #0]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 8002d56:	187b      	adds	r3, r7, r1
 8002d58:	781b      	ldrb	r3, [r3, #0]
    }

    if (Timeout != HAL_MAX_DELAY)
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	d055      	beq.n	8002e0c <SPI_WaitFifoStateUntilTimeout+0x120>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002d60:	f7fd ff16 	bl	8000b90 <HAL_GetTick>
 8002d64:	0002      	movs	r2, r0
 8002d66:	6a3b      	ldr	r3, [r7, #32]
 8002d68:	1ad3      	subs	r3, r2, r3
 8002d6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d6c:	429a      	cmp	r2, r3
 8002d6e:	d902      	bls.n	8002d76 <SPI_WaitFifoStateUntilTimeout+0x8a>
 8002d70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d142      	bne.n	8002dfc <SPI_WaitFifoStateUntilTimeout+0x110>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	685a      	ldr	r2, [r3, #4]
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	21e0      	movs	r1, #224	; 0xe0
 8002d82:	438a      	bics	r2, r1
 8002d84:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	685a      	ldr	r2, [r3, #4]
 8002d8a:	2382      	movs	r3, #130	; 0x82
 8002d8c:	005b      	lsls	r3, r3, #1
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	d113      	bne.n	8002dba <SPI_WaitFifoStateUntilTimeout+0xce>
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	689a      	ldr	r2, [r3, #8]
 8002d96:	2380      	movs	r3, #128	; 0x80
 8002d98:	021b      	lsls	r3, r3, #8
 8002d9a:	429a      	cmp	r2, r3
 8002d9c:	d005      	beq.n	8002daa <SPI_WaitFifoStateUntilTimeout+0xbe>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	2380      	movs	r3, #128	; 0x80
 8002da4:	00db      	lsls	r3, r3, #3
 8002da6:	429a      	cmp	r2, r3
 8002da8:	d107      	bne.n	8002dba <SPI_WaitFifoStateUntilTimeout+0xce>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	681a      	ldr	r2, [r3, #0]
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2140      	movs	r1, #64	; 0x40
 8002db6:	438a      	bics	r2, r1
 8002db8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002dbe:	2380      	movs	r3, #128	; 0x80
 8002dc0:	019b      	lsls	r3, r3, #6
 8002dc2:	429a      	cmp	r2, r3
 8002dc4:	d110      	bne.n	8002de8 <SPI_WaitFifoStateUntilTimeout+0xfc>
        {
          SPI_RESET_CRC(hspi);
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	681a      	ldr	r2, [r3, #0]
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4916      	ldr	r1, [pc, #88]	; (8002e2c <SPI_WaitFifoStateUntilTimeout+0x140>)
 8002dd2:	400a      	ands	r2, r1
 8002dd4:	601a      	str	r2, [r3, #0]
 8002dd6:	68fb      	ldr	r3, [r7, #12]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681a      	ldr	r2, [r3, #0]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	2180      	movs	r1, #128	; 0x80
 8002de2:	0189      	lsls	r1, r1, #6
 8002de4:	430a      	orrs	r2, r1
 8002de6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	225d      	movs	r2, #93	; 0x5d
 8002dec:	2101      	movs	r1, #1
 8002dee:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	225c      	movs	r2, #92	; 0x5c
 8002df4:	2100      	movs	r1, #0
 8002df6:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8002df8:	2303      	movs	r3, #3
 8002dfa:	e010      	b.n	8002e1e <SPI_WaitFifoStateUntilTimeout+0x132>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002dfc:	69bb      	ldr	r3, [r7, #24]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d101      	bne.n	8002e06 <SPI_WaitFifoStateUntilTimeout+0x11a>
      {
        tmp_timeout = 0U;
 8002e02:	2300      	movs	r3, #0
 8002e04:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 8002e06:	69bb      	ldr	r3, [r7, #24]
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	689b      	ldr	r3, [r3, #8]
 8002e12:	68ba      	ldr	r2, [r7, #8]
 8002e14:	4013      	ands	r3, r2
 8002e16:	687a      	ldr	r2, [r7, #4]
 8002e18:	429a      	cmp	r2, r3
 8002e1a:	d18e      	bne.n	8002d3a <SPI_WaitFifoStateUntilTimeout+0x4e>
    }
  }

  return HAL_OK;
 8002e1c:	2300      	movs	r3, #0
}
 8002e1e:	0018      	movs	r0, r3
 8002e20:	46bd      	mov	sp, r7
 8002e22:	b00a      	add	sp, #40	; 0x28
 8002e24:	bd80      	pop	{r7, pc}
 8002e26:	46c0      	nop			; (mov r8, r8)
 8002e28:	2000000c 	.word	0x2000000c
 8002e2c:	ffffdfff 	.word	0xffffdfff

08002e30 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002e30:	b580      	push	{r7, lr}
 8002e32:	b086      	sub	sp, #24
 8002e34:	af02      	add	r7, sp, #8
 8002e36:	60f8      	str	r0, [r7, #12]
 8002e38:	60b9      	str	r1, [r7, #8]
 8002e3a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e3c:	68ba      	ldr	r2, [r7, #8]
 8002e3e:	23c0      	movs	r3, #192	; 0xc0
 8002e40:	0159      	lsls	r1, r3, #5
 8002e42:	68f8      	ldr	r0, [r7, #12]
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	9300      	str	r3, [sp, #0]
 8002e48:	0013      	movs	r3, r2
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	f7ff ff4e 	bl	8002cec <SPI_WaitFifoStateUntilTimeout>
 8002e50:	1e03      	subs	r3, r0, #0
 8002e52:	d007      	beq.n	8002e64 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e58:	2220      	movs	r2, #32
 8002e5a:	431a      	orrs	r2, r3
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e60:	2303      	movs	r3, #3
 8002e62:	e027      	b.n	8002eb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002e64:	68ba      	ldr	r2, [r7, #8]
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	9300      	str	r3, [sp, #0]
 8002e6c:	0013      	movs	r3, r2
 8002e6e:	2200      	movs	r2, #0
 8002e70:	2180      	movs	r1, #128	; 0x80
 8002e72:	f7ff fead 	bl	8002bd0 <SPI_WaitFlagStateUntilTimeout>
 8002e76:	1e03      	subs	r3, r0, #0
 8002e78:	d007      	beq.n	8002e8a <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e7e:	2220      	movs	r2, #32
 8002e80:	431a      	orrs	r2, r3
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002e86:	2303      	movs	r3, #3
 8002e88:	e014      	b.n	8002eb4 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 8002e8a:	68ba      	ldr	r2, [r7, #8]
 8002e8c:	23c0      	movs	r3, #192	; 0xc0
 8002e8e:	00d9      	lsls	r1, r3, #3
 8002e90:	68f8      	ldr	r0, [r7, #12]
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	0013      	movs	r3, r2
 8002e98:	2200      	movs	r2, #0
 8002e9a:	f7ff ff27 	bl	8002cec <SPI_WaitFifoStateUntilTimeout>
 8002e9e:	1e03      	subs	r3, r0, #0
 8002ea0:	d007      	beq.n	8002eb2 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	431a      	orrs	r2, r3
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 8002eae:	2303      	movs	r3, #3
 8002eb0:	e000      	b.n	8002eb4 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8002eb2:	2300      	movs	r3, #0
}
 8002eb4:	0018      	movs	r0, r3
 8002eb6:	46bd      	mov	sp, r7
 8002eb8:	b004      	add	sp, #16
 8002eba:	bd80      	pop	{r7, pc}

08002ebc <memset>:
 8002ebc:	0003      	movs	r3, r0
 8002ebe:	1882      	adds	r2, r0, r2
 8002ec0:	4293      	cmp	r3, r2
 8002ec2:	d100      	bne.n	8002ec6 <memset+0xa>
 8002ec4:	4770      	bx	lr
 8002ec6:	7019      	strb	r1, [r3, #0]
 8002ec8:	3301      	adds	r3, #1
 8002eca:	e7f9      	b.n	8002ec0 <memset+0x4>

08002ecc <__libc_init_array>:
 8002ecc:	b570      	push	{r4, r5, r6, lr}
 8002ece:	2600      	movs	r6, #0
 8002ed0:	4c0c      	ldr	r4, [pc, #48]	; (8002f04 <__libc_init_array+0x38>)
 8002ed2:	4d0d      	ldr	r5, [pc, #52]	; (8002f08 <__libc_init_array+0x3c>)
 8002ed4:	1b64      	subs	r4, r4, r5
 8002ed6:	10a4      	asrs	r4, r4, #2
 8002ed8:	42a6      	cmp	r6, r4
 8002eda:	d109      	bne.n	8002ef0 <__libc_init_array+0x24>
 8002edc:	2600      	movs	r6, #0
 8002ede:	f000 f819 	bl	8002f14 <_init>
 8002ee2:	4c0a      	ldr	r4, [pc, #40]	; (8002f0c <__libc_init_array+0x40>)
 8002ee4:	4d0a      	ldr	r5, [pc, #40]	; (8002f10 <__libc_init_array+0x44>)
 8002ee6:	1b64      	subs	r4, r4, r5
 8002ee8:	10a4      	asrs	r4, r4, #2
 8002eea:	42a6      	cmp	r6, r4
 8002eec:	d105      	bne.n	8002efa <__libc_init_array+0x2e>
 8002eee:	bd70      	pop	{r4, r5, r6, pc}
 8002ef0:	00b3      	lsls	r3, r6, #2
 8002ef2:	58eb      	ldr	r3, [r5, r3]
 8002ef4:	4798      	blx	r3
 8002ef6:	3601      	adds	r6, #1
 8002ef8:	e7ee      	b.n	8002ed8 <__libc_init_array+0xc>
 8002efa:	00b3      	lsls	r3, r6, #2
 8002efc:	58eb      	ldr	r3, [r5, r3]
 8002efe:	4798      	blx	r3
 8002f00:	3601      	adds	r6, #1
 8002f02:	e7f2      	b.n	8002eea <__libc_init_array+0x1e>
 8002f04:	08002f70 	.word	0x08002f70
 8002f08:	08002f70 	.word	0x08002f70
 8002f0c:	08002f74 	.word	0x08002f74
 8002f10:	08002f70 	.word	0x08002f70

08002f14 <_init>:
 8002f14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f16:	46c0      	nop			; (mov r8, r8)
 8002f18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f1a:	bc08      	pop	{r3}
 8002f1c:	469e      	mov	lr, r3
 8002f1e:	4770      	bx	lr

08002f20 <_fini>:
 8002f20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f22:	46c0      	nop			; (mov r8, r8)
 8002f24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002f26:	bc08      	pop	{r3}
 8002f28:	469e      	mov	lr, r3
 8002f2a:	4770      	bx	lr
